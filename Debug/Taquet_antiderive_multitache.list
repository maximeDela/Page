
Taquet_antiderive_multitache.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004894  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004954  08004954  00014954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a44  08004a44  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004a44  08004a44  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a44  08004a44  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a44  08004a44  00014a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000824  20000074  08004ac0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000898  08004ac0  00020898  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f61f  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255e  00000000  00000000  0002f6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00031c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00032b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010df0  00000000  00000000  000338e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010558  00000000  00000000  000446d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000679d4  00000000  00000000  00054c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bc604  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000385c  00000000  00000000  000bc654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800493c 	.word	0x0800493c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	0800493c 	.word	0x0800493c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vApplicationIdleHook>:
void vApplicationTickHook(void);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000224:	46c0      	nop			; (mov r8, r8)
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}

0800022a <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800022a:	b580      	push	{r7, lr}
 800022c:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}

08000234 <vApplicationMallocFailedHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000238:	46c0      	nop			; (mov r8, r8)
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2240      	movs	r2, #64	; 0x40
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	46bd      	mov	sp, r7
 8000262:	b004      	add	sp, #16
 8000264:	bd80      	pop	{r7, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	20000090 	.word	0x20000090
 800026c:	20000148 	.word	0x20000148

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b5b0      	push	{r4, r5, r7, lr}
 8000272:	b098      	sub	sp, #96	; 0x60
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f001 fa1d 	bl	80016b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f867 	bl	800034c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 fa4b 	bl	8000718 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000282:	f000 f8a3 	bl	80003cc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000286:	f000 f995 	bl	80005b4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, ENA_Pin, GPIO_PIN_SET);
 800028a:	4b27      	ldr	r3, [pc, #156]	; (8000328 <main+0xb8>)
 800028c:	2201      	movs	r2, #1
 800028e:	2108      	movs	r1, #8
 8000290:	0018      	movs	r0, r3
 8000292:	f001 fcd8 	bl	8001c46 <HAL_GPIO_WritePin>
  TIM3->CCR1 = TIM3->ARR;
 8000296:	4a25      	ldr	r2, [pc, #148]	; (800032c <main+0xbc>)
 8000298:	4b24      	ldr	r3, [pc, #144]	; (800032c <main+0xbc>)
 800029a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800029c:	635a      	str	r2, [r3, #52]	; 0x34


	int forcemot = 0, comptpas = 0, pasmax = 17, o = 375, i, pas = 0, ordre =0;
 800029e:	2300      	movs	r3, #0
 80002a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80002a2:	2300      	movs	r3, #0
 80002a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80002a6:	2311      	movs	r3, #17
 80002a8:	657b      	str	r3, [r7, #84]	; 0x54
 80002aa:	2378      	movs	r3, #120	; 0x78
 80002ac:	33ff      	adds	r3, #255	; 0xff
 80002ae:	653b      	str	r3, [r7, #80]	; 0x50
 80002b0:	2300      	movs	r3, #0
 80002b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80002b4:	2300      	movs	r3, #0
 80002b6:	64bb      	str	r3, [r7, #72]	; 0x48
	forcemot = TIM1->ARR /2;
 80002b8:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <main+0xc0>)
 80002ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002bc:	085b      	lsrs	r3, r3, #1
 80002be:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue1 */
  osMessageQDef(Queue1, 16, uint16_t);
 80002c0:	2138      	movs	r1, #56	; 0x38
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	4a1b      	ldr	r2, [pc, #108]	; (8000334 <main+0xc4>)
 80002c6:	ca31      	ldmia	r2!, {r0, r4, r5}
 80002c8:	c331      	stmia	r3!, {r0, r4, r5}
 80002ca:	6812      	ldr	r2, [r2, #0]
 80002cc:	601a      	str	r2, [r3, #0]
  Queue1Handle = osMessageCreate(osMessageQ(Queue1), NULL);
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2100      	movs	r1, #0
 80002d2:	0018      	movs	r0, r3
 80002d4:	f003 f836 	bl	8003344 <osMessageCreate>
 80002d8:	0002      	movs	r2, r0
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <main+0xc8>)
 80002dc:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, osPriorityBelowNormal, 0, 80);
 80002de:	211c      	movs	r1, #28
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	4a16      	ldr	r2, [pc, #88]	; (800033c <main+0xcc>)
 80002e4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80002e6:	c331      	stmia	r3!, {r0, r4, r5}
 80002e8:	ca31      	ldmia	r2!, {r0, r4, r5}
 80002ea:	c331      	stmia	r3!, {r0, r4, r5}
 80002ec:	6812      	ldr	r2, [r2, #0]
 80002ee:	601a      	str	r2, [r3, #0]
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2100      	movs	r1, #0
 80002f4:	0018      	movs	r0, r3
 80002f6:	f002 ffc4 	bl	8003282 <osThreadCreate>
 80002fa:	0002      	movs	r2, r0
 80002fc:	4b10      	ldr	r3, [pc, #64]	; (8000340 <main+0xd0>)
 80002fe:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityBelowNormal, 0, 80);
 8000300:	003b      	movs	r3, r7
 8000302:	4a10      	ldr	r2, [pc, #64]	; (8000344 <main+0xd4>)
 8000304:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000306:	c313      	stmia	r3!, {r0, r1, r4}
 8000308:	ca13      	ldmia	r2!, {r0, r1, r4}
 800030a:	c313      	stmia	r3!, {r0, r1, r4}
 800030c:	6812      	ldr	r2, [r2, #0]
 800030e:	601a      	str	r2, [r3, #0]
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000310:	003b      	movs	r3, r7
 8000312:	2100      	movs	r1, #0
 8000314:	0018      	movs	r0, r3
 8000316:	f002 ffb4 	bl	8003282 <osThreadCreate>
 800031a:	0002      	movs	r2, r0
 800031c:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <main+0xd8>)
 800031e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000320:	f002 ffa7 	bl	8003272 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000324:	e7fe      	b.n	8000324 <main+0xb4>
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	48000400 	.word	0x48000400
 800032c:	40000400 	.word	0x40000400
 8000330:	40012c00 	.word	0x40012c00
 8000334:	08004964 	.word	0x08004964
 8000338:	200002e0 	.word	0x200002e0
 800033c:	08004974 	.word	0x08004974
 8000340:	200002d8 	.word	0x200002d8
 8000344:	08004990 	.word	0x08004990
 8000348:	200002dc 	.word	0x200002dc

0800034c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034c:	b590      	push	{r4, r7, lr}
 800034e:	b091      	sub	sp, #68	; 0x44
 8000350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	2410      	movs	r4, #16
 8000354:	193b      	adds	r3, r7, r4
 8000356:	0018      	movs	r0, r3
 8000358:	2330      	movs	r3, #48	; 0x30
 800035a:	001a      	movs	r2, r3
 800035c:	2100      	movs	r1, #0
 800035e:	f004 fa17 	bl	8004790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000362:	003b      	movs	r3, r7
 8000364:	0018      	movs	r0, r3
 8000366:	2310      	movs	r3, #16
 8000368:	001a      	movs	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	f004 fa10 	bl	8004790 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000370:	0021      	movs	r1, r4
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2202      	movs	r2, #2
 8000376:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2201      	movs	r2, #1
 800037c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2210      	movs	r2, #16
 8000382:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000384:	187b      	adds	r3, r7, r1
 8000386:	2200      	movs	r2, #0
 8000388:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038a:	187b      	adds	r3, r7, r1
 800038c:	0018      	movs	r0, r3
 800038e:	f001 fc77 	bl	8001c80 <HAL_RCC_OscConfig>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000396:	f001 f877 	bl	8001488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039a:	003b      	movs	r3, r7
 800039c:	2207      	movs	r2, #7
 800039e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003a0:	003b      	movs	r3, r7
 80003a2:	2200      	movs	r2, #0
 80003a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a6:	003b      	movs	r3, r7
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ac:	003b      	movs	r3, r7
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003b2:	003b      	movs	r3, r7
 80003b4:	2100      	movs	r1, #0
 80003b6:	0018      	movs	r0, r3
 80003b8:	f001 ff7c 	bl	80022b4 <HAL_RCC_ClockConfig>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003c0:	f001 f862 	bl	8001488 <Error_Handler>
  }
}
 80003c4:	46c0      	nop			; (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	b011      	add	sp, #68	; 0x44
 80003ca:	bd90      	pop	{r4, r7, pc}

080003cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b096      	sub	sp, #88	; 0x58
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d2:	2348      	movs	r3, #72	; 0x48
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	0018      	movs	r0, r3
 80003d8:	2310      	movs	r3, #16
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f004 f9d7 	bl	8004790 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e2:	2340      	movs	r3, #64	; 0x40
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	0018      	movs	r0, r3
 80003e8:	2308      	movs	r3, #8
 80003ea:	001a      	movs	r2, r3
 80003ec:	2100      	movs	r1, #0
 80003ee:	f004 f9cf 	bl	8004790 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003f2:	2324      	movs	r3, #36	; 0x24
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	0018      	movs	r0, r3
 80003f8:	231c      	movs	r3, #28
 80003fa:	001a      	movs	r2, r3
 80003fc:	2100      	movs	r1, #0
 80003fe:	f004 f9c7 	bl	8004790 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	0018      	movs	r0, r3
 8000406:	2320      	movs	r3, #32
 8000408:	001a      	movs	r2, r3
 800040a:	2100      	movs	r1, #0
 800040c:	f004 f9c0 	bl	8004790 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000410:	4b66      	ldr	r3, [pc, #408]	; (80005ac <MX_TIM1_Init+0x1e0>)
 8000412:	4a67      	ldr	r2, [pc, #412]	; (80005b0 <MX_TIM1_Init+0x1e4>)
 8000414:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000416:	4b65      	ldr	r3, [pc, #404]	; (80005ac <MX_TIM1_Init+0x1e0>)
 8000418:	2201      	movs	r2, #1
 800041a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041c:	4b63      	ldr	r3, [pc, #396]	; (80005ac <MX_TIM1_Init+0x1e0>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60;
 8000422:	4b62      	ldr	r3, [pc, #392]	; (80005ac <MX_TIM1_Init+0x1e0>)
 8000424:	223c      	movs	r2, #60	; 0x3c
 8000426:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000428:	4b60      	ldr	r3, [pc, #384]	; (80005ac <MX_TIM1_Init+0x1e0>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800042e:	4b5f      	ldr	r3, [pc, #380]	; (80005ac <MX_TIM1_Init+0x1e0>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000434:	4b5d      	ldr	r3, [pc, #372]	; (80005ac <MX_TIM1_Init+0x1e0>)
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800043a:	4b5c      	ldr	r3, [pc, #368]	; (80005ac <MX_TIM1_Init+0x1e0>)
 800043c:	0018      	movs	r0, r3
 800043e:	f002 f85d 	bl	80024fc <HAL_TIM_Base_Init>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000446:	f001 f81f 	bl	8001488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800044a:	2148      	movs	r1, #72	; 0x48
 800044c:	187b      	adds	r3, r7, r1
 800044e:	2280      	movs	r2, #128	; 0x80
 8000450:	0152      	lsls	r2, r2, #5
 8000452:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000454:	187a      	adds	r2, r7, r1
 8000456:	4b55      	ldr	r3, [pc, #340]	; (80005ac <MX_TIM1_Init+0x1e0>)
 8000458:	0011      	movs	r1, r2
 800045a:	0018      	movs	r0, r3
 800045c:	f002 fa62 	bl	8002924 <HAL_TIM_ConfigClockSource>
 8000460:	1e03      	subs	r3, r0, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000464:	f001 f810 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000468:	4b50      	ldr	r3, [pc, #320]	; (80005ac <MX_TIM1_Init+0x1e0>)
 800046a:	0018      	movs	r0, r3
 800046c:	f002 f896 	bl	800259c <HAL_TIM_PWM_Init>
 8000470:	1e03      	subs	r3, r0, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000474:	f001 f808 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000478:	2140      	movs	r1, #64	; 0x40
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2200      	movs	r2, #0
 8000484:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000486:	187a      	adds	r2, r7, r1
 8000488:	4b48      	ldr	r3, [pc, #288]	; (80005ac <MX_TIM1_Init+0x1e0>)
 800048a:	0011      	movs	r1, r2
 800048c:	0018      	movs	r0, r3
 800048e:	f002 fe27 	bl	80030e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000492:	1e03      	subs	r3, r0, #0
 8000494:	d001      	beq.n	800049a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000496:	f000 fff7 	bl	8001488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800049a:	2124      	movs	r1, #36	; 0x24
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2260      	movs	r2, #96	; 0x60
 80004a0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	220a      	movs	r2, #10
 80004a6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2200      	movs	r2, #0
 80004b2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2200      	movs	r2, #0
 80004be:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2200      	movs	r2, #0
 80004c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004c6:	1879      	adds	r1, r7, r1
 80004c8:	4b38      	ldr	r3, [pc, #224]	; (80005ac <MX_TIM1_Init+0x1e0>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	0018      	movs	r0, r3
 80004ce:	f002 f963 	bl	8002798 <HAL_TIM_PWM_ConfigChannel>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d001      	beq.n	80004da <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80004d6:	f000 ffd7 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004da:	2324      	movs	r3, #36	; 0x24
 80004dc:	18f9      	adds	r1, r7, r3
 80004de:	4b33      	ldr	r3, [pc, #204]	; (80005ac <MX_TIM1_Init+0x1e0>)
 80004e0:	2204      	movs	r2, #4
 80004e2:	0018      	movs	r0, r3
 80004e4:	f002 f958 	bl	8002798 <HAL_TIM_PWM_ConfigChannel>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80004ec:	f000 ffcc 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004f0:	2324      	movs	r3, #36	; 0x24
 80004f2:	18f9      	adds	r1, r7, r3
 80004f4:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <MX_TIM1_Init+0x1e0>)
 80004f6:	2208      	movs	r2, #8
 80004f8:	0018      	movs	r0, r3
 80004fa:	f002 f94d 	bl	8002798 <HAL_TIM_PWM_ConfigChannel>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000502:	f000 ffc1 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000506:	2324      	movs	r3, #36	; 0x24
 8000508:	18f9      	adds	r1, r7, r3
 800050a:	4b28      	ldr	r3, [pc, #160]	; (80005ac <MX_TIM1_Init+0x1e0>)
 800050c:	220c      	movs	r2, #12
 800050e:	0018      	movs	r0, r3
 8000510:	f002 f942 	bl	8002798 <HAL_TIM_PWM_ConfigChannel>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000518:	f000 ffb6 	bl	8001488 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2280      	movs	r2, #128	; 0x80
 800053e:	0192      	lsls	r2, r2, #6
 8000540:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000548:	1d3a      	adds	r2, r7, #4
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_TIM1_Init+0x1e0>)
 800054c:	0011      	movs	r1, r2
 800054e:	0018      	movs	r0, r3
 8000550:	f002 fe18 	bl	8003184 <HAL_TIMEx_ConfigBreakDeadTime>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d001      	beq.n	800055c <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8000558:	f000 ff96 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <MX_TIM1_Init+0x1e0>)
 800055e:	2100      	movs	r1, #0
 8000560:	0018      	movs	r0, r3
 8000562:	f002 f873 	bl	800264c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <MX_TIM1_Init+0x1e0>)
 8000568:	2104      	movs	r1, #4
 800056a:	0018      	movs	r0, r3
 800056c:	f002 f86e 	bl	800264c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <MX_TIM1_Init+0x1e0>)
 8000572:	2108      	movs	r1, #8
 8000574:	0018      	movs	r0, r3
 8000576:	f002 f869 	bl	800264c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <MX_TIM1_Init+0x1e0>)
 800057c:	210c      	movs	r1, #12
 800057e:	0018      	movs	r0, r3
 8000580:	f002 f864 	bl	800264c <HAL_TIM_PWM_Start>

  TIM1->CCR1 = 0;
 8000584:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <MX_TIM1_Init+0x1e4>)
 8000586:	2200      	movs	r2, #0
 8000588:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <MX_TIM1_Init+0x1e4>)
 800058c:	2200      	movs	r2, #0
 800058e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <MX_TIM1_Init+0x1e4>)
 8000592:	2200      	movs	r2, #0
 8000594:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 0;
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MX_TIM1_Init+0x1e4>)
 8000598:	2200      	movs	r2, #0
 800059a:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <MX_TIM1_Init+0x1e0>)
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 ffd6 	bl	8001550 <HAL_TIM_MspPostInit>

}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b016      	add	sp, #88	; 0x58
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000248 	.word	0x20000248
 80005b0:	40012c00 	.word	0x40012c00

080005b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08e      	sub	sp, #56	; 0x38
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ba:	2328      	movs	r3, #40	; 0x28
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	0018      	movs	r0, r3
 80005c0:	2310      	movs	r3, #16
 80005c2:	001a      	movs	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	f004 f8e3 	bl	8004790 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ca:	2320      	movs	r3, #32
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	0018      	movs	r0, r3
 80005d0:	2308      	movs	r3, #8
 80005d2:	001a      	movs	r2, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	f004 f8db 	bl	8004790 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	0018      	movs	r0, r3
 80005de:	231c      	movs	r3, #28
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f004 f8d4 	bl	8004790 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005e8:	4b49      	ldr	r3, [pc, #292]	; (8000710 <MX_TIM3_Init+0x15c>)
 80005ea:	4a4a      	ldr	r2, [pc, #296]	; (8000714 <MX_TIM3_Init+0x160>)
 80005ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 80005ee:	4b48      	ldr	r3, [pc, #288]	; (8000710 <MX_TIM3_Init+0x15c>)
 80005f0:	2208      	movs	r2, #8
 80005f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f4:	4b46      	ldr	r3, [pc, #280]	; (8000710 <MX_TIM3_Init+0x15c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80005fa:	4b45      	ldr	r3, [pc, #276]	; (8000710 <MX_TIM3_Init+0x15c>)
 80005fc:	22fa      	movs	r2, #250	; 0xfa
 80005fe:	0092      	lsls	r2, r2, #2
 8000600:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000602:	4b43      	ldr	r3, [pc, #268]	; (8000710 <MX_TIM3_Init+0x15c>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000608:	4b41      	ldr	r3, [pc, #260]	; (8000710 <MX_TIM3_Init+0x15c>)
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800060e:	4b40      	ldr	r3, [pc, #256]	; (8000710 <MX_TIM3_Init+0x15c>)
 8000610:	0018      	movs	r0, r3
 8000612:	f001 ff73 	bl	80024fc <HAL_TIM_Base_Init>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800061a:	f000 ff35 	bl	8001488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061e:	2128      	movs	r1, #40	; 0x28
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	0152      	lsls	r2, r2, #5
 8000626:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000628:	187a      	adds	r2, r7, r1
 800062a:	4b39      	ldr	r3, [pc, #228]	; (8000710 <MX_TIM3_Init+0x15c>)
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f002 f978 	bl	8002924 <HAL_TIM_ConfigClockSource>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000638:	f000 ff26 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800063c:	4b34      	ldr	r3, [pc, #208]	; (8000710 <MX_TIM3_Init+0x15c>)
 800063e:	0018      	movs	r0, r3
 8000640:	f001 ffac 	bl	800259c <HAL_TIM_PWM_Init>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000648:	f000 ff1e 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800064c:	2120      	movs	r1, #32
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800065a:	187a      	adds	r2, r7, r1
 800065c:	4b2c      	ldr	r3, [pc, #176]	; (8000710 <MX_TIM3_Init+0x15c>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f002 fd3d 	bl	80030e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800066a:	f000 ff0d 	bl	8001488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2260      	movs	r2, #96	; 0x60
 8000672:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	220a      	movs	r2, #10
 8000678:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000686:	1d39      	adds	r1, r7, #4
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <MX_TIM3_Init+0x15c>)
 800068a:	2200      	movs	r2, #0
 800068c:	0018      	movs	r0, r3
 800068e:	f002 f883 	bl	8002798 <HAL_TIM_PWM_ConfigChannel>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d001      	beq.n	800069a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000696:	f000 fef7 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800069a:	1d39      	adds	r1, r7, #4
 800069c:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_TIM3_Init+0x15c>)
 800069e:	2208      	movs	r2, #8
 80006a0:	0018      	movs	r0, r3
 80006a2:	f002 f879 	bl	8002798 <HAL_TIM_PWM_ConfigChannel>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 80006aa:	f000 feed 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006ae:	1d39      	adds	r1, r7, #4
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_TIM3_Init+0x15c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	0018      	movs	r0, r3
 80006b6:	f002 f86f 	bl	8002798 <HAL_TIM_PWM_ConfigChannel>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 80006be:	f000 fee3 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  //active les timer pour les fourches optiques
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_TIM3_Init+0x15c>)
 80006c4:	2108      	movs	r1, #8
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 ffc0 	bl	800264c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_TIM3_Init+0x15c>)
 80006ce:	210c      	movs	r1, #12
 80006d0:	0018      	movs	r0, r3
 80006d2:	f001 ffbb 	bl	800264c <HAL_TIM_PWM_Start>

  //active les timer pour les enables
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_TIM3_Init+0x15c>)
 80006d8:	2100      	movs	r1, #0
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 ffb6 	bl	800264c <HAL_TIM_PWM_Start>

    // timer pour les fourches optiques
    TIM3->CCR3 = TIM3->ARR/2;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_TIM3_Init+0x160>)
 80006e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006e4:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_TIM3_Init+0x160>)
 80006e6:	0852      	lsrs	r2, r2, #1
 80006e8:	63da      	str	r2, [r3, #60]	; 0x3c
    TIM3->CCR4 = TIM3->ARR/2;
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_TIM3_Init+0x160>)
 80006ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_TIM3_Init+0x160>)
 80006f0:	0852      	lsrs	r2, r2, #1
 80006f2:	641a      	str	r2, [r3, #64]	; 0x40

    //timer pour les enables
    TIM3->CCR1 = TIM3->ARR/2; // ENB
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_TIM3_Init+0x160>)
 80006f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_TIM3_Init+0x160>)
 80006fa:	0852      	lsrs	r2, r2, #1
 80006fc:	635a      	str	r2, [r3, #52]	; 0x34


  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006fe:	4b04      	ldr	r3, [pc, #16]	; (8000710 <MX_TIM3_Init+0x15c>)
 8000700:	0018      	movs	r0, r3
 8000702:	f000 ff25 	bl	8001550 <HAL_TIM_MspPostInit>

}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b00e      	add	sp, #56	; 0x38
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	20000290 	.word	0x20000290
 8000714:	40000400 	.word	0x40000400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b089      	sub	sp, #36	; 0x24
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	240c      	movs	r4, #12
 8000720:	193b      	adds	r3, r7, r4
 8000722:	0018      	movs	r0, r3
 8000724:	2314      	movs	r3, #20
 8000726:	001a      	movs	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	f004 f831 	bl	8004790 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4b39      	ldr	r3, [pc, #228]	; (8000814 <MX_GPIO_Init+0xfc>)
 8000730:	695a      	ldr	r2, [r3, #20]
 8000732:	4b38      	ldr	r3, [pc, #224]	; (8000814 <MX_GPIO_Init+0xfc>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	0289      	lsls	r1, r1, #10
 8000738:	430a      	orrs	r2, r1
 800073a:	615a      	str	r2, [r3, #20]
 800073c:	4b35      	ldr	r3, [pc, #212]	; (8000814 <MX_GPIO_Init+0xfc>)
 800073e:	695a      	ldr	r2, [r3, #20]
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	029b      	lsls	r3, r3, #10
 8000744:	4013      	ands	r3, r2
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b32      	ldr	r3, [pc, #200]	; (8000814 <MX_GPIO_Init+0xfc>)
 800074c:	695a      	ldr	r2, [r3, #20]
 800074e:	4b31      	ldr	r3, [pc, #196]	; (8000814 <MX_GPIO_Init+0xfc>)
 8000750:	2180      	movs	r1, #128	; 0x80
 8000752:	02c9      	lsls	r1, r1, #11
 8000754:	430a      	orrs	r2, r1
 8000756:	615a      	str	r2, [r3, #20]
 8000758:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <MX_GPIO_Init+0xfc>)
 800075a:	695a      	ldr	r2, [r3, #20]
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	02db      	lsls	r3, r3, #11
 8000760:	4013      	ands	r3, r2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_defaut_code_Pin|Led_defaut_ressort_Pin|Led_pene_mouvement_Pin|Led_pene_IN_Pin
 8000766:	2390      	movs	r3, #144	; 0x90
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	2200      	movs	r2, #0
 800076c:	217c      	movs	r1, #124	; 0x7c
 800076e:	0018      	movs	r0, r3
 8000770:	f001 fa69 	bl	8001c46 <HAL_GPIO_WritePin>
                          |Led_pene_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENA_Pin|Taquet_IN_Pin|Taquet_OUT_Pin, GPIO_PIN_RESET);
 8000774:	4b28      	ldr	r3, [pc, #160]	; (8000818 <MX_GPIO_Init+0x100>)
 8000776:	2200      	movs	r2, #0
 8000778:	2168      	movs	r1, #104	; 0x68
 800077a:	0018      	movs	r0, r3
 800077c:	f001 fa63 	bl	8001c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FO2_IN_Pin FO1_IN_Pin */
  GPIO_InitStruct.Pin = FO2_IN_Pin|FO1_IN_Pin;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2203      	movs	r2, #3
 8000784:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	193a      	adds	r2, r7, r4
 8000794:	2390      	movs	r3, #144	; 0x90
 8000796:	05db      	lsls	r3, r3, #23
 8000798:	0011      	movs	r1, r2
 800079a:	0018      	movs	r0, r3
 800079c:	f001 f8c6 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_defaut_code_Pin Led_defaut_ressort_Pin Led_pene_mouvement_Pin Led_pene_IN_Pin
                           Led_pene_OUT_Pin */
  GPIO_InitStruct.Pin = Led_defaut_code_Pin|Led_defaut_ressort_Pin|Led_pene_mouvement_Pin|Led_pene_IN_Pin
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	227c      	movs	r2, #124	; 0x7c
 80007a4:	601a      	str	r2, [r3, #0]
                          |Led_pene_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2201      	movs	r2, #1
 80007aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	193a      	adds	r2, r7, r4
 80007ba:	2390      	movs	r3, #144	; 0x90
 80007bc:	05db      	lsls	r3, r3, #23
 80007be:	0011      	movs	r1, r2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f001 f8b3 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENA_Pin Taquet_IN_Pin Taquet_OUT_Pin */
  GPIO_InitStruct.Pin = ENA_Pin|Taquet_IN_Pin|Taquet_OUT_Pin;
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	2268      	movs	r2, #104	; 0x68
 80007ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	2201      	movs	r2, #1
 80007d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <MX_GPIO_Init+0x100>)
 80007e2:	0019      	movs	r1, r3
 80007e4:	0010      	movs	r0, r2
 80007e6:	f001 f8a1 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : Pilote_Pin */
  GPIO_InitStruct.Pin = Pilote_Pin;
 80007ea:	0021      	movs	r1, r4
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Pilote_GPIO_Port, &GPIO_InitStruct);
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	4a05      	ldr	r2, [pc, #20]	; (8000818 <MX_GPIO_Init+0x100>)
 8000802:	0019      	movs	r1, r3
 8000804:	0010      	movs	r0, r2
 8000806:	f001 f891 	bl	800192c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b009      	add	sp, #36	; 0x24
 8000810:	bd90      	pop	{r4, r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	40021000 	.word	0x40021000
 8000818:	48000400 	.word	0x48000400

0800081c <fourcheoptique>:

/* USER CODE BEGIN 4 */

int fourcheoptique(uint16_t choix)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b087      	sub	sp, #28
 8000820:	af00      	add	r7, sp, #0
 8000822:	0002      	movs	r2, r0
 8000824:	1dbb      	adds	r3, r7, #6
 8000826:	801a      	strh	r2, [r3, #0]
	uint16_t x = 0, y = 0, compt = 0, nbrdetest = 100, etat = 0, etat1 = 0; //variabel de compteur
 8000828:	2310      	movs	r3, #16
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	2200      	movs	r2, #0
 800082e:	801a      	strh	r2, [r3, #0]
 8000830:	230e      	movs	r3, #14
 8000832:	18fb      	adds	r3, r7, r3
 8000834:	2200      	movs	r2, #0
 8000836:	801a      	strh	r2, [r3, #0]
 8000838:	2316      	movs	r3, #22
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	2200      	movs	r2, #0
 800083e:	801a      	strh	r2, [r3, #0]
 8000840:	230c      	movs	r3, #12
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	2264      	movs	r2, #100	; 0x64
 8000846:	801a      	strh	r2, [r3, #0]
 8000848:	2314      	movs	r3, #20
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	2200      	movs	r2, #0
 800084e:	801a      	strh	r2, [r3, #0]
 8000850:	2312      	movs	r3, #18
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	2200      	movs	r2, #0
 8000856:	801a      	strh	r2, [r3, #0]
	// frequence du timer
	TIM3->PSC = 8;
 8000858:	4b3d      	ldr	r3, [pc, #244]	; (8000950 <fourcheoptique+0x134>)
 800085a:	2208      	movs	r2, #8
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 1000;
 800085e:	4b3c      	ldr	r3, [pc, #240]	; (8000950 <fourcheoptique+0x134>)
 8000860:	22fa      	movs	r2, #250	; 0xfa
 8000862:	0092      	lsls	r2, r2, #2
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
	// timer enable
	TIM3->CCR1 = TIM3->ARR;
 8000866:	4a3a      	ldr	r2, [pc, #232]	; (8000950 <fourcheoptique+0x134>)
 8000868:	4b39      	ldr	r3, [pc, #228]	; (8000950 <fourcheoptique+0x134>)
 800086a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800086c:	635a      	str	r2, [r3, #52]	; 0x34
	while(compt<nbrdetest) // on vÃ©rifie 50 fois lÃ©tat logique du signal
 800086e:	e02b      	b.n	80008c8 <fourcheoptique+0xac>
	{
		x = HAL_GPIO_ReadPin(GPIOA, FO1_IN_Pin); // on lit la fourche optique 1
 8000870:	2390      	movs	r3, #144	; 0x90
 8000872:	05db      	lsls	r3, r3, #23
 8000874:	2102      	movs	r1, #2
 8000876:	0018      	movs	r0, r3
 8000878:	f001 f9c8 	bl	8001c0c <HAL_GPIO_ReadPin>
 800087c:	0003      	movs	r3, r0
 800087e:	001a      	movs	r2, r3
 8000880:	2410      	movs	r4, #16
 8000882:	193b      	adds	r3, r7, r4
 8000884:	801a      	strh	r2, [r3, #0]
		y = HAL_GPIO_ReadPin(GPIOA, FO2_IN_Pin); // on lit la fourche optique 2
 8000886:	2390      	movs	r3, #144	; 0x90
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	2101      	movs	r1, #1
 800088c:	0018      	movs	r0, r3
 800088e:	f001 f9bd 	bl	8001c0c <HAL_GPIO_ReadPin>
 8000892:	0003      	movs	r3, r0
 8000894:	001a      	movs	r2, r3
 8000896:	200e      	movs	r0, #14
 8000898:	183b      	adds	r3, r7, r0
 800089a:	801a      	strh	r2, [r3, #0]
		etat = etat + x;
 800089c:	2214      	movs	r2, #20
 800089e:	18bb      	adds	r3, r7, r2
 80008a0:	18b9      	adds	r1, r7, r2
 80008a2:	193a      	adds	r2, r7, r4
 80008a4:	8809      	ldrh	r1, [r1, #0]
 80008a6:	8812      	ldrh	r2, [r2, #0]
 80008a8:	188a      	adds	r2, r1, r2
 80008aa:	801a      	strh	r2, [r3, #0]
		etat1 = etat1 + y;
 80008ac:	2212      	movs	r2, #18
 80008ae:	18bb      	adds	r3, r7, r2
 80008b0:	18b9      	adds	r1, r7, r2
 80008b2:	183a      	adds	r2, r7, r0
 80008b4:	8809      	ldrh	r1, [r1, #0]
 80008b6:	8812      	ldrh	r2, [r2, #0]
 80008b8:	188a      	adds	r2, r1, r2
 80008ba:	801a      	strh	r2, [r3, #0]
		compt++;
 80008bc:	2116      	movs	r1, #22
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	881a      	ldrh	r2, [r3, #0]
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	3201      	adds	r2, #1
 80008c6:	801a      	strh	r2, [r3, #0]
	while(compt<nbrdetest) // on vÃ©rifie 50 fois lÃ©tat logique du signal
 80008c8:	2316      	movs	r3, #22
 80008ca:	18fa      	adds	r2, r7, r3
 80008cc:	210c      	movs	r1, #12
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	8812      	ldrh	r2, [r2, #0]
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d3cb      	bcc.n	8000870 <fourcheoptique+0x54>
	}
	if (etat == nbrdetest && choix == 1)
 80008d8:	2314      	movs	r3, #20
 80008da:	18fa      	adds	r2, r7, r3
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	8812      	ldrh	r2, [r2, #0]
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d105      	bne.n	80008f2 <fourcheoptique+0xd6>
 80008e6:	1dbb      	adds	r3, r7, #6
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d101      	bne.n	80008f2 <fourcheoptique+0xd6>
		return 1; // detection d'obstacle
 80008ee:	2301      	movs	r3, #1
 80008f0:	e029      	b.n	8000946 <fourcheoptique+0x12a>
	else if (etat < nbrdetest && choix == 1)
 80008f2:	2314      	movs	r3, #20
 80008f4:	18fa      	adds	r2, r7, r3
 80008f6:	230c      	movs	r3, #12
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	8812      	ldrh	r2, [r2, #0]
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d205      	bcs.n	800090e <fourcheoptique+0xf2>
 8000902:	1dbb      	adds	r3, r7, #6
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d101      	bne.n	800090e <fourcheoptique+0xf2>
		return 2; // rien Ã  l'horizon
 800090a:	2302      	movs	r3, #2
 800090c:	e01b      	b.n	8000946 <fourcheoptique+0x12a>
	else if (etat1 == nbrdetest && choix == 0)
 800090e:	2312      	movs	r3, #18
 8000910:	18fa      	adds	r2, r7, r3
 8000912:	230c      	movs	r3, #12
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	8812      	ldrh	r2, [r2, #0]
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	429a      	cmp	r2, r3
 800091c:	d105      	bne.n	800092a <fourcheoptique+0x10e>
 800091e:	1dbb      	adds	r3, r7, #6
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d101      	bne.n	800092a <fourcheoptique+0x10e>
		return 10; // detection d'obstacle
 8000926:	230a      	movs	r3, #10
 8000928:	e00d      	b.n	8000946 <fourcheoptique+0x12a>
	else if (etat1 < nbrdetest && choix == 0)
 800092a:	2312      	movs	r3, #18
 800092c:	18fa      	adds	r2, r7, r3
 800092e:	230c      	movs	r3, #12
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	8812      	ldrh	r2, [r2, #0]
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	429a      	cmp	r2, r3
 8000938:	d205      	bcs.n	8000946 <fourcheoptique+0x12a>
 800093a:	1dbb      	adds	r3, r7, #6
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d101      	bne.n	8000946 <fourcheoptique+0x12a>
		return 20; // rien Ã  l'horizon
 8000942:	2314      	movs	r3, #20
 8000944:	e7ff      	b.n	8000946 <fourcheoptique+0x12a>
}
 8000946:	0018      	movs	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	b007      	add	sp, #28
 800094c:	bd90      	pop	{r4, r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	40000400 	.word	0x40000400

08000954 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int fo1 = 0, fo2 = 0, ordre = 0, rentrer = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
	  /* Infinite loop */
	  for(;;)
	  {
		  //reception d'un ordre
		  HAL_GPIO_WritePin(GPIOB, Taquet_IN_Pin, SET);
 800096c:	4bc3      	ldr	r3, [pc, #780]	; (8000c7c <StartTask01+0x328>)
 800096e:	2201      	movs	r2, #1
 8000970:	2120      	movs	r1, #32
 8000972:	0018      	movs	r0, r3
 8000974:	f001 f967 	bl	8001c46 <HAL_GPIO_WritePin>
		  ordre = HAL_GPIO_ReadPin(GPIOB, Pilote_Pin);
 8000978:	4bc0      	ldr	r3, [pc, #768]	; (8000c7c <StartTask01+0x328>)
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	0018      	movs	r0, r3
 800097e:	f001 f945 	bl	8001c0c <HAL_GPIO_ReadPin>
 8000982:	0003      	movs	r3, r0
 8000984:	60bb      	str	r3, [r7, #8]
		  //Si ordre == 1 alors le pene doit rentrer
		  //SI ordre == 0 alors le pene doit sortir
		  if(ordre == 1 && rentrer == 0)
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d13e      	bne.n	8000a0a <StartTask01+0xb6>
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d13b      	bne.n	8000a0a <StartTask01+0xb6>
		  {
			  // on verifie si le pene est sortie
			  fo1 = fourcheoptique(1);
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff ff42 	bl	800081c <fourcheoptique>
 8000998:	0003      	movs	r3, r0
 800099a:	617b      	str	r3, [r7, #20]
			  if(fo1 == 1)
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d000      	beq.n	80009a4 <StartTask01+0x50>
 80009a2:	e0f0      	b.n	8000b86 <StartTask01+0x232>
			  {
				  // on demarre le moteur en envoyant un message vers la 2eme tache
				  moteurstart = 1; // moteur demarre la rentrer
 80009a4:	4bb6      	ldr	r3, [pc, #728]	; (8000c80 <StartTask01+0x32c>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	801a      	strh	r2, [r3, #0]

				  while(fo1 != 10 && moteurstart == 1)
 80009aa:	e007      	b.n	80009bc <StartTask01+0x68>
				  {
					  //reception message 63 pas fait avec la variable global start moteur
					  // on verifie si le pene est rentrer
					  fo1 = fourcheoptique(0);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff ff35 	bl	800081c <fourcheoptique>
 80009b2:	0003      	movs	r3, r0
 80009b4:	617b      	str	r3, [r7, #20]
					  osDelay(10);
 80009b6:	200a      	movs	r0, #10
 80009b8:	f002 fcb0 	bl	800331c <osDelay>
				  while(fo1 != 10 && moteurstart == 1)
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	2b0a      	cmp	r3, #10
 80009c0:	d003      	beq.n	80009ca <StartTask01+0x76>
 80009c2:	4baf      	ldr	r3, [pc, #700]	; (8000c80 <StartTask01+0x32c>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d0f0      	beq.n	80009ac <StartTask01+0x58>
				  }
				  // a parir de la le pen est bloque en position rentrer
				  // variable pour dire si le pene est rentrer ou non
				  rentrer = 1;
 80009ca:	2301      	movs	r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
				  moteurstart = 0;
 80009ce:	4bac      	ldr	r3, [pc, #688]	; (8000c80 <StartTask01+0x32c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	801a      	strh	r2, [r3, #0]
				  //envoyer au maitre que le taquet est rentrer
				  HAL_GPIO_WritePin(GPIOB, Taquet_IN_Pin, SET);
 80009d4:	4ba9      	ldr	r3, [pc, #676]	; (8000c7c <StartTask01+0x328>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	2120      	movs	r1, #32
 80009da:	0018      	movs	r0, r3
 80009dc:	f001 f933 	bl	8001c46 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, Taquet_OUT_Pin, RESET);
 80009e0:	4ba6      	ldr	r3, [pc, #664]	; (8000c7c <StartTask01+0x328>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	2140      	movs	r1, #64	; 0x40
 80009e6:	0018      	movs	r0, r3
 80009e8:	f001 f92d 	bl	8001c46 <HAL_GPIO_WritePin>
				  //informer pene rentrer
				  HAL_GPIO_WritePin(GPIOA, Led_pene_IN_Pin, SET);
 80009ec:	2390      	movs	r3, #144	; 0x90
 80009ee:	05db      	lsls	r3, r3, #23
 80009f0:	2201      	movs	r2, #1
 80009f2:	2120      	movs	r1, #32
 80009f4:	0018      	movs	r0, r3
 80009f6:	f001 f926 	bl	8001c46 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, Led_pene_OUT_Pin, RESET);
 80009fa:	2390      	movs	r3, #144	; 0x90
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	2200      	movs	r2, #0
 8000a00:	2140      	movs	r1, #64	; 0x40
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 f91f 	bl	8001c46 <HAL_GPIO_WritePin>
			  if(fo1 == 1)
 8000a08:	e0bd      	b.n	8000b86 <StartTask01+0x232>
			  }
		  }// Fin ordre de rentrer
		  else if(ordre == 0 && rentrer == 1)
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d000      	beq.n	8000a12 <StartTask01+0xbe>
 8000a10:	e0b9      	b.n	8000b86 <StartTask01+0x232>
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d000      	beq.n	8000a1a <StartTask01+0xc6>
 8000a18:	e0b5      	b.n	8000b86 <StartTask01+0x232>
		  {
			  moteurstart = 5;
 8000a1a:	4b99      	ldr	r3, [pc, #612]	; (8000c80 <StartTask01+0x32c>)
 8000a1c:	2205      	movs	r2, #5
 8000a1e:	801a      	strh	r2, [r3, #0]
			  // on verifie si le pene est rentrer
			  fo1 = fourcheoptique(0);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fefb 	bl	800081c <fourcheoptique>
 8000a26:	0003      	movs	r3, r0
 8000a28:	617b      	str	r3, [r7, #20]
			  if(fo1 == 10)//si rentrer
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	2b0a      	cmp	r3, #10
 8000a2e:	d000      	beq.n	8000a32 <StartTask01+0xde>
 8000a30:	e0a7      	b.n	8000b82 <StartTask01+0x22e>
			  {
				  //informe pene en mouvement
				  HAL_GPIO_WritePin(GPIOA, Led_pene_mouvement_Pin , GPIO_PIN_SET);
 8000a32:	2390      	movs	r3, #144	; 0x90
 8000a34:	05db      	lsls	r3, r3, #23
 8000a36:	2201      	movs	r2, #1
 8000a38:	2110      	movs	r1, #16
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f001 f903 	bl	8001c46 <HAL_GPIO_WritePin>
				  //desactive les sorties pour laisser le ressort sortir
				  TIM1->CCR3 = 0;
 8000a40:	4b90      	ldr	r3, [pc, #576]	; (8000c84 <StartTask01+0x330>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	63da      	str	r2, [r3, #60]	; 0x3c
				  TIM1->CCR2 = 0;
 8000a46:	4b8f      	ldr	r3, [pc, #572]	; (8000c84 <StartTask01+0x330>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	639a      	str	r2, [r3, #56]	; 0x38
				  TIM1->CCR4 = 0;
 8000a4c:	4b8d      	ldr	r3, [pc, #564]	; (8000c84 <StartTask01+0x330>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	641a      	str	r2, [r3, #64]	; 0x40
				  TIM1->CCR1 = 0;
 8000a52:	4b8c      	ldr	r3, [pc, #560]	; (8000c84 <StartTask01+0x330>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	635a      	str	r2, [r3, #52]	; 0x34
				  //desactivation des enables
				  HAL_GPIO_WritePin(GPIOB, ENA_Pin, GPIO_PIN_RESET);
 8000a58:	4b88      	ldr	r3, [pc, #544]	; (8000c7c <StartTask01+0x328>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2108      	movs	r1, #8
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f001 f8f1 	bl	8001c46 <HAL_GPIO_WritePin>
				  TIM3->CCR1 = 0; // => ENB desactiver
 8000a64:	4b88      	ldr	r3, [pc, #544]	; (8000c88 <StartTask01+0x334>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_Delay(1);//temps pour laisser le temps au pene de se faire voir par la fourche
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f000 fe86 	bl	800177c <HAL_Delay>
				  //activation des enables
				  TIM3->CCR1 = TIM3->ARR; // => ENB activer
 8000a70:	4a85      	ldr	r2, [pc, #532]	; (8000c88 <StartTask01+0x334>)
 8000a72:	4b85      	ldr	r3, [pc, #532]	; (8000c88 <StartTask01+0x334>)
 8000a74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000a76:	635a      	str	r2, [r3, #52]	; 0x34
				  //active la sortie
				  TIM1->CCR4 = TIM1->ARR/2;
 8000a78:	4b82      	ldr	r3, [pc, #520]	; (8000c84 <StartTask01+0x330>)
 8000a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a7c:	4b81      	ldr	r3, [pc, #516]	; (8000c84 <StartTask01+0x330>)
 8000a7e:	0852      	lsrs	r2, r2, #1
 8000a80:	641a      	str	r2, [r3, #64]	; 0x40
				  HAL_Delay(100);//temps pour laisser le temps au pene de se faire voir par la fourche
 8000a82:	2064      	movs	r0, #100	; 0x64
 8000a84:	f000 fe7a 	bl	800177c <HAL_Delay>
				  TIM1->CCR4 = 0;//relache la sorti totalement
 8000a88:	4b7e      	ldr	r3, [pc, #504]	; (8000c84 <StartTask01+0x330>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	641a      	str	r2, [r3, #64]	; 0x40
				  TIM3->CCR1 = 0; // => ENB desactiver
 8000a8e:	4b7e      	ldr	r3, [pc, #504]	; (8000c88 <StartTask01+0x334>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_Delay(50);//temps pour laisser le temps au pene de se faire voir par la fourche
 8000a94:	2032      	movs	r0, #50	; 0x32
 8000a96:	f000 fe71 	bl	800177c <HAL_Delay>
				  //savoir si le pene est bien sorti
				  fo1 = fourcheoptique(1);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff febe 	bl	800081c <fourcheoptique>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	617b      	str	r3, [r7, #20]
				  if(fo1 == 1)//le pen est bien sorti
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d128      	bne.n	8000afc <StartTask01+0x1a8>
				  {
					  //envoyer au maitre que le taquer est sorti
					  HAL_GPIO_WritePin(GPIOB, Taquet_OUT_Pin, SET);
 8000aaa:	4b74      	ldr	r3, [pc, #464]	; (8000c7c <StartTask01+0x328>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	2140      	movs	r1, #64	; 0x40
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f001 f8c8 	bl	8001c46 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOB, Taquet_IN_Pin, RESET);
 8000ab6:	4b71      	ldr	r3, [pc, #452]	; (8000c7c <StartTask01+0x328>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2120      	movs	r1, #32
 8000abc:	0018      	movs	r0, r3
 8000abe:	f001 f8c2 	bl	8001c46 <HAL_GPIO_WritePin>
					  //informe pene s'arrete
					  HAL_GPIO_WritePin(GPIOA, Led_pene_mouvement_Pin , GPIO_PIN_RESET);
 8000ac2:	2390      	movs	r3, #144	; 0x90
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2110      	movs	r1, #16
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 f8bb 	bl	8001c46 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, Led_defaut_ressort_Pin , GPIO_PIN_RESET);
 8000ad0:	2390      	movs	r3, #144	; 0x90
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2108      	movs	r1, #8
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f001 f8b4 	bl	8001c46 <HAL_GPIO_WritePin>
					  //informer pene rentrer
					  HAL_GPIO_WritePin(GPIOA, Led_pene_IN_Pin, RESET);
 8000ade:	2390      	movs	r3, #144	; 0x90
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 f8ad 	bl	8001c46 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, Led_pene_OUT_Pin, SET);
 8000aec:	2390      	movs	r3, #144	; 0x90
 8000aee:	05db      	lsls	r3, r3, #23
 8000af0:	2201      	movs	r2, #1
 8000af2:	2140      	movs	r1, #64	; 0x40
 8000af4:	0018      	movs	r0, r3
 8000af6:	f001 f8a6 	bl	8001c46 <HAL_GPIO_WritePin>
 8000afa:	e038      	b.n	8000b6e <StartTask01+0x21a>
				  }
				  else //probleme de ressort sort manuellement le pene
				  {
					  HAL_GPIO_WritePin(GPIOA, Led_defaut_ressort_Pin , GPIO_PIN_SET);
 8000afc:	2390      	movs	r3, #144	; 0x90
 8000afe:	05db      	lsls	r3, r3, #23
 8000b00:	2201      	movs	r2, #1
 8000b02:	2108      	movs	r1, #8
 8000b04:	0018      	movs	r0, r3
 8000b06:	f001 f89e 	bl	8001c46 <HAL_GPIO_WritePin>
					  //enable pour faire fonctionner le moteur
					  HAL_GPIO_WritePin(GPIOB, ENA_Pin, GPIO_PIN_SET);
 8000b0a:	4b5c      	ldr	r3, [pc, #368]	; (8000c7c <StartTask01+0x328>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2108      	movs	r1, #8
 8000b10:	0018      	movs	r0, r3
 8000b12:	f001 f898 	bl	8001c46 <HAL_GPIO_WritePin>
					  TIM3->CCR1 = TIM3->ARR; // => ENB activer
 8000b16:	4a5c      	ldr	r2, [pc, #368]	; (8000c88 <StartTask01+0x334>)
 8000b18:	4b5b      	ldr	r3, [pc, #364]	; (8000c88 <StartTask01+0x334>)
 8000b1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b1c:	635a      	str	r2, [r3, #52]	; 0x34
					  // on demarre le moteur en envoyant un message vers la 2eme tache
					  moteurstart = 2;
 8000b1e:	4b58      	ldr	r3, [pc, #352]	; (8000c80 <StartTask01+0x32c>)
 8000b20:	2202      	movs	r2, #2
 8000b22:	801a      	strh	r2, [r3, #0]
					  while(moteurstart == 2 && fo1 != 1)
 8000b24:	e002      	b.n	8000b2c <StartTask01+0x1d8>
					  {
						  //reception message 63 pas fait avec la variable global moteurstart
						  // on verifie si le pene est rentrer
						//  fo1 = fourcheoptique(1);
						  osDelay(10);
 8000b26:	200a      	movs	r0, #10
 8000b28:	f002 fbf8 	bl	800331c <osDelay>
					  while(moteurstart == 2 && fo1 != 1)
 8000b2c:	4b54      	ldr	r3, [pc, #336]	; (8000c80 <StartTask01+0x32c>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d102      	bne.n	8000b3a <StartTask01+0x1e6>
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d1f5      	bne.n	8000b26 <StartTask01+0x1d2>
					  }
					  //envoyer au maitre que le taquet est rentrer
					  HAL_GPIO_WritePin(GPIOB, Taquet_IN_Pin, RESET);
 8000b3a:	4b50      	ldr	r3, [pc, #320]	; (8000c7c <StartTask01+0x328>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2120      	movs	r1, #32
 8000b40:	0018      	movs	r0, r3
 8000b42:	f001 f880 	bl	8001c46 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOB, Taquet_OUT_Pin, SET);
 8000b46:	4b4d      	ldr	r3, [pc, #308]	; (8000c7c <StartTask01+0x328>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2140      	movs	r1, #64	; 0x40
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f001 f87a 	bl	8001c46 <HAL_GPIO_WritePin>
					  //informer pene rentrer
					  HAL_GPIO_WritePin(GPIOA, Led_pene_IN_Pin, RESET);
 8000b52:	2390      	movs	r3, #144	; 0x90
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	2200      	movs	r2, #0
 8000b58:	2120      	movs	r1, #32
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 f873 	bl	8001c46 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, Led_pene_OUT_Pin, SET);
 8000b60:	2390      	movs	r3, #144	; 0x90
 8000b62:	05db      	lsls	r3, r3, #23
 8000b64:	2201      	movs	r2, #1
 8000b66:	2140      	movs	r1, #64	; 0x40
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f001 f86c 	bl	8001c46 <HAL_GPIO_WritePin>
				  }// fin resortir le pen manuellement
				  //active les enables
				  HAL_GPIO_WritePin(GPIOB, ENA_Pin, GPIO_PIN_SET);
 8000b6e:	4b43      	ldr	r3, [pc, #268]	; (8000c7c <StartTask01+0x328>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	2108      	movs	r1, #8
 8000b74:	0018      	movs	r0, r3
 8000b76:	f001 f866 	bl	8001c46 <HAL_GPIO_WritePin>
				  TIM3->CCR1 = TIM3->ARR;
 8000b7a:	4a43      	ldr	r2, [pc, #268]	; (8000c88 <StartTask01+0x334>)
 8000b7c:	4b42      	ldr	r3, [pc, #264]	; (8000c88 <StartTask01+0x334>)
 8000b7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b80:	635a      	str	r2, [r3, #52]	; 0x34
			  }
			  rentrer = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
		  }// fin ordre de sorti*/

		  fo1 = fourcheoptique(0);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff fe48 	bl	800081c <fourcheoptique>
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	617b      	str	r3, [r7, #20]
		  fo2 = fourcheoptique(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f7ff fe43 	bl	800081c <fourcheoptique>
 8000b96:	0003      	movs	r3, r0
 8000b98:	613b      	str	r3, [r7, #16]
		  if(fo2 == 2 && fo1 == 20 && rentrer == 1)
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d130      	bne.n	8000c02 <StartTask01+0x2ae>
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	2b14      	cmp	r3, #20
 8000ba4:	d12d      	bne.n	8000c02 <StartTask01+0x2ae>
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d12a      	bne.n	8000c02 <StartTask01+0x2ae>
		  {
			  moteurstart = 1;
 8000bac:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <StartTask01+0x32c>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	801a      	strh	r2, [r3, #0]
			  while(fo1 == 20 && fo2 == 2)
 8000bb2:	e009      	b.n	8000bc8 <StartTask01+0x274>
			  {
				  fo1 = fourcheoptique(0);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff fe31 	bl	800081c <fourcheoptique>
 8000bba:	0003      	movs	r3, r0
 8000bbc:	617b      	str	r3, [r7, #20]
				  fo2 = fourcheoptique(1);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f7ff fe2c 	bl	800081c <fourcheoptique>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	613b      	str	r3, [r7, #16]
			  while(fo1 == 20 && fo2 == 2)
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	2b14      	cmp	r3, #20
 8000bcc:	d102      	bne.n	8000bd4 <StartTask01+0x280>
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d0ef      	beq.n	8000bb4 <StartTask01+0x260>
			  }
			  HAL_GPIO_WritePin(GPIOA, Led_defaut_ressort_Pin, SET);
 8000bd4:	2390      	movs	r3, #144	; 0x90
 8000bd6:	05db      	lsls	r3, r3, #23
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2108      	movs	r1, #8
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 f832 	bl	8001c46 <HAL_GPIO_WritePin>
			  moteurstart = 0;
 8000be2:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <StartTask01+0x32c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	801a      	strh	r2, [r3, #0]
			  TIM1->CCR1 = 9;
 8000be8:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <StartTask01+0x330>)
 8000bea:	2209      	movs	r2, #9
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR2 = 0;
 8000bee:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <StartTask01+0x330>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM1->CCR3 = 0;
 8000bf4:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <StartTask01+0x330>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM1->CCR4 = 0;
 8000bfa:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <StartTask01+0x330>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	641a      	str	r2, [r3, #64]	; 0x40
 8000c00:	e03a      	b.n	8000c78 <StartTask01+0x324>
		  }
		  else if(fo1 == 20 && fo2 == 2 && rentrer == 0)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	2b14      	cmp	r3, #20
 8000c06:	d130      	bne.n	8000c6a <StartTask01+0x316>
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d12d      	bne.n	8000c6a <StartTask01+0x316>
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d12a      	bne.n	8000c6a <StartTask01+0x316>
		  {
			  moteurstart = 2;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <StartTask01+0x32c>)
 8000c16:	2202      	movs	r2, #2
 8000c18:	801a      	strh	r2, [r3, #0]
			  while(fo1 == 20 && fo2 == 2)
 8000c1a:	e009      	b.n	8000c30 <StartTask01+0x2dc>
			  {
				  fo1 = fourcheoptique(0);
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff fdfd 	bl	800081c <fourcheoptique>
 8000c22:	0003      	movs	r3, r0
 8000c24:	617b      	str	r3, [r7, #20]
				  fo2 = fourcheoptique(1);
 8000c26:	2001      	movs	r0, #1
 8000c28:	f7ff fdf8 	bl	800081c <fourcheoptique>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	613b      	str	r3, [r7, #16]
			  while(fo1 == 20 && fo2 == 2)
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	2b14      	cmp	r3, #20
 8000c34:	d102      	bne.n	8000c3c <StartTask01+0x2e8>
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d0ef      	beq.n	8000c1c <StartTask01+0x2c8>
			  }
			  HAL_GPIO_WritePin(GPIOA, Led_defaut_ressort_Pin, SET);
 8000c3c:	2390      	movs	r3, #144	; 0x90
 8000c3e:	05db      	lsls	r3, r3, #23
 8000c40:	2201      	movs	r2, #1
 8000c42:	2108      	movs	r1, #8
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 fffe 	bl	8001c46 <HAL_GPIO_WritePin>
			  moteurstart = 0;
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <StartTask01+0x32c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	801a      	strh	r2, [r3, #0]
			  TIM1->CCR1 = 0;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <StartTask01+0x330>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR2 = 0;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <StartTask01+0x330>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM1->CCR3 = 0;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <StartTask01+0x330>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM1->CCR4 = 0;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <StartTask01+0x330>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	641a      	str	r2, [r3, #64]	; 0x40
 8000c68:	e006      	b.n	8000c78 <StartTask01+0x324>
		  }
		  else
			  HAL_GPIO_WritePin(GPIOA, Led_defaut_code_Pin|Led_defaut_ressort_Pin, RESET);
 8000c6a:	2390      	movs	r3, #144	; 0x90
 8000c6c:	05db      	lsls	r3, r3, #23
 8000c6e:	2200      	movs	r2, #0
 8000c70:	210c      	movs	r1, #12
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 ffe7 	bl	8001c46 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, Taquet_IN_Pin, SET);
 8000c78:	e678      	b.n	800096c <StartTask01+0x18>
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	48000400 	.word	0x48000400
 8000c80:	200002e4 	.word	0x200002e4
 8000c84:	40012c00 	.word	0x40012c00
 8000c88:	40000400 	.word	0x40000400

08000c8c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	int forcemot, comptpas = 0, pasmax = 6, o = 375, i, pas = 0, rentre = 10;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
 8000c98:	2306      	movs	r3, #6
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	2378      	movs	r3, #120	; 0x78
 8000c9e:	33ff      	adds	r3, #255	; 0xff
 8000ca0:	623b      	str	r3, [r7, #32]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
 8000ca6:	230a      	movs	r3, #10
 8000ca8:	617b      	str	r3, [r7, #20]
	forcemot = TIM1->ARR /2;
 8000caa:	4bd0      	ldr	r3, [pc, #832]	; (8000fec <StartTask02+0x360>)
 8000cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cae:	085b      	lsrs	r3, r3, #1
 8000cb0:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  comptpas = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
	  pas = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
	  if(moteurstart == 1) //moteur en mode rentrer le pene
 8000cba:	4bcd      	ldr	r3, [pc, #820]	; (8000ff0 <StartTask02+0x364>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d000      	beq.n	8000cc4 <StartTask02+0x38>
 8000cc2:	e1fd      	b.n	80010c0 <StartTask02+0x434>
	  {
		  //informe pene en mouvement
		  HAL_GPIO_WritePin(GPIOA, Led_pene_mouvement_Pin , GPIO_PIN_SET);
 8000cc4:	2390      	movs	r3, #144	; 0x90
 8000cc6:	05db      	lsls	r3, r3, #23
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2110      	movs	r1, #16
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f000 ffba 	bl	8001c46 <HAL_GPIO_WritePin>
		  //active les enables
		  HAL_GPIO_WritePin(GPIOB, ENA_Pin, GPIO_PIN_SET);
 8000cd2:	4bc8      	ldr	r3, [pc, #800]	; (8000ff4 <StartTask02+0x368>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f000 ffb4 	bl	8001c46 <HAL_GPIO_WritePin>
		  TIM3->CCR1 = TIM3->ARR;
 8000cde:	4ac6      	ldr	r2, [pc, #792]	; (8000ff8 <StartTask02+0x36c>)
 8000ce0:	4bc5      	ldr	r3, [pc, #788]	; (8000ff8 <StartTask02+0x36c>)
 8000ce2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ce4:	635a      	str	r2, [r3, #52]	; 0x34
		  for(i=0;i<3 && moteurstart == 1;i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
 8000cea:	e07b      	b.n	8000de4 <StartTask02+0x158>
		  {
			  TIM1->CCR4 = 0;
 8000cec:	4bbf      	ldr	r3, [pc, #764]	; (8000fec <StartTask02+0x360>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	641a      	str	r2, [r3, #64]	; 0x40
			  TIM1->CCR1 = forcemot;
 8000cf2:	4bbe      	ldr	r3, [pc, #760]	; (8000fec <StartTask02+0x360>)
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	635a      	str	r2, [r3, #52]	; 0x34
			  for(comptpas=0; comptpas < o; comptpas++);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8000cfc:	e002      	b.n	8000d04 <StartTask02+0x78>
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	3301      	adds	r3, #1
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
 8000d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dbf8      	blt.n	8000cfe <StartTask02+0x72>
			  TIM1->CCR1 = forcemot;
 8000d0c:	4bb7      	ldr	r3, [pc, #732]	; (8000fec <StartTask02+0x360>)
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR3 = forcemot;
 8000d12:	4bb6      	ldr	r3, [pc, #728]	; (8000fec <StartTask02+0x360>)
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	63da      	str	r2, [r3, #60]	; 0x3c
			  for(comptpas=0; comptpas < o; comptpas++);
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1c:	e002      	b.n	8000d24 <StartTask02+0x98>
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d20:	3301      	adds	r3, #1
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
 8000d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d26:	6a3b      	ldr	r3, [r7, #32]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	dbf8      	blt.n	8000d1e <StartTask02+0x92>
			  TIM1->CCR1 = 0;
 8000d2c:	4baf      	ldr	r3, [pc, #700]	; (8000fec <StartTask02+0x360>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR3 = forcemot;
 8000d32:	4bae      	ldr	r3, [pc, #696]	; (8000fec <StartTask02+0x360>)
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	63da      	str	r2, [r3, #60]	; 0x3c
			  for(comptpas=0; comptpas < o; comptpas++);
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d3c:	e002      	b.n	8000d44 <StartTask02+0xb8>
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	3301      	adds	r3, #1
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
 8000d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d46:	6a3b      	ldr	r3, [r7, #32]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbf8      	blt.n	8000d3e <StartTask02+0xb2>
			  TIM1->CCR3 = forcemot;
 8000d4c:	4ba7      	ldr	r3, [pc, #668]	; (8000fec <StartTask02+0x360>)
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM1->CCR2 = forcemot;
 8000d52:	4ba6      	ldr	r3, [pc, #664]	; (8000fec <StartTask02+0x360>)
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	639a      	str	r2, [r3, #56]	; 0x38
			  for(comptpas=0; comptpas < o; comptpas++);
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5c:	e002      	b.n	8000d64 <StartTask02+0xd8>
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	3301      	adds	r3, #1
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
 8000d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d66:	6a3b      	ldr	r3, [r7, #32]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf8      	blt.n	8000d5e <StartTask02+0xd2>
			  TIM1->CCR3 = 0;
 8000d6c:	4b9f      	ldr	r3, [pc, #636]	; (8000fec <StartTask02+0x360>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM1->CCR2 = forcemot;
 8000d72:	4b9e      	ldr	r3, [pc, #632]	; (8000fec <StartTask02+0x360>)
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	639a      	str	r2, [r3, #56]	; 0x38
			  for(comptpas=0; comptpas < o; comptpas++);
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7c:	e002      	b.n	8000d84 <StartTask02+0xf8>
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	3301      	adds	r3, #1
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
 8000d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d86:	6a3b      	ldr	r3, [r7, #32]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf8      	blt.n	8000d7e <StartTask02+0xf2>
			  TIM1->CCR2 = forcemot;
 8000d8c:	4b97      	ldr	r3, [pc, #604]	; (8000fec <StartTask02+0x360>)
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM1->CCR4 = forcemot;
 8000d92:	4b96      	ldr	r3, [pc, #600]	; (8000fec <StartTask02+0x360>)
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	641a      	str	r2, [r3, #64]	; 0x40
			  for(comptpas=0; comptpas < o; comptpas++);
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d9c:	e002      	b.n	8000da4 <StartTask02+0x118>
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	3301      	adds	r3, #1
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
 8000da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbf8      	blt.n	8000d9e <StartTask02+0x112>
			  TIM1->CCR2 = 0;
 8000dac:	4b8f      	ldr	r3, [pc, #572]	; (8000fec <StartTask02+0x360>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM1->CCR4 = forcemot;
 8000db2:	4b8e      	ldr	r3, [pc, #568]	; (8000fec <StartTask02+0x360>)
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	641a      	str	r2, [r3, #64]	; 0x40
			  for(comptpas=0; comptpas < o; comptpas++);
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
 8000dbc:	e002      	b.n	8000dc4 <StartTask02+0x138>
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dc6:	6a3b      	ldr	r3, [r7, #32]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dbf8      	blt.n	8000dbe <StartTask02+0x132>
			  TIM1->CCR4 = forcemot;
 8000dcc:	4b87      	ldr	r3, [pc, #540]	; (8000fec <StartTask02+0x360>)
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	641a      	str	r2, [r3, #64]	; 0x40
			  TIM1->CCR1 = forcemot;
 8000dd2:	4b86      	ldr	r3, [pc, #536]	; (8000fec <StartTask02+0x360>)
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	635a      	str	r2, [r3, #52]	; 0x34
			  o=o-20;
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
 8000dda:	3b14      	subs	r3, #20
 8000ddc:	623b      	str	r3, [r7, #32]
		  for(i=0;i<3 && moteurstart == 1;i++)
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3301      	adds	r3, #1
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	dc04      	bgt.n	8000df4 <StartTask02+0x168>
 8000dea:	4b81      	ldr	r3, [pc, #516]	; (8000ff0 <StartTask02+0x364>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d100      	bne.n	8000df4 <StartTask02+0x168>
 8000df2:	e77b      	b.n	8000cec <StartTask02+0x60>
		  }
		  for(pas = 0; pas < pasmax  && moteurstart == 1; pas++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	e082      	b.n	8000f00 <StartTask02+0x274>
		  {
			  TIM1->CCR4 = 0;
 8000dfa:	4b7c      	ldr	r3, [pc, #496]	; (8000fec <StartTask02+0x360>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	641a      	str	r2, [r3, #64]	; 0x40
			  TIM1->CCR1 = forcemot;
 8000e00:	4b7a      	ldr	r3, [pc, #488]	; (8000fec <StartTask02+0x360>)
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	635a      	str	r2, [r3, #52]	; 0x34
			  for(comptpas=0; comptpas < o; comptpas++);
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
 8000e0a:	e002      	b.n	8000e12 <StartTask02+0x186>
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	3301      	adds	r3, #1
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
 8000e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	dbf8      	blt.n	8000e0c <StartTask02+0x180>
			  TIM1->CCR1 = forcemot;
 8000e1a:	4b74      	ldr	r3, [pc, #464]	; (8000fec <StartTask02+0x360>)
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR3 = forcemot;
 8000e20:	4b72      	ldr	r3, [pc, #456]	; (8000fec <StartTask02+0x360>)
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	63da      	str	r2, [r3, #60]	; 0x3c
			  for(comptpas=0; comptpas < o; comptpas++);
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
 8000e2a:	e002      	b.n	8000e32 <StartTask02+0x1a6>
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	3301      	adds	r3, #1
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
 8000e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e34:	6a3b      	ldr	r3, [r7, #32]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	dbf8      	blt.n	8000e2c <StartTask02+0x1a0>
			  TIM1->CCR1 = 0;
 8000e3a:	4b6c      	ldr	r3, [pc, #432]	; (8000fec <StartTask02+0x360>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR3 = forcemot;
 8000e40:	4b6a      	ldr	r3, [pc, #424]	; (8000fec <StartTask02+0x360>)
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	63da      	str	r2, [r3, #60]	; 0x3c
			  for(comptpas=0; comptpas < o; comptpas++);
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
 8000e4a:	e002      	b.n	8000e52 <StartTask02+0x1c6>
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	3301      	adds	r3, #1
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
 8000e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e54:	6a3b      	ldr	r3, [r7, #32]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	dbf8      	blt.n	8000e4c <StartTask02+0x1c0>
			  TIM1->CCR3 = forcemot;
 8000e5a:	4b64      	ldr	r3, [pc, #400]	; (8000fec <StartTask02+0x360>)
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM1->CCR2 = forcemot;
 8000e60:	4b62      	ldr	r3, [pc, #392]	; (8000fec <StartTask02+0x360>)
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	639a      	str	r2, [r3, #56]	; 0x38
			  for(comptpas=0; comptpas < o; comptpas++);
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6a:	e002      	b.n	8000e72 <StartTask02+0x1e6>
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	3301      	adds	r3, #1
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
 8000e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e74:	6a3b      	ldr	r3, [r7, #32]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	dbf8      	blt.n	8000e6c <StartTask02+0x1e0>
			  TIM1->CCR3 = 0;
 8000e7a:	4b5c      	ldr	r3, [pc, #368]	; (8000fec <StartTask02+0x360>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM1->CCR2 = forcemot;
 8000e80:	4b5a      	ldr	r3, [pc, #360]	; (8000fec <StartTask02+0x360>)
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	639a      	str	r2, [r3, #56]	; 0x38
			  for(comptpas=0; comptpas < o; comptpas++);
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
 8000e8a:	e002      	b.n	8000e92 <StartTask02+0x206>
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	3301      	adds	r3, #1
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
 8000e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e94:	6a3b      	ldr	r3, [r7, #32]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	dbf8      	blt.n	8000e8c <StartTask02+0x200>
			  TIM1->CCR2 = forcemot;
 8000e9a:	4b54      	ldr	r3, [pc, #336]	; (8000fec <StartTask02+0x360>)
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM1->CCR4 = forcemot;
 8000ea0:	4b52      	ldr	r3, [pc, #328]	; (8000fec <StartTask02+0x360>)
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	641a      	str	r2, [r3, #64]	; 0x40
			  for(comptpas=0; comptpas < o; comptpas++);
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eaa:	e002      	b.n	8000eb2 <StartTask02+0x226>
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	3301      	adds	r3, #1
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	dbf8      	blt.n	8000eac <StartTask02+0x220>
			  TIM1->CCR2 = 0;
 8000eba:	4b4c      	ldr	r3, [pc, #304]	; (8000fec <StartTask02+0x360>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM1->CCR4 = forcemot;
 8000ec0:	4b4a      	ldr	r3, [pc, #296]	; (8000fec <StartTask02+0x360>)
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
			  for(comptpas=0; comptpas < o; comptpas++);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eca:	e002      	b.n	8000ed2 <StartTask02+0x246>
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	3301      	adds	r3, #1
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	dbf8      	blt.n	8000ecc <StartTask02+0x240>
			  TIM1->CCR4 = forcemot;
 8000eda:	4b44      	ldr	r3, [pc, #272]	; (8000fec <StartTask02+0x360>)
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	641a      	str	r2, [r3, #64]	; 0x40
			  TIM1->CCR1 = forcemot;
 8000ee0:	4b42      	ldr	r3, [pc, #264]	; (8000fec <StartTask02+0x360>)
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	635a      	str	r2, [r3, #52]	; 0x34
			  for(comptpas=0; comptpas < o; comptpas++);
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eea:	e002      	b.n	8000ef2 <StartTask02+0x266>
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	3301      	adds	r3, #1
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	dbf8      	blt.n	8000eec <StartTask02+0x260>
		  for(pas = 0; pas < pasmax  && moteurstart == 1; pas++)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	3301      	adds	r3, #1
 8000efe:	61bb      	str	r3, [r7, #24]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	da04      	bge.n	8000f12 <StartTask02+0x286>
 8000f08:	4b39      	ldr	r3, [pc, #228]	; (8000ff0 <StartTask02+0x364>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d100      	bne.n	8000f12 <StartTask02+0x286>
 8000f10:	e773      	b.n	8000dfa <StartTask02+0x16e>
		  }
		  for(i=0;i<=3 && moteurstart == 1;i++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
 8000f16:	e08e      	b.n	8001036 <StartTask02+0x3aa>
		  {
				  TIM1->CCR4 = 0;
 8000f18:	4b34      	ldr	r3, [pc, #208]	; (8000fec <StartTask02+0x360>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	641a      	str	r2, [r3, #64]	; 0x40
				  TIM1->CCR1 = forcemot;
 8000f1e:	4b33      	ldr	r3, [pc, #204]	; (8000fec <StartTask02+0x360>)
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34
				  for(comptpas=0; comptpas < o; comptpas++);
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
 8000f28:	e002      	b.n	8000f30 <StartTask02+0x2a4>
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbf8      	blt.n	8000f2a <StartTask02+0x29e>
				  TIM1->CCR1 = forcemot;
 8000f38:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <StartTask02+0x360>)
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	635a      	str	r2, [r3, #52]	; 0x34
				  TIM1->CCR3 = forcemot;
 8000f3e:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <StartTask02+0x360>)
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	63da      	str	r2, [r3, #60]	; 0x3c
				  for(comptpas=0; comptpas < o; comptpas++);
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
 8000f48:	e002      	b.n	8000f50 <StartTask02+0x2c4>
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f52:	6a3b      	ldr	r3, [r7, #32]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	dbf8      	blt.n	8000f4a <StartTask02+0x2be>
				  TIM1->CCR1 = 0;
 8000f58:	4b24      	ldr	r3, [pc, #144]	; (8000fec <StartTask02+0x360>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	635a      	str	r2, [r3, #52]	; 0x34
				  TIM1->CCR3 = forcemot;
 8000f5e:	4b23      	ldr	r3, [pc, #140]	; (8000fec <StartTask02+0x360>)
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	63da      	str	r2, [r3, #60]	; 0x3c
				  for(comptpas=0; comptpas < o; comptpas++);
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
 8000f68:	e002      	b.n	8000f70 <StartTask02+0x2e4>
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f72:	6a3b      	ldr	r3, [r7, #32]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf8      	blt.n	8000f6a <StartTask02+0x2de>
				  TIM1->CCR3 = forcemot;
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <StartTask02+0x360>)
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	63da      	str	r2, [r3, #60]	; 0x3c
				  TIM1->CCR2 = forcemot;
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <StartTask02+0x360>)
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	639a      	str	r2, [r3, #56]	; 0x38
				  for(comptpas=0; comptpas < o; comptpas++);
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
 8000f88:	e002      	b.n	8000f90 <StartTask02+0x304>
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f92:	6a3b      	ldr	r3, [r7, #32]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbf8      	blt.n	8000f8a <StartTask02+0x2fe>
				  TIM1->CCR3 = 0;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <StartTask02+0x360>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	63da      	str	r2, [r3, #60]	; 0x3c
				  TIM1->CCR2 = forcemot;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <StartTask02+0x360>)
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	639a      	str	r2, [r3, #56]	; 0x38
				  for(comptpas=0; comptpas < o; comptpas++);
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa8:	e002      	b.n	8000fb0 <StartTask02+0x324>
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	3301      	adds	r3, #1
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb2:	6a3b      	ldr	r3, [r7, #32]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbf8      	blt.n	8000faa <StartTask02+0x31e>
				  TIM1->CCR2 = forcemot;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <StartTask02+0x360>)
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	639a      	str	r2, [r3, #56]	; 0x38
				  TIM1->CCR4 = forcemot;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <StartTask02+0x360>)
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	641a      	str	r2, [r3, #64]	; 0x40
				  for(comptpas=0; comptpas < o; comptpas++);
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc8:	e002      	b.n	8000fd0 <StartTask02+0x344>
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	3301      	adds	r3, #1
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd2:	6a3b      	ldr	r3, [r7, #32]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dbf8      	blt.n	8000fca <StartTask02+0x33e>
				  TIM1->CCR2 = 0;
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <StartTask02+0x360>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	639a      	str	r2, [r3, #56]	; 0x38
				  TIM1->CCR4 = forcemot;
 8000fde:	4b03      	ldr	r3, [pc, #12]	; (8000fec <StartTask02+0x360>)
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	641a      	str	r2, [r3, #64]	; 0x40
				  for(comptpas=0; comptpas < o; comptpas++);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe8:	e00b      	b.n	8001002 <StartTask02+0x376>
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	40012c00 	.word	0x40012c00
 8000ff0:	200002e4 	.word	0x200002e4
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	40000400 	.word	0x40000400
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	3301      	adds	r3, #1
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
 8001002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001004:	6a3b      	ldr	r3, [r7, #32]
 8001006:	429a      	cmp	r2, r3
 8001008:	dbf8      	blt.n	8000ffc <StartTask02+0x370>
				  TIM1->CCR4 = forcemot;
 800100a:	4bd0      	ldr	r3, [pc, #832]	; (800134c <StartTask02+0x6c0>)
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
				  TIM1->CCR1 = forcemot;
 8001010:	4bce      	ldr	r3, [pc, #824]	; (800134c <StartTask02+0x6c0>)
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	635a      	str	r2, [r3, #52]	; 0x34
				  o=o+20;
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	3314      	adds	r3, #20
 800101a:	623b      	str	r3, [r7, #32]
				  for(comptpas=0; comptpas < o; comptpas++);
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
 8001020:	e002      	b.n	8001028 <StartTask02+0x39c>
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	3301      	adds	r3, #1
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
 8001028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	429a      	cmp	r2, r3
 800102e:	dbf8      	blt.n	8001022 <StartTask02+0x396>
		  for(i=0;i<=3 && moteurstart == 1;i++)
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	3301      	adds	r3, #1
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	2b03      	cmp	r3, #3
 800103a:	dc04      	bgt.n	8001046 <StartTask02+0x3ba>
 800103c:	4bc4      	ldr	r3, [pc, #784]	; (8001350 <StartTask02+0x6c4>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d100      	bne.n	8001046 <StartTask02+0x3ba>
 8001044:	e768      	b.n	8000f18 <StartTask02+0x28c>
		  }
		  	  moteurstart = 3; // fin séquence mais pas encore maintenue
 8001046:	4bc2      	ldr	r3, [pc, #776]	; (8001350 <StartTask02+0x6c4>)
 8001048:	2203      	movs	r2, #3
 800104a:	801a      	strh	r2, [r3, #0]
			  //controle frequence enable
			  TIM3->PSC = 1;
 800104c:	4bc1      	ldr	r3, [pc, #772]	; (8001354 <StartTask02+0x6c8>)
 800104e:	2201      	movs	r2, #1
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
			  TIM3->ARR = 60;
 8001052:	4bc0      	ldr	r3, [pc, #768]	; (8001354 <StartTask02+0x6c8>)
 8001054:	223c      	movs	r2, #60	; 0x3c
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c
			  // maintient en rentrer
			  // timer enable
			  TIM3->CCR1 = 40; //TIM3->ARR;
 8001058:	4bbe      	ldr	r3, [pc, #760]	; (8001354 <StartTask02+0x6c8>)
 800105a:	2228      	movs	r2, #40	; 0x28
 800105c:	635a      	str	r2, [r3, #52]	; 0x34

			  TIM1->PSC = 1;
 800105e:	4bbb      	ldr	r3, [pc, #748]	; (800134c <StartTask02+0x6c0>)
 8001060:	2201      	movs	r2, #1
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
			  TIM1->ARR = 60;
 8001064:	4bb9      	ldr	r3, [pc, #740]	; (800134c <StartTask02+0x6c0>)
 8001066:	223c      	movs	r2, #60	; 0x3c
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
			  // timer sortie moteur
			  TIM1->CCR1 = 9;
 800106a:	4bb8      	ldr	r3, [pc, #736]	; (800134c <StartTask02+0x6c0>)
 800106c:	2209      	movs	r2, #9
 800106e:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR2 = 0;
 8001070:	4bb6      	ldr	r3, [pc, #728]	; (800134c <StartTask02+0x6c0>)
 8001072:	2200      	movs	r2, #0
 8001074:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM1->CCR3 = 0;
 8001076:	4bb5      	ldr	r3, [pc, #724]	; (800134c <StartTask02+0x6c0>)
 8001078:	2200      	movs	r2, #0
 800107a:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM1->CCR4 = 0;
 800107c:	4bb3      	ldr	r3, [pc, #716]	; (800134c <StartTask02+0x6c0>)
 800107e:	2200      	movs	r2, #0
 8001080:	641a      	str	r2, [r3, #64]	; 0x40

			  moteurstart = 0 ; //dit que la séquence est terminé moteur maintenu
 8001082:	4bb3      	ldr	r3, [pc, #716]	; (8001350 <StartTask02+0x6c4>)
 8001084:	2200      	movs	r2, #0
 8001086:	801a      	strh	r2, [r3, #0]

			  TIM3->PSC = 6;
 8001088:	4bb2      	ldr	r3, [pc, #712]	; (8001354 <StartTask02+0x6c8>)
 800108a:	2206      	movs	r2, #6
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
			  TIM3->ARR = 10;
 800108e:	4bb1      	ldr	r3, [pc, #708]	; (8001354 <StartTask02+0x6c8>)
 8001090:	220a      	movs	r2, #10
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
			  pas = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
			  HAL_GPIO_WritePin(GPIOA, Led_pene_mouvement_Pin , GPIO_PIN_RESET);
 8001098:	2390      	movs	r3, #144	; 0x90
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	2200      	movs	r2, #0
 800109e:	2110      	movs	r1, #16
 80010a0:	0018      	movs	r0, r3
 80010a2:	f000 fdd0 	bl	8001c46 <HAL_GPIO_WritePin>
			  rentre = 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
			  while(rentre == 1)
 80010aa:	e005      	b.n	80010b8 <StartTask02+0x42c>
			  {
				  if(moteurstart == 5)
 80010ac:	4ba8      	ldr	r3, [pc, #672]	; (8001350 <StartTask02+0x6c4>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	2b05      	cmp	r3, #5
 80010b2:	d101      	bne.n	80010b8 <StartTask02+0x42c>
					  rentre = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
			  while(rentre == 1)
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d0f6      	beq.n	80010ac <StartTask02+0x420>
 80010be:	e5f8      	b.n	8000cb2 <StartTask02+0x26>
			  }//fin sortir pene
	  }//stop rentrer le moteur
	  else if (moteurstart == 2 && rentre == 0) // sortir le moteur
 80010c0:	4ba3      	ldr	r3, [pc, #652]	; (8001350 <StartTask02+0x6c4>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d000      	beq.n	80010ca <StartTask02+0x43e>
 80010c8:	e5f3      	b.n	8000cb2 <StartTask02+0x26>
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d000      	beq.n	80010d2 <StartTask02+0x446>
 80010d0:	e5ef      	b.n	8000cb2 <StartTask02+0x26>
	  {
		  //informe via led pene en mouvement
		  HAL_GPIO_WritePin(GPIOA, Led_pene_mouvement_Pin , GPIO_PIN_SET);
 80010d2:	2390      	movs	r3, #144	; 0x90
 80010d4:	05db      	lsls	r3, r3, #23
 80010d6:	2201      	movs	r2, #1
 80010d8:	2110      	movs	r1, #16
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 fdb3 	bl	8001c46 <HAL_GPIO_WritePin>
		  //active les enables
		  HAL_GPIO_WritePin(GPIOB, ENA_Pin, GPIO_PIN_SET);
 80010e0:	4b9d      	ldr	r3, [pc, #628]	; (8001358 <StartTask02+0x6cc>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	2108      	movs	r1, #8
 80010e6:	0018      	movs	r0, r3
 80010e8:	f000 fdad 	bl	8001c46 <HAL_GPIO_WritePin>
		  TIM3->CCR1 = TIM3->ARR;
 80010ec:	4a99      	ldr	r2, [pc, #612]	; (8001354 <StartTask02+0x6c8>)
 80010ee:	4b99      	ldr	r3, [pc, #612]	; (8001354 <StartTask02+0x6c8>)
 80010f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80010f2:	635a      	str	r2, [r3, #52]	; 0x34

		  for(i=0;i<3 && moteurstart == 2; i++)//envoyer au maitre que le taquet est rentrer
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	e085      	b.n	8001206 <StartTask02+0x57a>
		  {
			  TIM1->CCR1 = 0;
 80010fa:	4b94      	ldr	r3, [pc, #592]	; (800134c <StartTask02+0x6c0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR4 = forcemot;
 8001100:	4b92      	ldr	r3, [pc, #584]	; (800134c <StartTask02+0x6c0>)
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	641a      	str	r2, [r3, #64]	; 0x40
			  for(comptpas=0; comptpas < o; comptpas++);
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
 800110a:	e002      	b.n	8001112 <StartTask02+0x486>
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	3301      	adds	r3, #1
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
 8001112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	429a      	cmp	r2, r3
 8001118:	dbf8      	blt.n	800110c <StartTask02+0x480>
			  TIM1->CCR4 = forcemot;
 800111a:	4b8c      	ldr	r3, [pc, #560]	; (800134c <StartTask02+0x6c0>)
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	641a      	str	r2, [r3, #64]	; 0x40
			  TIM1->CCR2 = forcemot;
 8001120:	4b8a      	ldr	r3, [pc, #552]	; (800134c <StartTask02+0x6c0>)
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	639a      	str	r2, [r3, #56]	; 0x38
			  for(comptpas=0; comptpas < o; comptpas++);
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
 800112a:	e002      	b.n	8001132 <StartTask02+0x4a6>
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	3301      	adds	r3, #1
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
 8001132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	429a      	cmp	r2, r3
 8001138:	dbf8      	blt.n	800112c <StartTask02+0x4a0>
			  TIM1->CCR4 = 0;
 800113a:	4b84      	ldr	r3, [pc, #528]	; (800134c <StartTask02+0x6c0>)
 800113c:	2200      	movs	r2, #0
 800113e:	641a      	str	r2, [r3, #64]	; 0x40
			  TIM1->CCR2 = forcemot;
 8001140:	4b82      	ldr	r3, [pc, #520]	; (800134c <StartTask02+0x6c0>)
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	639a      	str	r2, [r3, #56]	; 0x38
			  for(comptpas=0; comptpas < o; comptpas++);
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
 800114a:	e002      	b.n	8001152 <StartTask02+0x4c6>
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	3301      	adds	r3, #1
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
 8001152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	429a      	cmp	r2, r3
 8001158:	dbf8      	blt.n	800114c <StartTask02+0x4c0>
			  TIM1->CCR2 = forcemot;
 800115a:	4b7c      	ldr	r3, [pc, #496]	; (800134c <StartTask02+0x6c0>)
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM1->CCR3 = forcemot;
 8001160:	4b7a      	ldr	r3, [pc, #488]	; (800134c <StartTask02+0x6c0>)
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	63da      	str	r2, [r3, #60]	; 0x3c
			  for(comptpas=0; comptpas < o; comptpas++);
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
 800116a:	e002      	b.n	8001172 <StartTask02+0x4e6>
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	3301      	adds	r3, #1
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
 8001172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	429a      	cmp	r2, r3
 8001178:	dbf8      	blt.n	800116c <StartTask02+0x4e0>
			  TIM1->CCR2 = 0;
 800117a:	4b74      	ldr	r3, [pc, #464]	; (800134c <StartTask02+0x6c0>)
 800117c:	2200      	movs	r2, #0
 800117e:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM1->CCR3 = forcemot;
 8001180:	4b72      	ldr	r3, [pc, #456]	; (800134c <StartTask02+0x6c0>)
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	63da      	str	r2, [r3, #60]	; 0x3c
			  for(comptpas=0; comptpas < o; comptpas++);
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	e002      	b.n	8001192 <StartTask02+0x506>
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	3301      	adds	r3, #1
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
 8001192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	429a      	cmp	r2, r3
 8001198:	dbf8      	blt.n	800118c <StartTask02+0x500>
			  TIM1->CCR3 = forcemot;
 800119a:	4b6c      	ldr	r3, [pc, #432]	; (800134c <StartTask02+0x6c0>)
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM1->CCR1 = forcemot;
 80011a0:	4b6a      	ldr	r3, [pc, #424]	; (800134c <StartTask02+0x6c0>)
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	635a      	str	r2, [r3, #52]	; 0x34
			  for(comptpas=0; comptpas < o; comptpas++);
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
 80011aa:	e002      	b.n	80011b2 <StartTask02+0x526>
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	3301      	adds	r3, #1
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
 80011b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b4:	6a3b      	ldr	r3, [r7, #32]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	dbf8      	blt.n	80011ac <StartTask02+0x520>
			  TIM1->CCR3 = 0;
 80011ba:	4b64      	ldr	r3, [pc, #400]	; (800134c <StartTask02+0x6c0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM1->CCR1 = forcemot;
 80011c0:	4b62      	ldr	r3, [pc, #392]	; (800134c <StartTask02+0x6c0>)
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	635a      	str	r2, [r3, #52]	; 0x34
			  for(comptpas=0; comptpas < o; comptpas++);
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ca:	e002      	b.n	80011d2 <StartTask02+0x546>
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	3301      	adds	r3, #1
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
 80011d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	dbf8      	blt.n	80011cc <StartTask02+0x540>
			  TIM1->CCR1 = forcemot;
 80011da:	4b5c      	ldr	r3, [pc, #368]	; (800134c <StartTask02+0x6c0>)
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR4 = forcemot;
 80011e0:	4b5a      	ldr	r3, [pc, #360]	; (800134c <StartTask02+0x6c0>)
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
			  o=o+10;
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	330a      	adds	r3, #10
 80011ea:	623b      	str	r3, [r7, #32]
			  for(comptpas=0; comptpas < o; comptpas++);
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
 80011f0:	e002      	b.n	80011f8 <StartTask02+0x56c>
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	3301      	adds	r3, #1
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
 80011f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	dbf8      	blt.n	80011f2 <StartTask02+0x566>
		  for(i=0;i<3 && moteurstart == 2; i++)//envoyer au maitre que le taquet est rentrer
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	3301      	adds	r3, #1
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	2b02      	cmp	r3, #2
 800120a:	dc04      	bgt.n	8001216 <StartTask02+0x58a>
 800120c:	4b50      	ldr	r3, [pc, #320]	; (8001350 <StartTask02+0x6c4>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d100      	bne.n	8001216 <StartTask02+0x58a>
 8001214:	e771      	b.n	80010fa <StartTask02+0x46e>
		  }
		  for(pas = 0; pas < pasmax && moteurstart == 2; pas++)
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	e082      	b.n	8001322 <StartTask02+0x696>
		  {
			  // blocage sans bruit nickel
			  // le moteur n'arrive pas a entrener le pene
			  for(comptpas=0; comptpas < o; comptpas++);
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
 8001220:	e002      	b.n	8001228 <StartTask02+0x59c>
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	3301      	adds	r3, #1
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
 8001228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	429a      	cmp	r2, r3
 800122e:	dbf8      	blt.n	8001222 <StartTask02+0x596>
			  TIM1->CCR1 = 0;
 8001230:	4b46      	ldr	r3, [pc, #280]	; (800134c <StartTask02+0x6c0>)
 8001232:	2200      	movs	r2, #0
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR4 = forcemot;
 8001236:	4b45      	ldr	r3, [pc, #276]	; (800134c <StartTask02+0x6c0>)
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	641a      	str	r2, [r3, #64]	; 0x40
			  for(comptpas=0; comptpas < o; comptpas++);
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
 8001240:	e002      	b.n	8001248 <StartTask02+0x5bc>
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	3301      	adds	r3, #1
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
 8001248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf8      	blt.n	8001242 <StartTask02+0x5b6>
			  TIM1->CCR4 = forcemot;
 8001250:	4b3e      	ldr	r3, [pc, #248]	; (800134c <StartTask02+0x6c0>)
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	641a      	str	r2, [r3, #64]	; 0x40
			  TIM1->CCR2 = forcemot;
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <StartTask02+0x6c0>)
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	639a      	str	r2, [r3, #56]	; 0x38
			  for(comptpas=0; comptpas < o; comptpas++);
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
 8001260:	e002      	b.n	8001268 <StartTask02+0x5dc>
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	3301      	adds	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
 8001268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	429a      	cmp	r2, r3
 800126e:	dbf8      	blt.n	8001262 <StartTask02+0x5d6>
			  TIM1->CCR4 = 0;
 8001270:	4b36      	ldr	r3, [pc, #216]	; (800134c <StartTask02+0x6c0>)
 8001272:	2200      	movs	r2, #0
 8001274:	641a      	str	r2, [r3, #64]	; 0x40
			  TIM1->CCR2 = forcemot;
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <StartTask02+0x6c0>)
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	639a      	str	r2, [r3, #56]	; 0x38
			  for(comptpas=0; comptpas < o; comptpas++);
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
 8001280:	e002      	b.n	8001288 <StartTask02+0x5fc>
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	3301      	adds	r3, #1
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
 8001288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbf8      	blt.n	8001282 <StartTask02+0x5f6>
			  TIM1->CCR2 = forcemot;
 8001290:	4b2e      	ldr	r3, [pc, #184]	; (800134c <StartTask02+0x6c0>)
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM1->CCR3 = forcemot;
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <StartTask02+0x6c0>)
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
			  for(comptpas=0; comptpas < o; comptpas++);
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
 80012a0:	e002      	b.n	80012a8 <StartTask02+0x61c>
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	3301      	adds	r3, #1
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
 80012a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbf8      	blt.n	80012a2 <StartTask02+0x616>
			  TIM1->CCR2 = 0;
 80012b0:	4b26      	ldr	r3, [pc, #152]	; (800134c <StartTask02+0x6c0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM1->CCR3 = forcemot;
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <StartTask02+0x6c0>)
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	63da      	str	r2, [r3, #60]	; 0x3c
			  for(comptpas=0; comptpas < o; comptpas++);
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
 80012c0:	e002      	b.n	80012c8 <StartTask02+0x63c>
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	3301      	adds	r3, #1
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
 80012c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	dbf8      	blt.n	80012c2 <StartTask02+0x636>
			  TIM1->CCR3 = forcemot;
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <StartTask02+0x6c0>)
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM1->CCR1 = forcemot;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <StartTask02+0x6c0>)
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	635a      	str	r2, [r3, #52]	; 0x34
			  for(comptpas=0; comptpas < o; comptpas++);
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
 80012e0:	e002      	b.n	80012e8 <StartTask02+0x65c>
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	3301      	adds	r3, #1
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
 80012e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dbf8      	blt.n	80012e2 <StartTask02+0x656>
			  TIM1->CCR3 = 0;
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <StartTask02+0x6c0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM1->CCR1 = forcemot;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <StartTask02+0x6c0>)
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	635a      	str	r2, [r3, #52]	; 0x34
			  for(comptpas=0; comptpas < o; comptpas++);
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001300:	e002      	b.n	8001308 <StartTask02+0x67c>
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	3301      	adds	r3, #1
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
 8001308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	429a      	cmp	r2, r3
 800130e:	dbf8      	blt.n	8001302 <StartTask02+0x676>
			  TIM1->CCR1 = forcemot;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <StartTask02+0x6c0>)
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR4 = forcemot;
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <StartTask02+0x6c0>)
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
		  for(pas = 0; pas < pasmax && moteurstart == 2; pas++)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	3301      	adds	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	429a      	cmp	r2, r3
 8001328:	da04      	bge.n	8001334 <StartTask02+0x6a8>
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <StartTask02+0x6c4>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d100      	bne.n	8001334 <StartTask02+0x6a8>
 8001332:	e773      	b.n	800121c <StartTask02+0x590>
		  }
		  for(i=0;i<=3 && moteurstart == 2;i++)
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
 8001338:	e08d      	b.n	8001456 <StartTask02+0x7ca>
		  {
			  TIM1->CCR1 = 0;
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <StartTask02+0x6c0>)
 800133c:	2200      	movs	r2, #0
 800133e:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR4 = forcemot;
 8001340:	4b02      	ldr	r3, [pc, #8]	; (800134c <StartTask02+0x6c0>)
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	641a      	str	r2, [r3, #64]	; 0x40
			  for(comptpas=0; comptpas < o; comptpas++);
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
 800134a:	e00a      	b.n	8001362 <StartTask02+0x6d6>
 800134c:	40012c00 	.word	0x40012c00
 8001350:	200002e4 	.word	0x200002e4
 8001354:	40000400 	.word	0x40000400
 8001358:	48000400 	.word	0x48000400
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	3301      	adds	r3, #1
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
 8001362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	429a      	cmp	r2, r3
 8001368:	dbf8      	blt.n	800135c <StartTask02+0x6d0>
			  TIM1->CCR4 = forcemot;
 800136a:	4b45      	ldr	r3, [pc, #276]	; (8001480 <StartTask02+0x7f4>)
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	641a      	str	r2, [r3, #64]	; 0x40
			  TIM1->CCR2 = forcemot;
 8001370:	4b43      	ldr	r3, [pc, #268]	; (8001480 <StartTask02+0x7f4>)
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	639a      	str	r2, [r3, #56]	; 0x38
			  for(comptpas=0; comptpas < o; comptpas++);
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
 800137a:	e002      	b.n	8001382 <StartTask02+0x6f6>
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	3301      	adds	r3, #1
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
 8001382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	429a      	cmp	r2, r3
 8001388:	dbf8      	blt.n	800137c <StartTask02+0x6f0>
			  TIM1->CCR4 = 0;
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <StartTask02+0x7f4>)
 800138c:	2200      	movs	r2, #0
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
			  TIM1->CCR2 = forcemot;
 8001390:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <StartTask02+0x7f4>)
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	639a      	str	r2, [r3, #56]	; 0x38
			  for(comptpas=0; comptpas < o; comptpas++);
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
 800139a:	e002      	b.n	80013a2 <StartTask02+0x716>
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	3301      	adds	r3, #1
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
 80013a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dbf8      	blt.n	800139c <StartTask02+0x710>
			  TIM1->CCR2 = forcemot;
 80013aa:	4b35      	ldr	r3, [pc, #212]	; (8001480 <StartTask02+0x7f4>)
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM1->CCR3 = forcemot;
 80013b0:	4b33      	ldr	r3, [pc, #204]	; (8001480 <StartTask02+0x7f4>)
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	63da      	str	r2, [r3, #60]	; 0x3c
			  for(comptpas=0; comptpas < o; comptpas++);
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ba:	e002      	b.n	80013c2 <StartTask02+0x736>
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	3301      	adds	r3, #1
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
 80013c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	dbf8      	blt.n	80013bc <StartTask02+0x730>
			  TIM1->CCR2 = 0;
 80013ca:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <StartTask02+0x7f4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM1->CCR3 = forcemot;
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <StartTask02+0x7f4>)
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	63da      	str	r2, [r3, #60]	; 0x3c
			  for(comptpas=0; comptpas < o; comptpas++);
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
 80013da:	e002      	b.n	80013e2 <StartTask02+0x756>
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	3301      	adds	r3, #1
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
 80013e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	dbf8      	blt.n	80013dc <StartTask02+0x750>
			  TIM1->CCR3 = forcemot;
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <StartTask02+0x7f4>)
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM1->CCR1 = forcemot;
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <StartTask02+0x7f4>)
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34
			  for(comptpas=0; comptpas < o; comptpas++);
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	e002      	b.n	8001402 <StartTask02+0x776>
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	3301      	adds	r3, #1
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
 8001402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	429a      	cmp	r2, r3
 8001408:	dbf8      	blt.n	80013fc <StartTask02+0x770>
			  TIM1->CCR3 = 0;
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <StartTask02+0x7f4>)
 800140c:	2200      	movs	r2, #0
 800140e:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM1->CCR1 = forcemot;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <StartTask02+0x7f4>)
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	635a      	str	r2, [r3, #52]	; 0x34
			  for(comptpas=0; comptpas < o; comptpas++);
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
 800141a:	e002      	b.n	8001422 <StartTask02+0x796>
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	3301      	adds	r3, #1
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
 8001422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	429a      	cmp	r2, r3
 8001428:	dbf8      	blt.n	800141c <StartTask02+0x790>
			  TIM1->CCR1 = forcemot;
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <StartTask02+0x7f4>)
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR4 = forcemot;
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <StartTask02+0x7f4>)
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	641a      	str	r2, [r3, #64]	; 0x40
			  o=o+10;
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	330a      	adds	r3, #10
 800143a:	623b      	str	r3, [r7, #32]
			  for(comptpas=0; comptpas < o; comptpas++);
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
 8001440:	e002      	b.n	8001448 <StartTask02+0x7bc>
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	3301      	adds	r3, #1
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
 8001448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	429a      	cmp	r2, r3
 800144e:	dbf8      	blt.n	8001442 <StartTask02+0x7b6>
		  for(i=0;i<=3 && moteurstart == 2;i++)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	3301      	adds	r3, #1
 8001454:	61fb      	str	r3, [r7, #28]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	2b03      	cmp	r3, #3
 800145a:	dc04      	bgt.n	8001466 <StartTask02+0x7da>
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <StartTask02+0x7f8>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d100      	bne.n	8001466 <StartTask02+0x7da>
 8001464:	e769      	b.n	800133a <StartTask02+0x6ae>
		  }
		  HAL_GPIO_WritePin(GPIOA, Led_pene_mouvement_Pin , GPIO_PIN_RESET);
 8001466:	2390      	movs	r3, #144	; 0x90
 8001468:	05db      	lsls	r3, r3, #23
 800146a:	2200      	movs	r2, #0
 800146c:	2110      	movs	r1, #16
 800146e:	0018      	movs	r0, r3
 8001470:	f000 fbe9 	bl	8001c46 <HAL_GPIO_WritePin>
		  moteurstart = 0;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <StartTask02+0x7f8>)
 8001476:	2200      	movs	r2, #0
 8001478:	801a      	strh	r2, [r3, #0]
		  rentre =1;
 800147a:	2301      	movs	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
	  comptpas = 0;
 800147e:	e418      	b.n	8000cb2 <StartTask02+0x26>
 8001480:	40012c00 	.word	0x40012c00
 8001484:	200002e4 	.word	0x200002e4

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	e7fe      	b.n	8001490 <Error_Handler+0x8>
	...

08001494 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_MspInit+0x50>)
 800149c:	699a      	ldr	r2, [r3, #24]
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_MspInit+0x50>)
 80014a0:	2101      	movs	r1, #1
 80014a2:	430a      	orrs	r2, r1
 80014a4:	619a      	str	r2, [r3, #24]
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_MspInit+0x50>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2201      	movs	r2, #1
 80014ac:	4013      	ands	r3, r2
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <HAL_MspInit+0x50>)
 80014b4:	69da      	ldr	r2, [r3, #28]
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_MspInit+0x50>)
 80014b8:	2180      	movs	r1, #128	; 0x80
 80014ba:	0549      	lsls	r1, r1, #21
 80014bc:	430a      	orrs	r2, r1
 80014be:	61da      	str	r2, [r3, #28]
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_MspInit+0x50>)
 80014c2:	69da      	ldr	r2, [r3, #28]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	055b      	lsls	r3, r3, #21
 80014c8:	4013      	ands	r3, r2
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80014ce:	2302      	movs	r3, #2
 80014d0:	425b      	negs	r3, r3
 80014d2:	2200      	movs	r2, #0
 80014d4:	2103      	movs	r1, #3
 80014d6:	0018      	movs	r0, r3
 80014d8:	f000 fa06 	bl	80018e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b002      	add	sp, #8
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a13      	ldr	r2, [pc, #76]	; (8001544 <HAL_TIM_Base_MspInit+0x5c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d10e      	bne.n	8001518 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_TIM_Base_MspInit+0x60>)
 80014fc:	699a      	ldr	r2, [r3, #24]
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_TIM_Base_MspInit+0x60>)
 8001500:	2180      	movs	r1, #128	; 0x80
 8001502:	0109      	lsls	r1, r1, #4
 8001504:	430a      	orrs	r2, r1
 8001506:	619a      	str	r2, [r3, #24]
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_TIM_Base_MspInit+0x60>)
 800150a:	699a      	ldr	r2, [r3, #24]
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	4013      	ands	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001516:	e010      	b.n	800153a <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM3)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0b      	ldr	r2, [pc, #44]	; (800154c <HAL_TIM_Base_MspInit+0x64>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d10b      	bne.n	800153a <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_TIM_Base_MspInit+0x60>)
 8001524:	69da      	ldr	r2, [r3, #28]
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_TIM_Base_MspInit+0x60>)
 8001528:	2102      	movs	r1, #2
 800152a:	430a      	orrs	r2, r1
 800152c:	61da      	str	r2, [r3, #28]
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_TIM_Base_MspInit+0x60>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b004      	add	sp, #16
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	40012c00 	.word	0x40012c00
 8001548:	40021000 	.word	0x40021000
 800154c:	40000400 	.word	0x40000400

08001550 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b08b      	sub	sp, #44	; 0x2c
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	2414      	movs	r4, #20
 800155a:	193b      	adds	r3, r7, r4
 800155c:	0018      	movs	r0, r3
 800155e:	2314      	movs	r3, #20
 8001560:	001a      	movs	r2, r3
 8001562:	2100      	movs	r1, #0
 8001564:	f003 f914 	bl	8004790 <memset>
  if(htim->Instance==TIM1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a2b      	ldr	r2, [pc, #172]	; (800161c <HAL_TIM_MspPostInit+0xcc>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d126      	bne.n	80015c0 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <HAL_TIM_MspPostInit+0xd0>)
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <HAL_TIM_MspPostInit+0xd0>)
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	0289      	lsls	r1, r1, #10
 800157c:	430a      	orrs	r2, r1
 800157e:	615a      	str	r2, [r3, #20]
 8001580:	4b27      	ldr	r3, [pc, #156]	; (8001620 <HAL_TIM_MspPostInit+0xd0>)
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	029b      	lsls	r3, r3, #10
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = IN2B_Pin|IN1B_Pin|IN2A_Pin|IN1A_Pin;
 800158e:	193b      	adds	r3, r7, r4
 8001590:	22f0      	movs	r2, #240	; 0xf0
 8001592:	0112      	lsls	r2, r2, #4
 8001594:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	0021      	movs	r1, r4
 8001598:	187b      	adds	r3, r7, r1
 800159a:	2202      	movs	r2, #2
 800159c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	2202      	movs	r2, #2
 80015ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	187a      	adds	r2, r7, r1
 80015b2:	2390      	movs	r3, #144	; 0x90
 80015b4:	05db      	lsls	r3, r3, #23
 80015b6:	0011      	movs	r1, r2
 80015b8:	0018      	movs	r0, r3
 80015ba:	f000 f9b7 	bl	800192c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015be:	e028      	b.n	8001612 <HAL_TIM_MspPostInit+0xc2>
  else if(htim->Instance==TIM3)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a17      	ldr	r2, [pc, #92]	; (8001624 <HAL_TIM_MspPostInit+0xd4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d123      	bne.n	8001612 <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_TIM_MspPostInit+0xd0>)
 80015cc:	695a      	ldr	r2, [r3, #20]
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <HAL_TIM_MspPostInit+0xd0>)
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	02c9      	lsls	r1, r1, #11
 80015d4:	430a      	orrs	r2, r1
 80015d6:	615a      	str	r2, [r3, #20]
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_TIM_MspPostInit+0xd0>)
 80015da:	695a      	ldr	r2, [r3, #20]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	02db      	lsls	r3, r3, #11
 80015e0:	4013      	ands	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = F01_OUT_Pin|F02_OUT_Pin|ENB_Pin;
 80015e6:	2114      	movs	r1, #20
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	2213      	movs	r2, #19
 80015ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	2202      	movs	r2, #2
 80015f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001600:	187b      	adds	r3, r7, r1
 8001602:	2201      	movs	r2, #1
 8001604:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	187b      	adds	r3, r7, r1
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <HAL_TIM_MspPostInit+0xd8>)
 800160a:	0019      	movs	r1, r3
 800160c:	0010      	movs	r0, r2
 800160e:	f000 f98d 	bl	800192c <HAL_GPIO_Init>
}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b00b      	add	sp, #44	; 0x2c
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	40012c00 	.word	0x40012c00
 8001620:	40021000 	.word	0x40021000
 8001624:	40000400 	.word	0x40000400
 8001628:	48000400 	.word	0x48000400

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <NMI_Handler+0x4>

08001632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <HardFault_Handler+0x4>

08001638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163c:	f000 f882 	bl	8001744 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001640:	f002 fd2a 	bl	8004098 <xTaskGetSchedulerState>
 8001644:	0003      	movs	r3, r0
 8001646:	2b01      	cmp	r3, #1
 8001648:	d001      	beq.n	800164e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800164a:	f002 fe95 	bl	8004378 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001662:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001664:	f7ff fff6 	bl	8001654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <LoopForever+0x6>)
  ldr r1, =_edata
 800166a:	490d      	ldr	r1, [pc, #52]	; (80016a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <LoopForever+0xe>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001680:	4c0a      	ldr	r4, [pc, #40]	; (80016ac <LoopForever+0x16>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800168e:	f003 f859 	bl	8004744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001692:	f7fe fded 	bl	8000270 <main>

08001696 <LoopForever>:

LoopForever:
    b LoopForever
 8001696:	e7fe      	b.n	8001696 <LoopForever>
  ldr   r0, =_estack
 8001698:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80016a4:	08004a4c 	.word	0x08004a4c
  ldr r2, =_sbss
 80016a8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80016ac:	20000898 	.word	0x20000898

080016b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC1_IRQHandler>
	...

080016b4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <HAL_Init+0x24>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_Init+0x24>)
 80016be:	2110      	movs	r1, #16
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 f809 	bl	80016dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ca:	f7ff fee3 	bl	8001494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	0018      	movs	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	40022000 	.word	0x40022000

080016dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_InitTick+0x5c>)
 80016e6:	681c      	ldr	r4, [r3, #0]
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_InitTick+0x60>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	0019      	movs	r1, r3
 80016ee:	23fa      	movs	r3, #250	; 0xfa
 80016f0:	0098      	lsls	r0, r3, #2
 80016f2:	f7fe fd09 	bl	8000108 <__udivsi3>
 80016f6:	0003      	movs	r3, r0
 80016f8:	0019      	movs	r1, r3
 80016fa:	0020      	movs	r0, r4
 80016fc:	f7fe fd04 	bl	8000108 <__udivsi3>
 8001700:	0003      	movs	r3, r0
 8001702:	0018      	movs	r0, r3
 8001704:	f000 f905 	bl	8001912 <HAL_SYSTICK_Config>
 8001708:	1e03      	subs	r3, r0, #0
 800170a:	d001      	beq.n	8001710 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e00f      	b.n	8001730 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b03      	cmp	r3, #3
 8001714:	d80b      	bhi.n	800172e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	2301      	movs	r3, #1
 800171a:	425b      	negs	r3, r3
 800171c:	2200      	movs	r2, #0
 800171e:	0018      	movs	r0, r3
 8001720:	f000 f8e2 	bl	80018e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_InitTick+0x64>)
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b003      	add	sp, #12
 8001736:	bd90      	pop	{r4, r7, pc}
 8001738:	20000000 	.word	0x20000000
 800173c:	20000008 	.word	0x20000008
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_IncTick+0x1c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	001a      	movs	r2, r3
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_IncTick+0x20>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	18d2      	adds	r2, r2, r3
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_IncTick+0x20>)
 8001756:	601a      	str	r2, [r3, #0]
}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	20000008 	.word	0x20000008
 8001764:	200002e8 	.word	0x200002e8

08001768 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b02      	ldr	r3, [pc, #8]	; (8001778 <HAL_GetTick+0x10>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	0018      	movs	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	200002e8 	.word	0x200002e8

0800177c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff fff0 	bl	8001768 <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3301      	adds	r3, #1
 8001794:	d005      	beq.n	80017a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_Delay+0x44>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	001a      	movs	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	189b      	adds	r3, r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	f7ff ffe0 	bl	8001768 <HAL_GetTick>
 80017a8:	0002      	movs	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8f7      	bhi.n	80017a4 <HAL_Delay+0x28>
  {
  }
}
 80017b4:	46c0      	nop			; (mov r8, r8)
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b004      	add	sp, #16
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	20000008 	.word	0x20000008

080017c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	0002      	movs	r2, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	1dfb      	adds	r3, r7, #7
 80017d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b7f      	cmp	r3, #127	; 0x7f
 80017d8:	d828      	bhi.n	800182c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017da:	4a2f      	ldr	r2, [pc, #188]	; (8001898 <__NVIC_SetPriority+0xd4>)
 80017dc:	1dfb      	adds	r3, r7, #7
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b25b      	sxtb	r3, r3
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	33c0      	adds	r3, #192	; 0xc0
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	589b      	ldr	r3, [r3, r2]
 80017ea:	1dfa      	adds	r2, r7, #7
 80017ec:	7812      	ldrb	r2, [r2, #0]
 80017ee:	0011      	movs	r1, r2
 80017f0:	2203      	movs	r2, #3
 80017f2:	400a      	ands	r2, r1
 80017f4:	00d2      	lsls	r2, r2, #3
 80017f6:	21ff      	movs	r1, #255	; 0xff
 80017f8:	4091      	lsls	r1, r2
 80017fa:	000a      	movs	r2, r1
 80017fc:	43d2      	mvns	r2, r2
 80017fe:	401a      	ands	r2, r3
 8001800:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	019b      	lsls	r3, r3, #6
 8001806:	22ff      	movs	r2, #255	; 0xff
 8001808:	401a      	ands	r2, r3
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	0018      	movs	r0, r3
 8001810:	2303      	movs	r3, #3
 8001812:	4003      	ands	r3, r0
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001818:	481f      	ldr	r0, [pc, #124]	; (8001898 <__NVIC_SetPriority+0xd4>)
 800181a:	1dfb      	adds	r3, r7, #7
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b25b      	sxtb	r3, r3
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	430a      	orrs	r2, r1
 8001824:	33c0      	adds	r3, #192	; 0xc0
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800182a:	e031      	b.n	8001890 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800182c:	4a1b      	ldr	r2, [pc, #108]	; (800189c <__NVIC_SetPriority+0xd8>)
 800182e:	1dfb      	adds	r3, r7, #7
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	0019      	movs	r1, r3
 8001834:	230f      	movs	r3, #15
 8001836:	400b      	ands	r3, r1
 8001838:	3b08      	subs	r3, #8
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3306      	adds	r3, #6
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	18d3      	adds	r3, r2, r3
 8001842:	3304      	adds	r3, #4
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	1dfa      	adds	r2, r7, #7
 8001848:	7812      	ldrb	r2, [r2, #0]
 800184a:	0011      	movs	r1, r2
 800184c:	2203      	movs	r2, #3
 800184e:	400a      	ands	r2, r1
 8001850:	00d2      	lsls	r2, r2, #3
 8001852:	21ff      	movs	r1, #255	; 0xff
 8001854:	4091      	lsls	r1, r2
 8001856:	000a      	movs	r2, r1
 8001858:	43d2      	mvns	r2, r2
 800185a:	401a      	ands	r2, r3
 800185c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	019b      	lsls	r3, r3, #6
 8001862:	22ff      	movs	r2, #255	; 0xff
 8001864:	401a      	ands	r2, r3
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	0018      	movs	r0, r3
 800186c:	2303      	movs	r3, #3
 800186e:	4003      	ands	r3, r0
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001874:	4809      	ldr	r0, [pc, #36]	; (800189c <__NVIC_SetPriority+0xd8>)
 8001876:	1dfb      	adds	r3, r7, #7
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	001c      	movs	r4, r3
 800187c:	230f      	movs	r3, #15
 800187e:	4023      	ands	r3, r4
 8001880:	3b08      	subs	r3, #8
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	430a      	orrs	r2, r1
 8001886:	3306      	adds	r3, #6
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	18c3      	adds	r3, r0, r3
 800188c:	3304      	adds	r3, #4
 800188e:	601a      	str	r2, [r3, #0]
}
 8001890:	46c0      	nop			; (mov r8, r8)
 8001892:	46bd      	mov	sp, r7
 8001894:	b003      	add	sp, #12
 8001896:	bd90      	pop	{r4, r7, pc}
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	1e5a      	subs	r2, r3, #1
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	045b      	lsls	r3, r3, #17
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d301      	bcc.n	80018b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b4:	2301      	movs	r3, #1
 80018b6:	e010      	b.n	80018da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <SysTick_Config+0x44>)
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	3a01      	subs	r2, #1
 80018be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c0:	2301      	movs	r3, #1
 80018c2:	425b      	negs	r3, r3
 80018c4:	2103      	movs	r1, #3
 80018c6:	0018      	movs	r0, r3
 80018c8:	f7ff ff7c 	bl	80017c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SysTick_Config+0x44>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SysTick_Config+0x44>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	0018      	movs	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	b002      	add	sp, #8
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	210f      	movs	r1, #15
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	1c02      	adds	r2, r0, #0
 80018f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b25b      	sxtb	r3, r3
 8001902:	0011      	movs	r1, r2
 8001904:	0018      	movs	r0, r3
 8001906:	f7ff ff5d 	bl	80017c4 <__NVIC_SetPriority>
}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	b004      	add	sp, #16
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	0018      	movs	r0, r3
 800191e:	f7ff ffbf 	bl	80018a0 <SysTick_Config>
 8001922:	0003      	movs	r3, r0
}
 8001924:	0018      	movs	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	b002      	add	sp, #8
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193a:	e14f      	b.n	8001bdc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2101      	movs	r1, #1
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4091      	lsls	r1, r2
 8001946:	000a      	movs	r2, r1
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d100      	bne.n	8001954 <HAL_GPIO_Init+0x28>
 8001952:	e140      	b.n	8001bd6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2203      	movs	r2, #3
 800195a:	4013      	ands	r3, r2
 800195c:	2b01      	cmp	r3, #1
 800195e:	d005      	beq.n	800196c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2203      	movs	r2, #3
 8001966:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001968:	2b02      	cmp	r3, #2
 800196a:	d130      	bne.n	80019ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	409a      	lsls	r2, r3
 800197a:	0013      	movs	r3, r2
 800197c:	43da      	mvns	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	409a      	lsls	r2, r3
 800198e:	0013      	movs	r3, r2
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a2:	2201      	movs	r2, #1
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
 80019a8:	0013      	movs	r3, r2
 80019aa:	43da      	mvns	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	2201      	movs	r2, #1
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	409a      	lsls	r2, r3
 80019c0:	0013      	movs	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2203      	movs	r2, #3
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d017      	beq.n	8001a0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	409a      	lsls	r2, r3
 80019e8:	0013      	movs	r3, r2
 80019ea:	43da      	mvns	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	409a      	lsls	r2, r3
 80019fc:	0013      	movs	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2203      	movs	r2, #3
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d123      	bne.n	8001a5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	08da      	lsrs	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3208      	adds	r2, #8
 8001a1e:	0092      	lsls	r2, r2, #2
 8001a20:	58d3      	ldr	r3, [r2, r3]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2207      	movs	r2, #7
 8001a28:	4013      	ands	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	0013      	movs	r3, r2
 8001a32:	43da      	mvns	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	691a      	ldr	r2, [r3, #16]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2107      	movs	r1, #7
 8001a42:	400b      	ands	r3, r1
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	409a      	lsls	r2, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	08da      	lsrs	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3208      	adds	r2, #8
 8001a58:	0092      	lsls	r2, r2, #2
 8001a5a:	6939      	ldr	r1, [r7, #16]
 8001a5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	2203      	movs	r2, #3
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	409a      	lsls	r2, r3
 8001a84:	0013      	movs	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	23c0      	movs	r3, #192	; 0xc0
 8001a98:	029b      	lsls	r3, r3, #10
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d100      	bne.n	8001aa0 <HAL_GPIO_Init+0x174>
 8001a9e:	e09a      	b.n	8001bd6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa0:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <HAL_GPIO_Init+0x2c8>)
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_GPIO_Init+0x2c8>)
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	619a      	str	r2, [r3, #24]
 8001aac:	4b51      	ldr	r3, [pc, #324]	; (8001bf4 <HAL_GPIO_Init+0x2c8>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ab8:	4a4f      	ldr	r2, [pc, #316]	; (8001bf8 <HAL_GPIO_Init+0x2cc>)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	589b      	ldr	r3, [r3, r2]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2203      	movs	r2, #3
 8001aca:	4013      	ands	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	0013      	movs	r3, r2
 8001ad4:	43da      	mvns	r2, r3
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	2390      	movs	r3, #144	; 0x90
 8001ae0:	05db      	lsls	r3, r3, #23
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d013      	beq.n	8001b0e <HAL_GPIO_Init+0x1e2>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a44      	ldr	r2, [pc, #272]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <HAL_GPIO_Init+0x1de>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a43      	ldr	r2, [pc, #268]	; (8001c00 <HAL_GPIO_Init+0x2d4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_Init+0x1da>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a42      	ldr	r2, [pc, #264]	; (8001c04 <HAL_GPIO_Init+0x2d8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_GPIO_Init+0x1d6>
 8001afe:	2303      	movs	r3, #3
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x1e4>
 8001b02:	2305      	movs	r3, #5
 8001b04:	e004      	b.n	8001b10 <HAL_GPIO_Init+0x1e4>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_Init+0x1e4>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_GPIO_Init+0x1e4>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	2103      	movs	r1, #3
 8001b14:	400a      	ands	r2, r1
 8001b16:	0092      	lsls	r2, r2, #2
 8001b18:	4093      	lsls	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b20:	4935      	ldr	r1, [pc, #212]	; (8001bf8 <HAL_GPIO_Init+0x2cc>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2e:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43da      	mvns	r2, r3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	035b      	lsls	r3, r3, #13
 8001b46:	4013      	ands	r3, r2
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b52:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43da      	mvns	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	039b      	lsls	r3, r3, #14
 8001b70:	4013      	ands	r3, r2
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b7c:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001b82:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	029b      	lsls	r3, r3, #10
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	43da      	mvns	r2, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	025b      	lsls	r3, r3, #9
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_GPIO_Init+0x2dc>)
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	40da      	lsrs	r2, r3
 8001be4:	1e13      	subs	r3, r2, #0
 8001be6:	d000      	beq.n	8001bea <HAL_GPIO_Init+0x2be>
 8001be8:	e6a8      	b.n	800193c <HAL_GPIO_Init+0x10>
  } 
}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b006      	add	sp, #24
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	48000400 	.word	0x48000400
 8001c00:	48000800 	.word	0x48000800
 8001c04:	48000c00 	.word	0x48000c00
 8001c08:	40010400 	.word	0x40010400

08001c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	000a      	movs	r2, r1
 8001c16:	1cbb      	adds	r3, r7, #2
 8001c18:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	1cba      	adds	r2, r7, #2
 8001c20:	8812      	ldrh	r2, [r2, #0]
 8001c22:	4013      	ands	r3, r2
 8001c24:	d004      	beq.n	8001c30 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001c26:	230f      	movs	r3, #15
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	e003      	b.n	8001c38 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c30:	230f      	movs	r3, #15
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001c38:	230f      	movs	r3, #15
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	781b      	ldrb	r3, [r3, #0]
  }
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b004      	add	sp, #16
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	0008      	movs	r0, r1
 8001c50:	0011      	movs	r1, r2
 8001c52:	1cbb      	adds	r3, r7, #2
 8001c54:	1c02      	adds	r2, r0, #0
 8001c56:	801a      	strh	r2, [r3, #0]
 8001c58:	1c7b      	adds	r3, r7, #1
 8001c5a:	1c0a      	adds	r2, r1, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c5e:	1c7b      	adds	r3, r7, #1
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c66:	1cbb      	adds	r3, r7, #2
 8001c68:	881a      	ldrh	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c6e:	e003      	b.n	8001c78 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c70:	1cbb      	adds	r3, r7, #2
 8001c72:	881a      	ldrh	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c78:	46c0      	nop			; (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b002      	add	sp, #8
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e301      	b.n	8002296 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d100      	bne.n	8001c9e <HAL_RCC_OscConfig+0x1e>
 8001c9c:	e08d      	b.n	8001dba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c9e:	4bc3      	ldr	r3, [pc, #780]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d00e      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001caa:	4bc0      	ldr	r3, [pc, #768]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	220c      	movs	r2, #12
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d116      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x64>
 8001cb6:	4bbd      	ldr	r3, [pc, #756]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	025b      	lsls	r3, r3, #9
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	025b      	lsls	r3, r3, #9
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d10d      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	4bb8      	ldr	r3, [pc, #736]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	029b      	lsls	r3, r3, #10
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d100      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x56>
 8001cd4:	e070      	b.n	8001db8 <HAL_RCC_OscConfig+0x138>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d000      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x60>
 8001cde:	e06b      	b.n	8001db8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e2d8      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d107      	bne.n	8001cfc <HAL_RCC_OscConfig+0x7c>
 8001cec:	4baf      	ldr	r3, [pc, #700]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4bae      	ldr	r3, [pc, #696]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cf2:	2180      	movs	r1, #128	; 0x80
 8001cf4:	0249      	lsls	r1, r1, #9
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e02f      	b.n	8001d5c <HAL_RCC_OscConfig+0xdc>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10c      	bne.n	8001d1e <HAL_RCC_OscConfig+0x9e>
 8001d04:	4ba9      	ldr	r3, [pc, #676]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4ba8      	ldr	r3, [pc, #672]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d0a:	49a9      	ldr	r1, [pc, #676]	; (8001fb0 <HAL_RCC_OscConfig+0x330>)
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	4ba6      	ldr	r3, [pc, #664]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4ba5      	ldr	r3, [pc, #660]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d16:	49a7      	ldr	r1, [pc, #668]	; (8001fb4 <HAL_RCC_OscConfig+0x334>)
 8001d18:	400a      	ands	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e01e      	b.n	8001d5c <HAL_RCC_OscConfig+0xdc>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	d10e      	bne.n	8001d44 <HAL_RCC_OscConfig+0xc4>
 8001d26:	4ba1      	ldr	r3, [pc, #644]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4ba0      	ldr	r3, [pc, #640]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	02c9      	lsls	r1, r1, #11
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	4b9d      	ldr	r3, [pc, #628]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b9c      	ldr	r3, [pc, #624]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	0249      	lsls	r1, r1, #9
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0xdc>
 8001d44:	4b99      	ldr	r3, [pc, #612]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b98      	ldr	r3, [pc, #608]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d4a:	4999      	ldr	r1, [pc, #612]	; (8001fb0 <HAL_RCC_OscConfig+0x330>)
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	4b96      	ldr	r3, [pc, #600]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b95      	ldr	r3, [pc, #596]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d56:	4997      	ldr	r1, [pc, #604]	; (8001fb4 <HAL_RCC_OscConfig+0x334>)
 8001d58:	400a      	ands	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d014      	beq.n	8001d8e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fd00 	bl	8001768 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d6e:	f7ff fcfb 	bl	8001768 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b64      	cmp	r3, #100	; 0x64
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e28a      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d80:	4b8a      	ldr	r3, [pc, #552]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	029b      	lsls	r3, r3, #10
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0xee>
 8001d8c:	e015      	b.n	8001dba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7ff fceb 	bl	8001768 <HAL_GetTick>
 8001d92:	0003      	movs	r3, r0
 8001d94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fce6 	bl	8001768 <HAL_GetTick>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e275      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001daa:	4b80      	ldr	r3, [pc, #512]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	029b      	lsls	r3, r3, #10
 8001db2:	4013      	ands	r3, r2
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x118>
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d100      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x146>
 8001dc4:	e069      	b.n	8001e9a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dc6:	4b79      	ldr	r3, [pc, #484]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	220c      	movs	r2, #12
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d00b      	beq.n	8001de8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dd0:	4b76      	ldr	r3, [pc, #472]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d11c      	bne.n	8001e16 <HAL_RCC_OscConfig+0x196>
 8001ddc:	4b73      	ldr	r3, [pc, #460]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	025b      	lsls	r3, r3, #9
 8001de4:	4013      	ands	r3, r2
 8001de6:	d116      	bne.n	8001e16 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de8:	4b70      	ldr	r3, [pc, #448]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2202      	movs	r2, #2
 8001dee:	4013      	ands	r3, r2
 8001df0:	d005      	beq.n	8001dfe <HAL_RCC_OscConfig+0x17e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e24b      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfe:	4b6b      	ldr	r3, [pc, #428]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	22f8      	movs	r2, #248	; 0xf8
 8001e04:	4393      	bics	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	00da      	lsls	r2, r3, #3
 8001e0e:	4b67      	ldr	r3, [pc, #412]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e10:	430a      	orrs	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e14:	e041      	b.n	8001e9a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d024      	beq.n	8001e68 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e1e:	4b63      	ldr	r3, [pc, #396]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4b62      	ldr	r3, [pc, #392]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e24:	2101      	movs	r1, #1
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fc9d 	bl	8001768 <HAL_GetTick>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e34:	f7ff fc98 	bl	8001768 <HAL_GetTick>
 8001e38:	0002      	movs	r2, r0
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e227      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e46:	4b59      	ldr	r3, [pc, #356]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d0f1      	beq.n	8001e34 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e50:	4b56      	ldr	r3, [pc, #344]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	22f8      	movs	r2, #248	; 0xf8
 8001e56:	4393      	bics	r3, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00da      	lsls	r2, r3, #3
 8001e60:	4b52      	ldr	r3, [pc, #328]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e62:	430a      	orrs	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	e018      	b.n	8001e9a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e68:	4b50      	ldr	r3, [pc, #320]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b4f      	ldr	r3, [pc, #316]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	438a      	bics	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7ff fc78 	bl	8001768 <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e7e:	f7ff fc73 	bl	8001768 <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e202      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e90:	4b46      	ldr	r3, [pc, #280]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2202      	movs	r2, #2
 8001e96:	4013      	ands	r3, r2
 8001e98:	d1f1      	bne.n	8001e7e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2208      	movs	r2, #8
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d036      	beq.n	8001f12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d019      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eac:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb0:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb8:	f7ff fc56 	bl	8001768 <HAL_GetTick>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec2:	f7ff fc51 	bl	8001768 <HAL_GetTick>
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e1e0      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed4:	4b35      	ldr	r3, [pc, #212]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	2202      	movs	r2, #2
 8001eda:	4013      	ands	r3, r2
 8001edc:	d0f1      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x242>
 8001ede:	e018      	b.n	8001f12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee0:	4b32      	ldr	r3, [pc, #200]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ee4:	4b31      	ldr	r3, [pc, #196]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	438a      	bics	r2, r1
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eec:	f7ff fc3c 	bl	8001768 <HAL_GetTick>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef6:	f7ff fc37 	bl	8001768 <HAL_GetTick>
 8001efa:	0002      	movs	r2, r0
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e1c6      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f08:	4b28      	ldr	r3, [pc, #160]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d1f1      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2204      	movs	r2, #4
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d100      	bne.n	8001f1e <HAL_RCC_OscConfig+0x29e>
 8001f1c:	e0b4      	b.n	8002088 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1e:	201f      	movs	r0, #31
 8001f20:	183b      	adds	r3, r7, r0
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f26:	4b21      	ldr	r3, [pc, #132]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f28:	69da      	ldr	r2, [r3, #28]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	055b      	lsls	r3, r3, #21
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d110      	bne.n	8001f54 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f34:	69da      	ldr	r2, [r3, #28]
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	0549      	lsls	r1, r1, #21
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	61da      	str	r2, [r3, #28]
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	055b      	lsls	r3, r3, #21
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f4e:	183b      	adds	r3, r7, r0
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f54:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_RCC_OscConfig+0x338>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d11a      	bne.n	8001f96 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f60:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_RCC_OscConfig+0x338>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_RCC_OscConfig+0x338>)
 8001f66:	2180      	movs	r1, #128	; 0x80
 8001f68:	0049      	lsls	r1, r1, #1
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fbfb 	bl	8001768 <HAL_GetTick>
 8001f72:	0003      	movs	r3, r0
 8001f74:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f78:	f7ff fbf6 	bl	8001768 <HAL_GetTick>
 8001f7c:	0002      	movs	r2, r0
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e185      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_RCC_OscConfig+0x338>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4013      	ands	r3, r2
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d10e      	bne.n	8001fbc <HAL_RCC_OscConfig+0x33c>
 8001f9e:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001fa0:	6a1a      	ldr	r2, [r3, #32]
 8001fa2:	4b02      	ldr	r3, [pc, #8]	; (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	621a      	str	r2, [r3, #32]
 8001faa:	e035      	b.n	8002018 <HAL_RCC_OscConfig+0x398>
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	fffeffff 	.word	0xfffeffff
 8001fb4:	fffbffff 	.word	0xfffbffff
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10c      	bne.n	8001fde <HAL_RCC_OscConfig+0x35e>
 8001fc4:	4bb6      	ldr	r3, [pc, #728]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8001fc6:	6a1a      	ldr	r2, [r3, #32]
 8001fc8:	4bb5      	ldr	r3, [pc, #724]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8001fca:	2101      	movs	r1, #1
 8001fcc:	438a      	bics	r2, r1
 8001fce:	621a      	str	r2, [r3, #32]
 8001fd0:	4bb3      	ldr	r3, [pc, #716]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8001fd2:	6a1a      	ldr	r2, [r3, #32]
 8001fd4:	4bb2      	ldr	r3, [pc, #712]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8001fd6:	2104      	movs	r1, #4
 8001fd8:	438a      	bics	r2, r1
 8001fda:	621a      	str	r2, [r3, #32]
 8001fdc:	e01c      	b.n	8002018 <HAL_RCC_OscConfig+0x398>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x380>
 8001fe6:	4bae      	ldr	r3, [pc, #696]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8001fe8:	6a1a      	ldr	r2, [r3, #32]
 8001fea:	4bad      	ldr	r3, [pc, #692]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8001fec:	2104      	movs	r1, #4
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	621a      	str	r2, [r3, #32]
 8001ff2:	4bab      	ldr	r3, [pc, #684]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8001ff4:	6a1a      	ldr	r2, [r3, #32]
 8001ff6:	4baa      	ldr	r3, [pc, #680]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	621a      	str	r2, [r3, #32]
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0x398>
 8002000:	4ba7      	ldr	r3, [pc, #668]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002002:	6a1a      	ldr	r2, [r3, #32]
 8002004:	4ba6      	ldr	r3, [pc, #664]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002006:	2101      	movs	r1, #1
 8002008:	438a      	bics	r2, r1
 800200a:	621a      	str	r2, [r3, #32]
 800200c:	4ba4      	ldr	r3, [pc, #656]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800200e:	6a1a      	ldr	r2, [r3, #32]
 8002010:	4ba3      	ldr	r3, [pc, #652]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002012:	2104      	movs	r1, #4
 8002014:	438a      	bics	r2, r1
 8002016:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d014      	beq.n	800204a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002020:	f7ff fba2 	bl	8001768 <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	e009      	b.n	800203e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7ff fb9d 	bl	8001768 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	4a9b      	ldr	r2, [pc, #620]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e12b      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203e:	4b98      	ldr	r3, [pc, #608]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	2202      	movs	r2, #2
 8002044:	4013      	ands	r3, r2
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x3aa>
 8002048:	e013      	b.n	8002072 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204a:	f7ff fb8d 	bl	8001768 <HAL_GetTick>
 800204e:	0003      	movs	r3, r0
 8002050:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002052:	e009      	b.n	8002068 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f7ff fb88 	bl	8001768 <HAL_GetTick>
 8002058:	0002      	movs	r2, r0
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	4a91      	ldr	r2, [pc, #580]	; (80022a4 <HAL_RCC_OscConfig+0x624>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e116      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002068:	4b8d      	ldr	r3, [pc, #564]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	2202      	movs	r2, #2
 800206e:	4013      	ands	r3, r2
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002072:	231f      	movs	r3, #31
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d105      	bne.n	8002088 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207c:	4b88      	ldr	r3, [pc, #544]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800207e:	69da      	ldr	r2, [r3, #28]
 8002080:	4b87      	ldr	r3, [pc, #540]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002082:	4989      	ldr	r1, [pc, #548]	; (80022a8 <HAL_RCC_OscConfig+0x628>)
 8002084:	400a      	ands	r2, r1
 8002086:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2210      	movs	r2, #16
 800208e:	4013      	ands	r3, r2
 8002090:	d063      	beq.n	800215a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d12a      	bne.n	80020f0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800209a:	4b81      	ldr	r3, [pc, #516]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800209c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800209e:	4b80      	ldr	r3, [pc, #512]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80020a0:	2104      	movs	r1, #4
 80020a2:	430a      	orrs	r2, r1
 80020a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80020a6:	4b7e      	ldr	r3, [pc, #504]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80020a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020aa:	4b7d      	ldr	r3, [pc, #500]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80020ac:	2101      	movs	r1, #1
 80020ae:	430a      	orrs	r2, r1
 80020b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b2:	f7ff fb59 	bl	8001768 <HAL_GetTick>
 80020b6:	0003      	movs	r3, r0
 80020b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020bc:	f7ff fb54 	bl	8001768 <HAL_GetTick>
 80020c0:	0002      	movs	r2, r0
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0e3      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020ce:	4b74      	ldr	r3, [pc, #464]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80020d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d2:	2202      	movs	r2, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	d0f1      	beq.n	80020bc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020d8:	4b71      	ldr	r3, [pc, #452]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80020da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020dc:	22f8      	movs	r2, #248	; 0xf8
 80020de:	4393      	bics	r3, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	00da      	lsls	r2, r3, #3
 80020e8:	4b6d      	ldr	r3, [pc, #436]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80020ea:	430a      	orrs	r2, r1
 80020ec:	635a      	str	r2, [r3, #52]	; 0x34
 80020ee:	e034      	b.n	800215a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	3305      	adds	r3, #5
 80020f6:	d111      	bne.n	800211c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020f8:	4b69      	ldr	r3, [pc, #420]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80020fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020fc:	4b68      	ldr	r3, [pc, #416]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80020fe:	2104      	movs	r1, #4
 8002100:	438a      	bics	r2, r1
 8002102:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002104:	4b66      	ldr	r3, [pc, #408]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002108:	22f8      	movs	r2, #248	; 0xf8
 800210a:	4393      	bics	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	00da      	lsls	r2, r3, #3
 8002114:	4b62      	ldr	r3, [pc, #392]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002116:	430a      	orrs	r2, r1
 8002118:	635a      	str	r2, [r3, #52]	; 0x34
 800211a:	e01e      	b.n	800215a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800211c:	4b60      	ldr	r3, [pc, #384]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800211e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002120:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002122:	2104      	movs	r1, #4
 8002124:	430a      	orrs	r2, r1
 8002126:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002128:	4b5d      	ldr	r3, [pc, #372]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800212a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800212c:	4b5c      	ldr	r3, [pc, #368]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800212e:	2101      	movs	r1, #1
 8002130:	438a      	bics	r2, r1
 8002132:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002134:	f7ff fb18 	bl	8001768 <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800213e:	f7ff fb13 	bl	8001768 <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e0a2      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002150:	4b53      	ldr	r3, [pc, #332]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002154:	2202      	movs	r2, #2
 8002156:	4013      	ands	r3, r2
 8002158:	d1f1      	bne.n	800213e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d100      	bne.n	8002164 <HAL_RCC_OscConfig+0x4e4>
 8002162:	e097      	b.n	8002294 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002164:	4b4e      	ldr	r3, [pc, #312]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	220c      	movs	r2, #12
 800216a:	4013      	ands	r3, r2
 800216c:	2b08      	cmp	r3, #8
 800216e:	d100      	bne.n	8002172 <HAL_RCC_OscConfig+0x4f2>
 8002170:	e06b      	b.n	800224a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d14c      	bne.n	8002214 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	4b49      	ldr	r3, [pc, #292]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b48      	ldr	r3, [pc, #288]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002180:	494a      	ldr	r1, [pc, #296]	; (80022ac <HAL_RCC_OscConfig+0x62c>)
 8002182:	400a      	ands	r2, r1
 8002184:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7ff faef 	bl	8001768 <HAL_GetTick>
 800218a:	0003      	movs	r3, r0
 800218c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002190:	f7ff faea 	bl	8001768 <HAL_GetTick>
 8002194:	0002      	movs	r2, r0
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e079      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a2:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	049b      	lsls	r3, r3, #18
 80021aa:	4013      	ands	r3, r2
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ae:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	220f      	movs	r2, #15
 80021b4:	4393      	bics	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021bc:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80021be:	430a      	orrs	r2, r1
 80021c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4a3a      	ldr	r2, [pc, #232]	; (80022b0 <HAL_RCC_OscConfig+0x630>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	431a      	orrs	r2, r3
 80021d6:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80021d8:	430a      	orrs	r2, r1
 80021da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021dc:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	0449      	lsls	r1, r1, #17
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff fabd 	bl	8001768 <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f4:	f7ff fab8 	bl	8001768 <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e047      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	049b      	lsls	r3, r3, #18
 800220e:	4013      	ands	r3, r2
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x574>
 8002212:	e03f      	b.n	8002294 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002214:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800221a:	4924      	ldr	r1, [pc, #144]	; (80022ac <HAL_RCC_OscConfig+0x62c>)
 800221c:	400a      	ands	r2, r1
 800221e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff faa2 	bl	8001768 <HAL_GetTick>
 8002224:	0003      	movs	r3, r0
 8002226:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222a:	f7ff fa9d 	bl	8001768 <HAL_GetTick>
 800222e:	0002      	movs	r2, r0
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e02c      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	049b      	lsls	r3, r3, #18
 8002244:	4013      	ands	r3, r2
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x5aa>
 8002248:	e024      	b.n	8002294 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e01f      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_OscConfig+0x620>)
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	025b      	lsls	r3, r3, #9
 8002268:	401a      	ands	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	429a      	cmp	r2, r3
 8002270:	d10e      	bne.n	8002290 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	220f      	movs	r2, #15
 8002276:	401a      	ands	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d107      	bne.n	8002290 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	23f0      	movs	r3, #240	; 0xf0
 8002284:	039b      	lsls	r3, r3, #14
 8002286:	401a      	ands	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	0018      	movs	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	b008      	add	sp, #32
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	40021000 	.word	0x40021000
 80022a4:	00001388 	.word	0x00001388
 80022a8:	efffffff 	.word	0xefffffff
 80022ac:	feffffff 	.word	0xfeffffff
 80022b0:	ffc2ffff 	.word	0xffc2ffff

080022b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0b3      	b.n	8002430 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4b5b      	ldr	r3, [pc, #364]	; (8002438 <HAL_RCC_ClockConfig+0x184>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2201      	movs	r2, #1
 80022ce:	4013      	ands	r3, r2
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d911      	bls.n	80022fa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b58      	ldr	r3, [pc, #352]	; (8002438 <HAL_RCC_ClockConfig+0x184>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2201      	movs	r2, #1
 80022dc:	4393      	bics	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	4b55      	ldr	r3, [pc, #340]	; (8002438 <HAL_RCC_ClockConfig+0x184>)
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e8:	4b53      	ldr	r3, [pc, #332]	; (8002438 <HAL_RCC_ClockConfig+0x184>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2201      	movs	r2, #1
 80022ee:	4013      	ands	r3, r2
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e09a      	b.n	8002430 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2202      	movs	r2, #2
 8002300:	4013      	ands	r3, r2
 8002302:	d015      	beq.n	8002330 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2204      	movs	r2, #4
 800230a:	4013      	ands	r3, r2
 800230c:	d006      	beq.n	800231c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800230e:	4b4b      	ldr	r3, [pc, #300]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4b4a      	ldr	r3, [pc, #296]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 8002314:	21e0      	movs	r1, #224	; 0xe0
 8002316:	00c9      	lsls	r1, r1, #3
 8002318:	430a      	orrs	r2, r1
 800231a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231c:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	22f0      	movs	r2, #240	; 0xf0
 8002322:	4393      	bics	r3, r2
 8002324:	0019      	movs	r1, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	4b44      	ldr	r3, [pc, #272]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 800232c:	430a      	orrs	r2, r1
 800232e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2201      	movs	r2, #1
 8002336:	4013      	ands	r3, r2
 8002338:	d040      	beq.n	80023bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	4b3e      	ldr	r3, [pc, #248]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	029b      	lsls	r3, r3, #10
 800234a:	4013      	ands	r3, r2
 800234c:	d114      	bne.n	8002378 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e06e      	b.n	8002430 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235a:	4b38      	ldr	r3, [pc, #224]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	049b      	lsls	r3, r3, #18
 8002362:	4013      	ands	r3, r2
 8002364:	d108      	bne.n	8002378 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e062      	b.n	8002430 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236a:	4b34      	ldr	r3, [pc, #208]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2202      	movs	r2, #2
 8002370:	4013      	ands	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e05b      	b.n	8002430 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002378:	4b30      	ldr	r3, [pc, #192]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2203      	movs	r2, #3
 800237e:	4393      	bics	r3, r2
 8002380:	0019      	movs	r1, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 8002388:	430a      	orrs	r2, r1
 800238a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800238c:	f7ff f9ec 	bl	8001768 <HAL_GetTick>
 8002390:	0003      	movs	r3, r0
 8002392:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002394:	e009      	b.n	80023aa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002396:	f7ff f9e7 	bl	8001768 <HAL_GetTick>
 800239a:	0002      	movs	r2, r0
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	4a27      	ldr	r2, [pc, #156]	; (8002440 <HAL_RCC_ClockConfig+0x18c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e042      	b.n	8002430 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	220c      	movs	r2, #12
 80023b0:	401a      	ands	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d1ec      	bne.n	8002396 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_RCC_ClockConfig+0x184>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2201      	movs	r2, #1
 80023c2:	4013      	ands	r3, r2
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d211      	bcs.n	80023ee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_RCC_ClockConfig+0x184>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2201      	movs	r2, #1
 80023d0:	4393      	bics	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_RCC_ClockConfig+0x184>)
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023dc:	4b16      	ldr	r3, [pc, #88]	; (8002438 <HAL_RCC_ClockConfig+0x184>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e020      	b.n	8002430 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2204      	movs	r2, #4
 80023f4:	4013      	ands	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a11      	ldr	r2, [pc, #68]	; (8002444 <HAL_RCC_ClockConfig+0x190>)
 80023fe:	4013      	ands	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 8002408:	430a      	orrs	r2, r1
 800240a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800240c:	f000 f820 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 8002410:	0001      	movs	r1, r0
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_RCC_ClockConfig+0x188>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	220f      	movs	r2, #15
 800241a:	4013      	ands	r3, r2
 800241c:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <HAL_RCC_ClockConfig+0x194>)
 800241e:	5cd3      	ldrb	r3, [r2, r3]
 8002420:	000a      	movs	r2, r1
 8002422:	40da      	lsrs	r2, r3
 8002424:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_RCC_ClockConfig+0x198>)
 8002426:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002428:	2003      	movs	r0, #3
 800242a:	f7ff f957 	bl	80016dc <HAL_InitTick>
  
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b004      	add	sp, #16
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40022000 	.word	0x40022000
 800243c:	40021000 	.word	0x40021000
 8002440:	00001388 	.word	0x00001388
 8002444:	fffff8ff 	.word	0xfffff8ff
 8002448:	080049b4 	.word	0x080049b4
 800244c:	20000000 	.word	0x20000000

08002450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <HAL_RCC_GetSysClockFreq+0x9c>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	220c      	movs	r2, #12
 8002474:	4013      	ands	r3, r2
 8002476:	2b04      	cmp	r3, #4
 8002478:	d002      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x30>
 800247a:	2b08      	cmp	r3, #8
 800247c:	d003      	beq.n	8002486 <HAL_RCC_GetSysClockFreq+0x36>
 800247e:	e02c      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002482:	613b      	str	r3, [r7, #16]
      break;
 8002484:	e02c      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	0c9b      	lsrs	r3, r3, #18
 800248a:	220f      	movs	r2, #15
 800248c:	4013      	ands	r3, r2
 800248e:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002490:	5cd3      	ldrb	r3, [r2, r3]
 8002492:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	220f      	movs	r2, #15
 800249a:	4013      	ands	r3, r2
 800249c:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800249e:	5cd3      	ldrb	r3, [r2, r3]
 80024a0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	025b      	lsls	r3, r3, #9
 80024a8:	4013      	ands	r3, r2
 80024aa:	d009      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	4810      	ldr	r0, [pc, #64]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024b0:	f7fd fe2a 	bl	8000108 <__udivsi3>
 80024b4:	0003      	movs	r3, r0
 80024b6:	001a      	movs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4353      	muls	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	e009      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	000a      	movs	r2, r1
 80024c4:	0152      	lsls	r2, r2, #5
 80024c6:	1a52      	subs	r2, r2, r1
 80024c8:	0193      	lsls	r3, r2, #6
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	185b      	adds	r3, r3, r1
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	613b      	str	r3, [r7, #16]
      break;
 80024d8:	e002      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024dc:	613b      	str	r3, [r7, #16]
      break;
 80024de:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024e0:	693b      	ldr	r3, [r7, #16]
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b006      	add	sp, #24
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	40021000 	.word	0x40021000
 80024f0:	007a1200 	.word	0x007a1200
 80024f4:	080049c4 	.word	0x080049c4
 80024f8:	080049d4 	.word	0x080049d4

080024fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e042      	b.n	8002594 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	223d      	movs	r2, #61	; 0x3d
 8002512:	5c9b      	ldrb	r3, [r3, r2]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d107      	bne.n	800252a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	223c      	movs	r2, #60	; 0x3c
 800251e:	2100      	movs	r1, #0
 8002520:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	0018      	movs	r0, r3
 8002526:	f7fe ffdf 	bl	80014e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	223d      	movs	r2, #61	; 0x3d
 800252e:	2102      	movs	r1, #2
 8002530:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3304      	adds	r3, #4
 800253a:	0019      	movs	r1, r3
 800253c:	0010      	movs	r0, r2
 800253e:	f000 fac5 	bl	8002acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2246      	movs	r2, #70	; 0x46
 8002546:	2101      	movs	r1, #1
 8002548:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	223e      	movs	r2, #62	; 0x3e
 800254e:	2101      	movs	r1, #1
 8002550:	5499      	strb	r1, [r3, r2]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	223f      	movs	r2, #63	; 0x3f
 8002556:	2101      	movs	r1, #1
 8002558:	5499      	strb	r1, [r3, r2]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2240      	movs	r2, #64	; 0x40
 800255e:	2101      	movs	r1, #1
 8002560:	5499      	strb	r1, [r3, r2]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2241      	movs	r2, #65	; 0x41
 8002566:	2101      	movs	r1, #1
 8002568:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2242      	movs	r2, #66	; 0x42
 800256e:	2101      	movs	r1, #1
 8002570:	5499      	strb	r1, [r3, r2]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2243      	movs	r2, #67	; 0x43
 8002576:	2101      	movs	r1, #1
 8002578:	5499      	strb	r1, [r3, r2]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2244      	movs	r2, #68	; 0x44
 800257e:	2101      	movs	r1, #1
 8002580:	5499      	strb	r1, [r3, r2]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2245      	movs	r2, #69	; 0x45
 8002586:	2101      	movs	r1, #1
 8002588:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	223d      	movs	r2, #61	; 0x3d
 800258e:	2101      	movs	r1, #1
 8002590:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	b002      	add	sp, #8
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e042      	b.n	8002634 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	223d      	movs	r2, #61	; 0x3d
 80025b2:	5c9b      	ldrb	r3, [r3, r2]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d107      	bne.n	80025ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	223c      	movs	r2, #60	; 0x3c
 80025be:	2100      	movs	r1, #0
 80025c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f000 f839 	bl	800263c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	223d      	movs	r2, #61	; 0x3d
 80025ce:	2102      	movs	r1, #2
 80025d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3304      	adds	r3, #4
 80025da:	0019      	movs	r1, r3
 80025dc:	0010      	movs	r0, r2
 80025de:	f000 fa75 	bl	8002acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2246      	movs	r2, #70	; 0x46
 80025e6:	2101      	movs	r1, #1
 80025e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	223e      	movs	r2, #62	; 0x3e
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	223f      	movs	r2, #63	; 0x3f
 80025f6:	2101      	movs	r1, #1
 80025f8:	5499      	strb	r1, [r3, r2]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2240      	movs	r2, #64	; 0x40
 80025fe:	2101      	movs	r1, #1
 8002600:	5499      	strb	r1, [r3, r2]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2241      	movs	r2, #65	; 0x41
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2242      	movs	r2, #66	; 0x42
 800260e:	2101      	movs	r1, #1
 8002610:	5499      	strb	r1, [r3, r2]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2243      	movs	r2, #67	; 0x43
 8002616:	2101      	movs	r1, #1
 8002618:	5499      	strb	r1, [r3, r2]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2244      	movs	r2, #68	; 0x44
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2245      	movs	r2, #69	; 0x45
 8002626:	2101      	movs	r1, #1
 8002628:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	223d      	movs	r2, #61	; 0x3d
 800262e:	2101      	movs	r1, #1
 8002630:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	0018      	movs	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002644:	46c0      	nop			; (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	b002      	add	sp, #8
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d108      	bne.n	800266e <HAL_TIM_PWM_Start+0x22>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	223e      	movs	r2, #62	; 0x3e
 8002660:	5c9b      	ldrb	r3, [r3, r2]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	4193      	sbcs	r3, r2
 800266a:	b2db      	uxtb	r3, r3
 800266c:	e01f      	b.n	80026ae <HAL_TIM_PWM_Start+0x62>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d108      	bne.n	8002686 <HAL_TIM_PWM_Start+0x3a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	223f      	movs	r2, #63	; 0x3f
 8002678:	5c9b      	ldrb	r3, [r3, r2]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	1e5a      	subs	r2, r3, #1
 8002680:	4193      	sbcs	r3, r2
 8002682:	b2db      	uxtb	r3, r3
 8002684:	e013      	b.n	80026ae <HAL_TIM_PWM_Start+0x62>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d108      	bne.n	800269e <HAL_TIM_PWM_Start+0x52>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2240      	movs	r2, #64	; 0x40
 8002690:	5c9b      	ldrb	r3, [r3, r2]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	1e5a      	subs	r2, r3, #1
 8002698:	4193      	sbcs	r3, r2
 800269a:	b2db      	uxtb	r3, r3
 800269c:	e007      	b.n	80026ae <HAL_TIM_PWM_Start+0x62>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2241      	movs	r2, #65	; 0x41
 80026a2:	5c9b      	ldrb	r3, [r3, r2]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	1e5a      	subs	r2, r3, #1
 80026aa:	4193      	sbcs	r3, r2
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e064      	b.n	8002780 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <HAL_TIM_PWM_Start+0x7a>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	223e      	movs	r2, #62	; 0x3e
 80026c0:	2102      	movs	r1, #2
 80026c2:	5499      	strb	r1, [r3, r2]
 80026c4:	e013      	b.n	80026ee <HAL_TIM_PWM_Start+0xa2>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d104      	bne.n	80026d6 <HAL_TIM_PWM_Start+0x8a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	223f      	movs	r2, #63	; 0x3f
 80026d0:	2102      	movs	r1, #2
 80026d2:	5499      	strb	r1, [r3, r2]
 80026d4:	e00b      	b.n	80026ee <HAL_TIM_PWM_Start+0xa2>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d104      	bne.n	80026e6 <HAL_TIM_PWM_Start+0x9a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2240      	movs	r2, #64	; 0x40
 80026e0:	2102      	movs	r1, #2
 80026e2:	5499      	strb	r1, [r3, r2]
 80026e4:	e003      	b.n	80026ee <HAL_TIM_PWM_Start+0xa2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2241      	movs	r2, #65	; 0x41
 80026ea:	2102      	movs	r1, #2
 80026ec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6839      	ldr	r1, [r7, #0]
 80026f4:	2201      	movs	r2, #1
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 fcce 	bl	8003098 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a21      	ldr	r2, [pc, #132]	; (8002788 <HAL_TIM_PWM_Start+0x13c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d009      	beq.n	800271a <HAL_TIM_PWM_Start+0xce>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a20      	ldr	r2, [pc, #128]	; (800278c <HAL_TIM_PWM_Start+0x140>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d004      	beq.n	800271a <HAL_TIM_PWM_Start+0xce>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1e      	ldr	r2, [pc, #120]	; (8002790 <HAL_TIM_PWM_Start+0x144>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d101      	bne.n	800271e <HAL_TIM_PWM_Start+0xd2>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_TIM_PWM_Start+0xd4>
 800271e:	2300      	movs	r3, #0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2180      	movs	r1, #128	; 0x80
 8002730:	0209      	lsls	r1, r1, #8
 8002732:	430a      	orrs	r2, r1
 8002734:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a13      	ldr	r2, [pc, #76]	; (8002788 <HAL_TIM_PWM_Start+0x13c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d004      	beq.n	800274a <HAL_TIM_PWM_Start+0xfe>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a13      	ldr	r2, [pc, #76]	; (8002794 <HAL_TIM_PWM_Start+0x148>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d111      	bne.n	800276e <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2207      	movs	r2, #7
 8002752:	4013      	ands	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b06      	cmp	r3, #6
 800275a:	d010      	beq.n	800277e <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2101      	movs	r1, #1
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276c:	e007      	b.n	800277e <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	430a      	orrs	r2, r1
 800277c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	b004      	add	sp, #16
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40014400 	.word	0x40014400
 8002790:	40014800 	.word	0x40014800
 8002794:	40000400 	.word	0x40000400

08002798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a4:	2317      	movs	r3, #23
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	223c      	movs	r2, #60	; 0x3c
 80027b0:	5c9b      	ldrb	r3, [r3, r2]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_PWM_ConfigChannel+0x22>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e0ad      	b.n	8002916 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	223c      	movs	r2, #60	; 0x3c
 80027be:	2101      	movs	r1, #1
 80027c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	d100      	bne.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x32>
 80027c8:	e076      	b.n	80028b8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	d900      	bls.n	80027d2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80027d0:	e095      	b.n	80028fe <HAL_TIM_PWM_ConfigChannel+0x166>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d04e      	beq.n	8002876 <HAL_TIM_PWM_ConfigChannel+0xde>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d900      	bls.n	80027e0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80027de:	e08e      	b.n	80028fe <HAL_TIM_PWM_ConfigChannel+0x166>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_TIM_PWM_ConfigChannel+0x56>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d021      	beq.n	8002830 <HAL_TIM_PWM_ConfigChannel+0x98>
 80027ec:	e087      	b.n	80028fe <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	0011      	movs	r1, r2
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 f9d4 	bl	8002ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2108      	movs	r1, #8
 8002808:	430a      	orrs	r2, r1
 800280a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2104      	movs	r1, #4
 8002818:	438a      	bics	r2, r1
 800281a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6999      	ldr	r1, [r3, #24]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	619a      	str	r2, [r3, #24]
      break;
 800282e:	e06b      	b.n	8002908 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	0011      	movs	r1, r2
 8002838:	0018      	movs	r0, r3
 800283a:	f000 fa31 	bl	8002ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699a      	ldr	r2, [r3, #24]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	0109      	lsls	r1, r1, #4
 800284c:	430a      	orrs	r2, r1
 800284e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4931      	ldr	r1, [pc, #196]	; (8002920 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800285c:	400a      	ands	r2, r1
 800285e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6999      	ldr	r1, [r3, #24]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	021a      	lsls	r2, r3, #8
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	619a      	str	r2, [r3, #24]
      break;
 8002874:	e048      	b.n	8002908 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	0011      	movs	r1, r2
 800287e:	0018      	movs	r0, r3
 8002880:	f000 fa8c 	bl	8002d9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2108      	movs	r1, #8
 8002890:	430a      	orrs	r2, r1
 8002892:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69da      	ldr	r2, [r3, #28]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2104      	movs	r1, #4
 80028a0:	438a      	bics	r2, r1
 80028a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69d9      	ldr	r1, [r3, #28]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	61da      	str	r2, [r3, #28]
      break;
 80028b6:	e027      	b.n	8002908 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	0011      	movs	r1, r2
 80028c0:	0018      	movs	r0, r3
 80028c2:	f000 faeb 	bl	8002e9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	0109      	lsls	r1, r1, #4
 80028d4:	430a      	orrs	r2, r1
 80028d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	490f      	ldr	r1, [pc, #60]	; (8002920 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80028e4:	400a      	ands	r2, r1
 80028e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69d9      	ldr	r1, [r3, #28]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	021a      	lsls	r2, r3, #8
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	61da      	str	r2, [r3, #28]
      break;
 80028fc:	e004      	b.n	8002908 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80028fe:	2317      	movs	r3, #23
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
      break;
 8002906:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	223c      	movs	r2, #60	; 0x3c
 800290c:	2100      	movs	r1, #0
 800290e:	5499      	strb	r1, [r3, r2]

  return status;
 8002910:	2317      	movs	r3, #23
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	781b      	ldrb	r3, [r3, #0]
}
 8002916:	0018      	movs	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	b006      	add	sp, #24
 800291c:	bd80      	pop	{r7, pc}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	fffffbff 	.word	0xfffffbff

08002924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800292e:	230f      	movs	r3, #15
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	223c      	movs	r2, #60	; 0x3c
 800293a:	5c9b      	ldrb	r3, [r3, r2]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_TIM_ConfigClockSource+0x20>
 8002940:	2302      	movs	r3, #2
 8002942:	e0bc      	b.n	8002abe <HAL_TIM_ConfigClockSource+0x19a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	223c      	movs	r2, #60	; 0x3c
 8002948:	2101      	movs	r1, #1
 800294a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	223d      	movs	r2, #61	; 0x3d
 8002950:	2102      	movs	r1, #2
 8002952:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2277      	movs	r2, #119	; 0x77
 8002960:	4393      	bics	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4a58      	ldr	r2, [pc, #352]	; (8002ac8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002968:	4013      	ands	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	0192      	lsls	r2, r2, #6
 800297c:	4293      	cmp	r3, r2
 800297e:	d040      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0xde>
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	0192      	lsls	r2, r2, #6
 8002984:	4293      	cmp	r3, r2
 8002986:	d900      	bls.n	800298a <HAL_TIM_ConfigClockSource+0x66>
 8002988:	e088      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
 800298a:	2280      	movs	r2, #128	; 0x80
 800298c:	0152      	lsls	r2, r2, #5
 800298e:	4293      	cmp	r3, r2
 8002990:	d100      	bne.n	8002994 <HAL_TIM_ConfigClockSource+0x70>
 8002992:	e088      	b.n	8002aa6 <HAL_TIM_ConfigClockSource+0x182>
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	0152      	lsls	r2, r2, #5
 8002998:	4293      	cmp	r3, r2
 800299a:	d900      	bls.n	800299e <HAL_TIM_ConfigClockSource+0x7a>
 800299c:	e07e      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
 800299e:	2b70      	cmp	r3, #112	; 0x70
 80029a0:	d018      	beq.n	80029d4 <HAL_TIM_ConfigClockSource+0xb0>
 80029a2:	d900      	bls.n	80029a6 <HAL_TIM_ConfigClockSource+0x82>
 80029a4:	e07a      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
 80029a6:	2b60      	cmp	r3, #96	; 0x60
 80029a8:	d04f      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x126>
 80029aa:	d900      	bls.n	80029ae <HAL_TIM_ConfigClockSource+0x8a>
 80029ac:	e076      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
 80029ae:	2b50      	cmp	r3, #80	; 0x50
 80029b0:	d03b      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x106>
 80029b2:	d900      	bls.n	80029b6 <HAL_TIM_ConfigClockSource+0x92>
 80029b4:	e072      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d057      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x146>
 80029ba:	d900      	bls.n	80029be <HAL_TIM_ConfigClockSource+0x9a>
 80029bc:	e06e      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
 80029be:	2b30      	cmp	r3, #48	; 0x30
 80029c0:	d063      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x166>
 80029c2:	d86b      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	d060      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x166>
 80029c8:	d868      	bhi.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d05d      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x166>
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d05b      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x166>
 80029d2:	e063      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	6899      	ldr	r1, [r3, #8]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f000 fb38 	bl	8003058 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2277      	movs	r2, #119	; 0x77
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	609a      	str	r2, [r3, #8]
      break;
 8002a00:	e052      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6899      	ldr	r1, [r3, #8]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f000 fb21 	bl	8003058 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	01c9      	lsls	r1, r1, #7
 8002a24:	430a      	orrs	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]
      break;
 8002a28:	e03e      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	001a      	movs	r2, r3
 8002a38:	f000 fa94 	bl	8002f64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2150      	movs	r1, #80	; 0x50
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 faee 	bl	8003024 <TIM_ITRx_SetConfig>
      break;
 8002a48:	e02e      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6859      	ldr	r1, [r3, #4]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	001a      	movs	r2, r3
 8002a58:	f000 fab2 	bl	8002fc0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2160      	movs	r1, #96	; 0x60
 8002a62:	0018      	movs	r0, r3
 8002a64:	f000 fade 	bl	8003024 <TIM_ITRx_SetConfig>
      break;
 8002a68:	e01e      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	001a      	movs	r2, r3
 8002a78:	f000 fa74 	bl	8002f64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2140      	movs	r1, #64	; 0x40
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 face 	bl	8003024 <TIM_ITRx_SetConfig>
      break;
 8002a88:	e00e      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	0019      	movs	r1, r3
 8002a94:	0010      	movs	r0, r2
 8002a96:	f000 fac5 	bl	8003024 <TIM_ITRx_SetConfig>
      break;
 8002a9a:	e005      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a9c:	230f      	movs	r3, #15
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	701a      	strb	r2, [r3, #0]
      break;
 8002aa4:	e000      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002aa6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	223d      	movs	r2, #61	; 0x3d
 8002aac:	2101      	movs	r1, #1
 8002aae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	223c      	movs	r2, #60	; 0x3c
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	5499      	strb	r1, [r3, r2]

  return status;
 8002ab8:	230f      	movs	r3, #15
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	781b      	ldrb	r3, [r3, #0]
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b004      	add	sp, #16
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	ffff00ff 	.word	0xffff00ff

08002acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a2b      	ldr	r2, [pc, #172]	; (8002b8c <TIM_Base_SetConfig+0xc0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d003      	beq.n	8002aec <TIM_Base_SetConfig+0x20>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a2a      	ldr	r2, [pc, #168]	; (8002b90 <TIM_Base_SetConfig+0xc4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d108      	bne.n	8002afe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2270      	movs	r2, #112	; 0x70
 8002af0:	4393      	bics	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a22      	ldr	r2, [pc, #136]	; (8002b8c <TIM_Base_SetConfig+0xc0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d00f      	beq.n	8002b26 <TIM_Base_SetConfig+0x5a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a21      	ldr	r2, [pc, #132]	; (8002b90 <TIM_Base_SetConfig+0xc4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00b      	beq.n	8002b26 <TIM_Base_SetConfig+0x5a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a20      	ldr	r2, [pc, #128]	; (8002b94 <TIM_Base_SetConfig+0xc8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <TIM_Base_SetConfig+0x5a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a1f      	ldr	r2, [pc, #124]	; (8002b98 <TIM_Base_SetConfig+0xcc>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d003      	beq.n	8002b26 <TIM_Base_SetConfig+0x5a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <TIM_Base_SetConfig+0xd0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d108      	bne.n	8002b38 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <TIM_Base_SetConfig+0xd4>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2280      	movs	r2, #128	; 0x80
 8002b3c:	4393      	bics	r3, r2
 8002b3e:	001a      	movs	r2, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <TIM_Base_SetConfig+0xc0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d007      	beq.n	8002b76 <TIM_Base_SetConfig+0xaa>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <TIM_Base_SetConfig+0xcc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d003      	beq.n	8002b76 <TIM_Base_SetConfig+0xaa>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a0a      	ldr	r2, [pc, #40]	; (8002b9c <TIM_Base_SetConfig+0xd0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d103      	bne.n	8002b7e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	615a      	str	r2, [r3, #20]
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b004      	add	sp, #16
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40012c00 	.word	0x40012c00
 8002b90:	40000400 	.word	0x40000400
 8002b94:	40002000 	.word	0x40002000
 8002b98:	40014400 	.word	0x40014400
 8002b9c:	40014800 	.word	0x40014800
 8002ba0:	fffffcff 	.word	0xfffffcff

08002ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4393      	bics	r3, r2
 8002bb6:	001a      	movs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2270      	movs	r2, #112	; 0x70
 8002bd2:	4393      	bics	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	4393      	bics	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2202      	movs	r2, #2
 8002bec:	4393      	bics	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a23      	ldr	r2, [pc, #140]	; (8002c8c <TIM_OC1_SetConfig+0xe8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <TIM_OC1_SetConfig+0x6e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a22      	ldr	r2, [pc, #136]	; (8002c90 <TIM_OC1_SetConfig+0xec>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d003      	beq.n	8002c12 <TIM_OC1_SetConfig+0x6e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a21      	ldr	r2, [pc, #132]	; (8002c94 <TIM_OC1_SetConfig+0xf0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10c      	bne.n	8002c2c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2208      	movs	r2, #8
 8002c16:	4393      	bics	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2204      	movs	r2, #4
 8002c28:	4393      	bics	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a17      	ldr	r2, [pc, #92]	; (8002c8c <TIM_OC1_SetConfig+0xe8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d007      	beq.n	8002c44 <TIM_OC1_SetConfig+0xa0>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a16      	ldr	r2, [pc, #88]	; (8002c90 <TIM_OC1_SetConfig+0xec>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_OC1_SetConfig+0xa0>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <TIM_OC1_SetConfig+0xf0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d111      	bne.n	8002c68 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <TIM_OC1_SetConfig+0xf4>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <TIM_OC1_SetConfig+0xf8>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	621a      	str	r2, [r3, #32]
}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b006      	add	sp, #24
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	40012c00 	.word	0x40012c00
 8002c90:	40014400 	.word	0x40014400
 8002c94:	40014800 	.word	0x40014800
 8002c98:	fffffeff 	.word	0xfffffeff
 8002c9c:	fffffdff 	.word	0xfffffdff

08002ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	2210      	movs	r2, #16
 8002cb0:	4393      	bics	r3, r2
 8002cb2:	001a      	movs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a2c      	ldr	r2, [pc, #176]	; (8002d80 <TIM_OC2_SetConfig+0xe0>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a2b      	ldr	r2, [pc, #172]	; (8002d84 <TIM_OC2_SetConfig+0xe4>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	4393      	bics	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a22      	ldr	r2, [pc, #136]	; (8002d88 <TIM_OC2_SetConfig+0xe8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d10d      	bne.n	8002d1e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2280      	movs	r2, #128	; 0x80
 8002d06:	4393      	bics	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2240      	movs	r2, #64	; 0x40
 8002d1a:	4393      	bics	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a19      	ldr	r2, [pc, #100]	; (8002d88 <TIM_OC2_SetConfig+0xe8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d007      	beq.n	8002d36 <TIM_OC2_SetConfig+0x96>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a18      	ldr	r2, [pc, #96]	; (8002d8c <TIM_OC2_SetConfig+0xec>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d003      	beq.n	8002d36 <TIM_OC2_SetConfig+0x96>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <TIM_OC2_SetConfig+0xf0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d113      	bne.n	8002d5e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4a16      	ldr	r2, [pc, #88]	; (8002d94 <TIM_OC2_SetConfig+0xf4>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4a15      	ldr	r2, [pc, #84]	; (8002d98 <TIM_OC2_SetConfig+0xf8>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	621a      	str	r2, [r3, #32]
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b006      	add	sp, #24
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	ffff8fff 	.word	0xffff8fff
 8002d84:	fffffcff 	.word	0xfffffcff
 8002d88:	40012c00 	.word	0x40012c00
 8002d8c:	40014400 	.word	0x40014400
 8002d90:	40014800 	.word	0x40014800
 8002d94:	fffffbff 	.word	0xfffffbff
 8002d98:	fffff7ff 	.word	0xfffff7ff

08002d9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	4a33      	ldr	r2, [pc, #204]	; (8002e78 <TIM_OC3_SetConfig+0xdc>)
 8002dac:	401a      	ands	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2270      	movs	r2, #112	; 0x70
 8002dc8:	4393      	bics	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2203      	movs	r2, #3
 8002dd0:	4393      	bics	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	4a26      	ldr	r2, [pc, #152]	; (8002e7c <TIM_OC3_SetConfig+0xe0>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <TIM_OC3_SetConfig+0xe4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d10d      	bne.n	8002e16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	4a21      	ldr	r2, [pc, #132]	; (8002e84 <TIM_OC3_SetConfig+0xe8>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <TIM_OC3_SetConfig+0xec>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a19      	ldr	r2, [pc, #100]	; (8002e80 <TIM_OC3_SetConfig+0xe4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <TIM_OC3_SetConfig+0x92>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a1a      	ldr	r2, [pc, #104]	; (8002e8c <TIM_OC3_SetConfig+0xf0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d003      	beq.n	8002e2e <TIM_OC3_SetConfig+0x92>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a19      	ldr	r2, [pc, #100]	; (8002e90 <TIM_OC3_SetConfig+0xf4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d113      	bne.n	8002e56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <TIM_OC3_SetConfig+0xf8>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <TIM_OC3_SetConfig+0xfc>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	621a      	str	r2, [r3, #32]
}
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b006      	add	sp, #24
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	fffffeff 	.word	0xfffffeff
 8002e7c:	fffffdff 	.word	0xfffffdff
 8002e80:	40012c00 	.word	0x40012c00
 8002e84:	fffff7ff 	.word	0xfffff7ff
 8002e88:	fffffbff 	.word	0xfffffbff
 8002e8c:	40014400 	.word	0x40014400
 8002e90:	40014800 	.word	0x40014800
 8002e94:	ffffefff 	.word	0xffffefff
 8002e98:	ffffdfff 	.word	0xffffdfff

08002e9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4a26      	ldr	r2, [pc, #152]	; (8002f44 <TIM_OC4_SetConfig+0xa8>)
 8002eac:	401a      	ands	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a20      	ldr	r2, [pc, #128]	; (8002f48 <TIM_OC4_SetConfig+0xac>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a1f      	ldr	r2, [pc, #124]	; (8002f4c <TIM_OC4_SetConfig+0xb0>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4a1b      	ldr	r2, [pc, #108]	; (8002f50 <TIM_OC4_SetConfig+0xb4>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	031b      	lsls	r3, r3, #12
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a17      	ldr	r2, [pc, #92]	; (8002f54 <TIM_OC4_SetConfig+0xb8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d007      	beq.n	8002f0c <TIM_OC4_SetConfig+0x70>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a16      	ldr	r2, [pc, #88]	; (8002f58 <TIM_OC4_SetConfig+0xbc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d003      	beq.n	8002f0c <TIM_OC4_SetConfig+0x70>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a15      	ldr	r2, [pc, #84]	; (8002f5c <TIM_OC4_SetConfig+0xc0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d109      	bne.n	8002f20 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <TIM_OC4_SetConfig+0xc4>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	019b      	lsls	r3, r3, #6
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	621a      	str	r2, [r3, #32]
}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	b006      	add	sp, #24
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	ffffefff 	.word	0xffffefff
 8002f48:	ffff8fff 	.word	0xffff8fff
 8002f4c:	fffffcff 	.word	0xfffffcff
 8002f50:	ffffdfff 	.word	0xffffdfff
 8002f54:	40012c00 	.word	0x40012c00
 8002f58:	40014400 	.word	0x40014400
 8002f5c:	40014800 	.word	0x40014800
 8002f60:	ffffbfff 	.word	0xffffbfff

08002f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	001a      	movs	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	22f0      	movs	r2, #240	; 0xf0
 8002f8e:	4393      	bics	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	220a      	movs	r2, #10
 8002fa0:	4393      	bics	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	621a      	str	r2, [r3, #32]
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b006      	add	sp, #24
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	4393      	bics	r3, r2
 8002fd4:	001a      	movs	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <TIM_TI2_ConfigInputStage+0x60>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	031b      	lsls	r3, r3, #12
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	22a0      	movs	r2, #160	; 0xa0
 8002ffc:	4393      	bics	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	621a      	str	r2, [r3, #32]
}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	46bd      	mov	sp, r7
 800301a:	b006      	add	sp, #24
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	ffff0fff 	.word	0xffff0fff

08003024 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2270      	movs	r2, #112	; 0x70
 8003038:	4393      	bics	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	2207      	movs	r2, #7
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	609a      	str	r2, [r3, #8]
}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b004      	add	sp, #16
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <TIM_ETR_SetConfig+0x3c>)
 8003070:	4013      	ands	r3, r2
 8003072:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	021a      	lsls	r2, r3, #8
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	431a      	orrs	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4313      	orrs	r3, r2
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	609a      	str	r2, [r3, #8]
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b006      	add	sp, #24
 8003092:	bd80      	pop	{r7, pc}
 8003094:	ffff00ff 	.word	0xffff00ff

08003098 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	221f      	movs	r2, #31
 80030a8:	4013      	ands	r3, r2
 80030aa:	2201      	movs	r2, #1
 80030ac:	409a      	lsls	r2, r3
 80030ae:	0013      	movs	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	43d2      	mvns	r2, r2
 80030ba:	401a      	ands	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1a      	ldr	r2, [r3, #32]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	211f      	movs	r1, #31
 80030c8:	400b      	ands	r3, r1
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4099      	lsls	r1, r3
 80030ce:	000b      	movs	r3, r1
 80030d0:	431a      	orrs	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	621a      	str	r2, [r3, #32]
}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	46bd      	mov	sp, r7
 80030da:	b006      	add	sp, #24
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	223c      	movs	r2, #60	; 0x3c
 80030ee:	5c9b      	ldrb	r3, [r3, r2]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e03c      	b.n	8003172 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	223c      	movs	r2, #60	; 0x3c
 80030fc:	2101      	movs	r1, #1
 80030fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	223d      	movs	r2, #61	; 0x3d
 8003104:	2102      	movs	r1, #2
 8003106:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2270      	movs	r2, #112	; 0x70
 800311c:	4393      	bics	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a11      	ldr	r2, [pc, #68]	; (800317c <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d004      	beq.n	8003146 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0f      	ldr	r2, [pc, #60]	; (8003180 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d10c      	bne.n	8003160 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2280      	movs	r2, #128	; 0x80
 800314a:	4393      	bics	r3, r2
 800314c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	4313      	orrs	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	223d      	movs	r2, #61	; 0x3d
 8003164:	2101      	movs	r1, #1
 8003166:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	223c      	movs	r2, #60	; 0x3c
 800316c:	2100      	movs	r1, #0
 800316e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	0018      	movs	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	b004      	add	sp, #16
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40000400 	.word	0x40000400

08003184 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	223c      	movs	r2, #60	; 0x3c
 8003196:	5c9b      	ldrb	r3, [r3, r2]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800319c:	2302      	movs	r3, #2
 800319e:	e03e      	b.n	800321e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	223c      	movs	r2, #60	; 0x3c
 80031a4:	2101      	movs	r1, #1
 80031a6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	22ff      	movs	r2, #255	; 0xff
 80031ac:	4393      	bics	r3, r2
 80031ae:	001a      	movs	r2, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4a1b      	ldr	r2, [pc, #108]	; (8003228 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80031bc:	401a      	ands	r2, r3
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a18      	ldr	r2, [pc, #96]	; (800322c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80031ca:	401a      	ands	r2, r3
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4a16      	ldr	r2, [pc, #88]	; (8003230 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80031d8:	401a      	ands	r2, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4a13      	ldr	r2, [pc, #76]	; (8003234 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80031e6:	401a      	ands	r2, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4a11      	ldr	r2, [pc, #68]	; (8003238 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80031f4:	401a      	ands	r2, r3
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4a0e      	ldr	r2, [pc, #56]	; (800323c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003202:	401a      	ands	r2, r3
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	223c      	movs	r2, #60	; 0x3c
 8003218:	2100      	movs	r1, #0
 800321a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	b004      	add	sp, #16
 8003224:	bd80      	pop	{r7, pc}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	fffffcff 	.word	0xfffffcff
 800322c:	fffffbff 	.word	0xfffffbff
 8003230:	fffff7ff 	.word	0xfffff7ff
 8003234:	ffffefff 	.word	0xffffefff
 8003238:	ffffdfff 	.word	0xffffdfff
 800323c:	ffffbfff 	.word	0xffffbfff

08003240 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	0002      	movs	r2, r0
 8003248:	1dbb      	adds	r3, r7, #6
 800324a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003250:	1dbb      	adds	r3, r7, #6
 8003252:	2200      	movs	r2, #0
 8003254:	5e9b      	ldrsh	r3, [r3, r2]
 8003256:	2b84      	cmp	r3, #132	; 0x84
 8003258:	d006      	beq.n	8003268 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800325a:	1dbb      	adds	r3, r7, #6
 800325c:	2200      	movs	r2, #0
 800325e:	5e9a      	ldrsh	r2, [r3, r2]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	18d3      	adds	r3, r2, r3
 8003264:	3303      	adds	r3, #3
 8003266:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003268:	68fb      	ldr	r3, [r7, #12]
}
 800326a:	0018      	movs	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	b004      	add	sp, #16
 8003270:	bd80      	pop	{r7, pc}

08003272 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003276:	f000 fbdf 	bl	8003a38 <vTaskStartScheduler>
  
  return osOK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	0018      	movs	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003282:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003284:	b089      	sub	sp, #36	; 0x24
 8003286:	af04      	add	r7, sp, #16
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d020      	beq.n	80032d6 <osThreadCreate+0x54>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01c      	beq.n	80032d6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685c      	ldr	r4, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681d      	ldr	r5, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691e      	ldr	r6, [r3, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2208      	movs	r2, #8
 80032ac:	5e9b      	ldrsh	r3, [r3, r2]
 80032ae:	0018      	movs	r0, r3
 80032b0:	f7ff ffc6 	bl	8003240 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032bc:	6839      	ldr	r1, [r7, #0]
 80032be:	9302      	str	r3, [sp, #8]
 80032c0:	9201      	str	r2, [sp, #4]
 80032c2:	9000      	str	r0, [sp, #0]
 80032c4:	000b      	movs	r3, r1
 80032c6:	0032      	movs	r2, r6
 80032c8:	0029      	movs	r1, r5
 80032ca:	0020      	movs	r0, r4
 80032cc:	f000 fa02 	bl	80036d4 <xTaskCreateStatic>
 80032d0:	0003      	movs	r3, r0
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	e01d      	b.n	8003312 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685c      	ldr	r4, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032e2:	b29e      	uxth	r6, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2208      	movs	r2, #8
 80032e8:	5e9b      	ldrsh	r3, [r3, r2]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f7ff ffa8 	bl	8003240 <makeFreeRtosPriority>
 80032f0:	0001      	movs	r1, r0
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	230c      	movs	r3, #12
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	9100      	str	r1, [sp, #0]
 80032fc:	0013      	movs	r3, r2
 80032fe:	0032      	movs	r2, r6
 8003300:	0029      	movs	r1, r5
 8003302:	0020      	movs	r0, r4
 8003304:	f000 fa29 	bl	800375a <xTaskCreate>
 8003308:	0003      	movs	r3, r0
 800330a:	2b01      	cmp	r3, #1
 800330c:	d001      	beq.n	8003312 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800330e:	2300      	movs	r3, #0
 8003310:	e000      	b.n	8003314 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003312:	68fb      	ldr	r3, [r7, #12]
}
 8003314:	0018      	movs	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	b005      	add	sp, #20
 800331a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800331c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <osDelay+0x16>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	e000      	b.n	8003334 <osDelay+0x18>
 8003332:	2301      	movs	r3, #1
 8003334:	0018      	movs	r0, r3
 8003336:	f000 fb59 	bl	80039ec <vTaskDelay>
  
  return osOK;
 800333a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800333c:	0018      	movs	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	b004      	add	sp, #16
 8003342:	bd80      	pop	{r7, pc}

08003344 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b085      	sub	sp, #20
 8003348:	af02      	add	r7, sp, #8
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d011      	beq.n	800337a <osMessageCreate+0x36>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00d      	beq.n	800337a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6859      	ldr	r1, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2400      	movs	r4, #0
 8003370:	9400      	str	r4, [sp, #0]
 8003372:	f000 f90c 	bl	800358e <xQueueGenericCreateStatic>
 8003376:	0003      	movs	r3, r0
 8003378:	e008      	b.n	800338c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	0019      	movs	r1, r3
 8003386:	f000 f94d 	bl	8003624 <xQueueGenericCreate>
 800338a:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	b003      	add	sp, #12
 8003392:	bd90      	pop	{r4, r7, pc}

08003394 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3308      	adds	r3, #8
 80033a0:	001a      	movs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	4252      	negs	r2, r2
 80033ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3308      	adds	r3, #8
 80033b2:	001a      	movs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3308      	adds	r3, #8
 80033bc:	001a      	movs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033c8:	46c0      	nop			; (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b002      	add	sp, #8
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b002      	add	sp, #8
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	601a      	str	r2, [r3, #0]
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	b004      	add	sp, #16
 8003428:	bd80      	pop	{r7, pc}

0800342a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	3301      	adds	r3, #1
 800343e:	d103      	bne.n	8003448 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	e00c      	b.n	8003462 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3308      	adds	r3, #8
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	e002      	b.n	8003456 <vListInsert+0x2c>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	429a      	cmp	r2, r3
 8003460:	d2f6      	bcs.n	8003450 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	601a      	str	r2, [r3, #0]
}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	b004      	add	sp, #16
 8003494:	bd80      	pop	{r7, pc}

08003496 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6892      	ldr	r2, [r2, #8]
 80034ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6852      	ldr	r2, [r2, #4]
 80034b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d103      	bne.n	80034ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	1e5a      	subs	r2, r3, #1
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
}
 80034de:	0018      	movs	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b004      	add	sp, #16
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <xQueueGenericReset+0x18>
 80034fa:	b672      	cpsid	i
 80034fc:	e7fe      	b.n	80034fc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80034fe:	f000 fedf 	bl	80042c0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	434b      	muls	r3, r1
 8003510:	18d2      	adds	r2, r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352c:	1e59      	subs	r1, r3, #1
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	434b      	muls	r3, r1
 8003534:	18d2      	adds	r2, r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2244      	movs	r2, #68	; 0x44
 800353e:	21ff      	movs	r1, #255	; 0xff
 8003540:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2245      	movs	r2, #69	; 0x45
 8003546:	21ff      	movs	r1, #255	; 0xff
 8003548:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10d      	bne.n	800356c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d013      	beq.n	8003580 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3310      	adds	r3, #16
 800355c:	0018      	movs	r0, r3
 800355e:	f000 fc71 	bl	8003e44 <xTaskRemoveFromEventList>
 8003562:	1e03      	subs	r3, r0, #0
 8003564:	d00c      	beq.n	8003580 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003566:	f000 fe9b 	bl	80042a0 <vPortYield>
 800356a:	e009      	b.n	8003580 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3310      	adds	r3, #16
 8003570:	0018      	movs	r0, r3
 8003572:	f7ff ff0f 	bl	8003394 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3324      	adds	r3, #36	; 0x24
 800357a:	0018      	movs	r0, r3
 800357c:	f7ff ff0a 	bl	8003394 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003580:	f000 feb0 	bl	80042e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003584:	2301      	movs	r3, #1
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b004      	add	sp, #16
 800358c:	bd80      	pop	{r7, pc}

0800358e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800358e:	b590      	push	{r4, r7, lr}
 8003590:	b089      	sub	sp, #36	; 0x24
 8003592:	af02      	add	r7, sp, #8
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <xQueueGenericCreateStatic+0x18>
 80035a2:	b672      	cpsid	i
 80035a4:	e7fe      	b.n	80035a4 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <xQueueGenericCreateStatic+0x22>
 80035ac:	b672      	cpsid	i
 80035ae:	e7fe      	b.n	80035ae <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <xQueueGenericCreateStatic+0x2e>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <xQueueGenericCreateStatic+0x32>
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <xQueueGenericCreateStatic+0x34>
 80035c0:	2300      	movs	r3, #0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <xQueueGenericCreateStatic+0x3c>
 80035c6:	b672      	cpsid	i
 80035c8:	e7fe      	b.n	80035c8 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d102      	bne.n	80035d6 <xQueueGenericCreateStatic+0x48>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <xQueueGenericCreateStatic+0x4c>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <xQueueGenericCreateStatic+0x4e>
 80035da:	2300      	movs	r3, #0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <xQueueGenericCreateStatic+0x56>
 80035e0:	b672      	cpsid	i
 80035e2:	e7fe      	b.n	80035e2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035e4:	2348      	movs	r3, #72	; 0x48
 80035e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b48      	cmp	r3, #72	; 0x48
 80035ec:	d001      	beq.n	80035f2 <xQueueGenericCreateStatic+0x64>
 80035ee:	b672      	cpsid	i
 80035f0:	e7fe      	b.n	80035f0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00e      	beq.n	800361a <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2246      	movs	r2, #70	; 0x46
 8003600:	2101      	movs	r1, #1
 8003602:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003604:	2328      	movs	r3, #40	; 0x28
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	781c      	ldrb	r4, [r3, #0]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	0023      	movs	r3, r4
 8003616:	f000 f83b 	bl	8003690 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800361a:	697b      	ldr	r3, [r7, #20]
	}
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	b007      	add	sp, #28
 8003622:	bd90      	pop	{r4, r7, pc}

08003624 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b08b      	sub	sp, #44	; 0x2c
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	1dfb      	adds	r3, r7, #7
 8003630:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <xQueueGenericCreate+0x18>
 8003638:	b672      	cpsid	i
 800363a:	e7fe      	b.n	800363a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d102      	bne.n	8003648 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	e003      	b.n	8003650 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	4353      	muls	r3, r2
 800364e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	3348      	adds	r3, #72	; 0x48
 8003654:	0018      	movs	r0, r3
 8003656:	f000 fecb 	bl	80043f0 <pvPortMalloc>
 800365a:	0003      	movs	r3, r0
 800365c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d010      	beq.n	8003686 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	3348      	adds	r3, #72	; 0x48
 8003668:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2246      	movs	r2, #70	; 0x46
 800366e:	2100      	movs	r1, #0
 8003670:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003672:	1dfb      	adds	r3, r7, #7
 8003674:	781c      	ldrb	r4, [r3, #0]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	0023      	movs	r3, r4
 8003682:	f000 f805 	bl	8003690 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003686:	69bb      	ldr	r3, [r7, #24]
	}
 8003688:	0018      	movs	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	b009      	add	sp, #36	; 0x24
 800368e:	bd90      	pop	{r4, r7, pc}

08003690 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	001a      	movs	r2, r3
 800369e:	1cfb      	adds	r3, r7, #3
 80036a0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d103      	bne.n	80036b0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e002      	b.n	80036b6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2101      	movs	r1, #1
 80036c6:	0018      	movs	r0, r3
 80036c8:	f7ff ff0d 	bl	80034e6 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b004      	add	sp, #16
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b08d      	sub	sp, #52	; 0x34
 80036d8:	af04      	add	r7, sp, #16
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <xTaskCreateStatic+0x18>
 80036e8:	b672      	cpsid	i
 80036ea:	e7fe      	b.n	80036ea <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80036ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <xTaskCreateStatic+0x22>
 80036f2:	b672      	cpsid	i
 80036f4:	e7fe      	b.n	80036f4 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036f6:	23b8      	movs	r3, #184	; 0xb8
 80036f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2bb8      	cmp	r3, #184	; 0xb8
 80036fe:	d001      	beq.n	8003704 <xTaskCreateStatic+0x30>
 8003700:	b672      	cpsid	i
 8003702:	e7fe      	b.n	8003702 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003706:	2b00      	cmp	r3, #0
 8003708:	d020      	beq.n	800374c <xTaskCreateStatic+0x78>
 800370a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01d      	beq.n	800374c <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003712:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003718:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	22b5      	movs	r2, #181	; 0xb5
 800371e:	2102      	movs	r1, #2
 8003720:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003722:	683c      	ldr	r4, [r7, #0]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	2300      	movs	r3, #0
 800372c:	9303      	str	r3, [sp, #12]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	9302      	str	r3, [sp, #8]
 8003732:	2318      	movs	r3, #24
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	0023      	movs	r3, r4
 800373e:	f000 f859 	bl	80037f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	0018      	movs	r0, r3
 8003746:	f000 f8ed 	bl	8003924 <prvAddNewTaskToReadyList>
 800374a:	e001      	b.n	8003750 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003750:	69bb      	ldr	r3, [r7, #24]
	}
 8003752:	0018      	movs	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	b009      	add	sp, #36	; 0x24
 8003758:	bd90      	pop	{r4, r7, pc}

0800375a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800375a:	b590      	push	{r4, r7, lr}
 800375c:	b08d      	sub	sp, #52	; 0x34
 800375e:	af04      	add	r7, sp, #16
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	1dbb      	adds	r3, r7, #6
 8003768:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800376a:	1dbb      	adds	r3, r7, #6
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	0018      	movs	r0, r3
 8003772:	f000 fe3d 	bl	80043f0 <pvPortMalloc>
 8003776:	0003      	movs	r3, r0
 8003778:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d010      	beq.n	80037a2 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003780:	20b8      	movs	r0, #184	; 0xb8
 8003782:	f000 fe35 	bl	80043f0 <pvPortMalloc>
 8003786:	0003      	movs	r3, r0
 8003788:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
 8003796:	e006      	b.n	80037a6 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	0018      	movs	r0, r3
 800379c:	f000 fed2 	bl	8004544 <vPortFree>
 80037a0:	e001      	b.n	80037a6 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01a      	beq.n	80037e2 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	22b5      	movs	r2, #181	; 0xb5
 80037b0:	2100      	movs	r1, #0
 80037b2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037b4:	1dbb      	adds	r3, r7, #6
 80037b6:	881a      	ldrh	r2, [r3, #0]
 80037b8:	683c      	ldr	r4, [r7, #0]
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	2300      	movs	r3, #0
 80037c0:	9303      	str	r3, [sp, #12]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	9302      	str	r3, [sp, #8]
 80037c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	0023      	movs	r3, r4
 80037d0:	f000 f810 	bl	80037f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	0018      	movs	r0, r3
 80037d8:	f000 f8a4 	bl	8003924 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037dc:	2301      	movs	r3, #1
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	e002      	b.n	80037e8 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037e2:	2301      	movs	r3, #1
 80037e4:	425b      	negs	r3, r3
 80037e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037e8:	69bb      	ldr	r3, [r7, #24]
	}
 80037ea:	0018      	movs	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b009      	add	sp, #36	; 0x24
 80037f0:	bd90      	pop	{r4, r7, pc}
	...

080037f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4942      	ldr	r1, [pc, #264]	; (8003914 <prvInitialiseNewTask+0x120>)
 800380a:	468c      	mov	ip, r1
 800380c:	4463      	add	r3, ip
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	18d3      	adds	r3, r2, r3
 8003812:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2207      	movs	r2, #7
 8003818:	4393      	bics	r3, r2
 800381a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2207      	movs	r2, #7
 8003820:	4013      	ands	r3, r2
 8003822:	d001      	beq.n	8003828 <prvInitialiseNewTask+0x34>
 8003824:	b672      	cpsid	i
 8003826:	e7fe      	b.n	8003826 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	e013      	b.n	8003856 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	18d3      	adds	r3, r2, r3
 8003834:	7818      	ldrb	r0, [r3, #0]
 8003836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003838:	2134      	movs	r1, #52	; 0x34
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	18d3      	adds	r3, r2, r3
 800383e:	185b      	adds	r3, r3, r1
 8003840:	1c02      	adds	r2, r0, #0
 8003842:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	18d3      	adds	r3, r2, r3
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d006      	beq.n	800385e <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	3301      	adds	r3, #1
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b0f      	cmp	r3, #15
 800385a:	d9e8      	bls.n	800382e <prvInitialiseNewTask+0x3a>
 800385c:	e000      	b.n	8003860 <prvInitialiseNewTask+0x6c>
		{
			break;
 800385e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	2243      	movs	r2, #67	; 0x43
 8003864:	2100      	movs	r1, #0
 8003866:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800386e:	2302      	movs	r3, #2
 8003870:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	6a3a      	ldr	r2, [r7, #32]
 8003876:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387a:	6a3a      	ldr	r2, [r7, #32]
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	2200      	movs	r2, #0
 8003882:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	3304      	adds	r3, #4
 8003888:	0018      	movs	r0, r3
 800388a:	f7ff fda1 	bl	80033d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003890:	3318      	adds	r3, #24
 8003892:	0018      	movs	r0, r3
 8003894:	f7ff fd9c 	bl	80033d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800389c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	2203      	movs	r2, #3
 80038a2:	1ad2      	subs	r2, r2, r3
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	2200      	movs	r2, #0
 80038b2:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	22b0      	movs	r2, #176	; 0xb0
 80038b8:	2100      	movs	r1, #0
 80038ba:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038be:	22b4      	movs	r2, #180	; 0xb4
 80038c0:	2100      	movs	r1, #0
 80038c2:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	3350      	adds	r3, #80	; 0x50
 80038c8:	2260      	movs	r2, #96	; 0x60
 80038ca:	2100      	movs	r1, #0
 80038cc:	0018      	movs	r0, r3
 80038ce:	f000 ff5f 	bl	8004790 <memset>
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	4a10      	ldr	r2, [pc, #64]	; (8003918 <prvInitialiseNewTask+0x124>)
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038da:	4a10      	ldr	r2, [pc, #64]	; (800391c <prvInitialiseNewTask+0x128>)
 80038dc:	659a      	str	r2, [r3, #88]	; 0x58
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	4a0f      	ldr	r2, [pc, #60]	; (8003920 <prvInitialiseNewTask+0x12c>)
 80038e2:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	22b6      	movs	r2, #182	; 0xb6
 80038e8:	2100      	movs	r1, #0
 80038ea:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	68f9      	ldr	r1, [r7, #12]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f000 fc46 	bl	8004184 <pxPortInitialiseStack>
 80038f8:	0002      	movs	r2, r0
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b006      	add	sp, #24
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	3fffffff 	.word	0x3fffffff
 8003918:	08004a04 	.word	0x08004a04
 800391c:	08004a24 	.word	0x08004a24
 8003920:	080049e4 	.word	0x080049e4

08003924 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800392c:	f000 fcc8 	bl	80042c0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003930:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <prvAddNewTaskToReadyList+0xb0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	4b27      	ldr	r3, [pc, #156]	; (80039d4 <prvAddNewTaskToReadyList+0xb0>)
 8003938:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800393a:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <prvAddNewTaskToReadyList+0xb4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003942:	4b25      	ldr	r3, [pc, #148]	; (80039d8 <prvAddNewTaskToReadyList+0xb4>)
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003948:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <prvAddNewTaskToReadyList+0xb0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d110      	bne.n	8003972 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003950:	f000 fade 	bl	8003f10 <prvInitialiseTaskLists>
 8003954:	e00d      	b.n	8003972 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003956:	4b21      	ldr	r3, [pc, #132]	; (80039dc <prvAddNewTaskToReadyList+0xb8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800395e:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <prvAddNewTaskToReadyList+0xb4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	429a      	cmp	r2, r3
 800396a:	d802      	bhi.n	8003972 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <prvAddNewTaskToReadyList+0xb4>)
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003972:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <prvAddNewTaskToReadyList+0xbc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <prvAddNewTaskToReadyList+0xbc>)
 800397a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003980:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <prvAddNewTaskToReadyList+0xc0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d903      	bls.n	8003990 <prvAddNewTaskToReadyList+0x6c>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398c:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <prvAddNewTaskToReadyList+0xc0>)
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003994:	0013      	movs	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	189b      	adds	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4a12      	ldr	r2, [pc, #72]	; (80039e8 <prvAddNewTaskToReadyList+0xc4>)
 800399e:	189a      	adds	r2, r3, r2
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	0019      	movs	r1, r3
 80039a6:	0010      	movs	r0, r2
 80039a8:	f7ff fd1d 	bl	80033e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039ac:	f000 fc9a 	bl	80042e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039b0:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <prvAddNewTaskToReadyList+0xb8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039b8:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <prvAddNewTaskToReadyList+0xb4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d201      	bcs.n	80039ca <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039c6:	f000 fc6b 	bl	80042a0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b002      	add	sp, #8
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	2000039c 	.word	0x2000039c
 80039d8:	200002ec 	.word	0x200002ec
 80039dc:	200003a8 	.word	0x200003a8
 80039e0:	200003b8 	.word	0x200003b8
 80039e4:	200003a4 	.word	0x200003a4
 80039e8:	200002f0 	.word	0x200002f0

080039ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d010      	beq.n	8003a20 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <vTaskDelay+0x48>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <vTaskDelay+0x1e>
 8003a06:	b672      	cpsid	i
 8003a08:	e7fe      	b.n	8003a08 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003a0a:	f000 f86d 	bl	8003ae8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2100      	movs	r1, #0
 8003a12:	0018      	movs	r0, r3
 8003a14:	f000 fb5c 	bl	80040d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a18:	f000 f872 	bl	8003b00 <xTaskResumeAll>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8003a26:	f000 fc3b 	bl	80042a0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b004      	add	sp, #16
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	200003c4 	.word	0x200003c4

08003a38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a38:	b590      	push	{r4, r7, lr}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a46:	003a      	movs	r2, r7
 8003a48:	1d39      	adds	r1, r7, #4
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	18fb      	adds	r3, r7, r3
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f7fc fbf6 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a54:	683c      	ldr	r4, [r7, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	491b      	ldr	r1, [pc, #108]	; (8003ac8 <vTaskStartScheduler+0x90>)
 8003a5c:	481b      	ldr	r0, [pc, #108]	; (8003acc <vTaskStartScheduler+0x94>)
 8003a5e:	9202      	str	r2, [sp, #8]
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	2300      	movs	r3, #0
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2300      	movs	r3, #0
 8003a68:	0022      	movs	r2, r4
 8003a6a:	f7ff fe33 	bl	80036d4 <xTaskCreateStatic>
 8003a6e:	0002      	movs	r2, r0
 8003a70:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <vTaskStartScheduler+0x98>)
 8003a72:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a74:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <vTaskStartScheduler+0x98>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	e001      	b.n	8003a86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d113      	bne.n	8003ab4 <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003a8c:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a8e:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <vTaskStartScheduler+0x9c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3350      	adds	r3, #80	; 0x50
 8003a94:	001a      	movs	r2, r3
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <vTaskStartScheduler+0xa0>)
 8003a98:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <vTaskStartScheduler+0xa4>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	4252      	negs	r2, r2
 8003aa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003aa2:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <vTaskStartScheduler+0xa8>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <vTaskStartScheduler+0xac>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003aae:	f000 fbd3 	bl	8004258 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ab2:	e004      	b.n	8003abe <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	d101      	bne.n	8003abe <vTaskStartScheduler+0x86>
 8003aba:	b672      	cpsid	i
 8003abc:	e7fe      	b.n	8003abc <vTaskStartScheduler+0x84>
}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b005      	add	sp, #20
 8003ac4:	bd90      	pop	{r4, r7, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	080049ac 	.word	0x080049ac
 8003acc:	08003efd 	.word	0x08003efd
 8003ad0:	200003c0 	.word	0x200003c0
 8003ad4:	200002ec 	.word	0x200002ec
 8003ad8:	20000010 	.word	0x20000010
 8003adc:	200003bc 	.word	0x200003bc
 8003ae0:	200003a8 	.word	0x200003a8
 8003ae4:	200003a0 	.word	0x200003a0

08003ae8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003aec:	4b03      	ldr	r3, [pc, #12]	; (8003afc <vTaskSuspendAll+0x14>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	4b02      	ldr	r3, [pc, #8]	; (8003afc <vTaskSuspendAll+0x14>)
 8003af4:	601a      	str	r2, [r3, #0]
}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	200003c4 	.word	0x200003c4

08003b00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b0e:	4b3a      	ldr	r3, [pc, #232]	; (8003bf8 <xTaskResumeAll+0xf8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <xTaskResumeAll+0x1a>
 8003b16:	b672      	cpsid	i
 8003b18:	e7fe      	b.n	8003b18 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b1a:	f000 fbd1 	bl	80042c0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b1e:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <xTaskResumeAll+0xf8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	1e5a      	subs	r2, r3, #1
 8003b24:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <xTaskResumeAll+0xf8>)
 8003b26:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b28:	4b33      	ldr	r3, [pc, #204]	; (8003bf8 <xTaskResumeAll+0xf8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d15b      	bne.n	8003be8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b30:	4b32      	ldr	r3, [pc, #200]	; (8003bfc <xTaskResumeAll+0xfc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d057      	beq.n	8003be8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b38:	e02f      	b.n	8003b9a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003b3a:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <xTaskResumeAll+0x100>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3318      	adds	r3, #24
 8003b46:	0018      	movs	r0, r3
 8003b48:	f7ff fca5 	bl	8003496 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7ff fca0 	bl	8003496 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5a:	4b2a      	ldr	r3, [pc, #168]	; (8003c04 <xTaskResumeAll+0x104>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d903      	bls.n	8003b6a <xTaskResumeAll+0x6a>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b66:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <xTaskResumeAll+0x104>)
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6e:	0013      	movs	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	189b      	adds	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4a24      	ldr	r2, [pc, #144]	; (8003c08 <xTaskResumeAll+0x108>)
 8003b78:	189a      	adds	r2, r3, r2
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	0019      	movs	r1, r3
 8003b80:	0010      	movs	r0, r2
 8003b82:	f7ff fc30 	bl	80033e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8a:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <xTaskResumeAll+0x10c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d302      	bcc.n	8003b9a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003b94:	4b1e      	ldr	r3, [pc, #120]	; (8003c10 <xTaskResumeAll+0x110>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b9a:	4b19      	ldr	r3, [pc, #100]	; (8003c00 <xTaskResumeAll+0x100>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1cb      	bne.n	8003b3a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ba8:	f000 fa52 	bl	8004050 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003bac:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <xTaskResumeAll+0x114>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00f      	beq.n	8003bd8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bb8:	f000 f82e 	bl	8003c18 <xTaskIncrementTick>
 8003bbc:	1e03      	subs	r3, r0, #0
 8003bbe:	d002      	beq.n	8003bc6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8003bc0:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <xTaskResumeAll+0x110>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f2      	bne.n	8003bb8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8003bd2:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <xTaskResumeAll+0x114>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bd8:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <xTaskResumeAll+0x110>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003be0:	2301      	movs	r3, #1
 8003be2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003be4:	f000 fb5c 	bl	80042a0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003be8:	f000 fb7c 	bl	80042e4 <vPortExitCritical>

	return xAlreadyYielded;
 8003bec:	68bb      	ldr	r3, [r7, #8]
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b004      	add	sp, #16
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	200003c4 	.word	0x200003c4
 8003bfc:	2000039c 	.word	0x2000039c
 8003c00:	2000035c 	.word	0x2000035c
 8003c04:	200003a4 	.word	0x200003a4
 8003c08:	200002f0 	.word	0x200002f0
 8003c0c:	200002ec 	.word	0x200002ec
 8003c10:	200003b0 	.word	0x200003b0
 8003c14:	200003ac 	.word	0x200003ac

08003c18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c22:	4b50      	ldr	r3, [pc, #320]	; (8003d64 <xTaskIncrementTick+0x14c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d000      	beq.n	8003c2c <xTaskIncrementTick+0x14>
 8003c2a:	e089      	b.n	8003d40 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c2c:	4b4e      	ldr	r3, [pc, #312]	; (8003d68 <xTaskIncrementTick+0x150>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c34:	4b4c      	ldr	r3, [pc, #304]	; (8003d68 <xTaskIncrementTick+0x150>)
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d117      	bne.n	8003c70 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c40:	4b4a      	ldr	r3, [pc, #296]	; (8003d6c <xTaskIncrementTick+0x154>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <xTaskIncrementTick+0x36>
 8003c4a:	b672      	cpsid	i
 8003c4c:	e7fe      	b.n	8003c4c <xTaskIncrementTick+0x34>
 8003c4e:	4b47      	ldr	r3, [pc, #284]	; (8003d6c <xTaskIncrementTick+0x154>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	4b46      	ldr	r3, [pc, #280]	; (8003d70 <xTaskIncrementTick+0x158>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b44      	ldr	r3, [pc, #272]	; (8003d6c <xTaskIncrementTick+0x154>)
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	4b44      	ldr	r3, [pc, #272]	; (8003d70 <xTaskIncrementTick+0x158>)
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	4b44      	ldr	r3, [pc, #272]	; (8003d74 <xTaskIncrementTick+0x15c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	4b42      	ldr	r3, [pc, #264]	; (8003d74 <xTaskIncrementTick+0x15c>)
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f000 f9f0 	bl	8004050 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c70:	4b41      	ldr	r3, [pc, #260]	; (8003d78 <xTaskIncrementTick+0x160>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d34e      	bcc.n	8003d18 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c7a:	4b3c      	ldr	r3, [pc, #240]	; (8003d6c <xTaskIncrementTick+0x154>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <xTaskIncrementTick+0x70>
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <xTaskIncrementTick+0x72>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c8e:	4b3a      	ldr	r3, [pc, #232]	; (8003d78 <xTaskIncrementTick+0x160>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	4252      	negs	r2, r2
 8003c94:	601a      	str	r2, [r3, #0]
					break;
 8003c96:	e03f      	b.n	8003d18 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c98:	4b34      	ldr	r3, [pc, #208]	; (8003d6c <xTaskIncrementTick+0x154>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d203      	bcs.n	8003cb8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cb0:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <xTaskIncrementTick+0x160>)
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	601a      	str	r2, [r3, #0]
						break;
 8003cb6:	e02f      	b.n	8003d18 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f7ff fbea 	bl	8003496 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	3318      	adds	r3, #24
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f7ff fbe1 	bl	8003496 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd8:	4b28      	ldr	r3, [pc, #160]	; (8003d7c <xTaskIncrementTick+0x164>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d903      	bls.n	8003ce8 <xTaskIncrementTick+0xd0>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <xTaskIncrementTick+0x164>)
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cec:	0013      	movs	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	189b      	adds	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4a22      	ldr	r2, [pc, #136]	; (8003d80 <xTaskIncrementTick+0x168>)
 8003cf6:	189a      	adds	r2, r3, r2
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	0010      	movs	r0, r2
 8003d00:	f7ff fb71 	bl	80033e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d08:	4b1e      	ldr	r3, [pc, #120]	; (8003d84 <xTaskIncrementTick+0x16c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d3b3      	bcc.n	8003c7a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8003d12:	2301      	movs	r3, #1
 8003d14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d16:	e7b0      	b.n	8003c7a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d18:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <xTaskIncrementTick+0x16c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1e:	4918      	ldr	r1, [pc, #96]	; (8003d80 <xTaskIncrementTick+0x168>)
 8003d20:	0013      	movs	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	189b      	adds	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	585b      	ldr	r3, [r3, r1]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d901      	bls.n	8003d32 <xTaskIncrementTick+0x11a>
			{
				xSwitchRequired = pdTRUE;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8003d32:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <xTaskIncrementTick+0x170>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <xTaskIncrementTick+0x136>
			{
				vApplicationTickHook();
 8003d3a:	f7fc fa76 	bl	800022a <vApplicationTickHook>
 8003d3e:	e006      	b.n	8003d4e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003d40:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <xTaskIncrementTick+0x170>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <xTaskIncrementTick+0x170>)
 8003d48:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8003d4a:	f7fc fa6e 	bl	800022a <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <xTaskIncrementTick+0x174>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003d56:	2301      	movs	r3, #1
 8003d58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003d5a:	697b      	ldr	r3, [r7, #20]
}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b006      	add	sp, #24
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	200003c4 	.word	0x200003c4
 8003d68:	200003a0 	.word	0x200003a0
 8003d6c:	20000354 	.word	0x20000354
 8003d70:	20000358 	.word	0x20000358
 8003d74:	200003b4 	.word	0x200003b4
 8003d78:	200003bc 	.word	0x200003bc
 8003d7c:	200003a4 	.word	0x200003a4
 8003d80:	200002f0 	.word	0x200002f0
 8003d84:	200002ec 	.word	0x200002ec
 8003d88:	200003ac 	.word	0x200003ac
 8003d8c:	200003b0 	.word	0x200003b0

08003d90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d96:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <vTaskSwitchContext+0x9c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d9e:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <vTaskSwitchContext+0xa0>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003da4:	e03d      	b.n	8003e22 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8003da6:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <vTaskSwitchContext+0xa0>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003dac:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <vTaskSwitchContext+0xa4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	e007      	b.n	8003dc4 <vTaskSwitchContext+0x34>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <vTaskSwitchContext+0x2e>
 8003dba:	b672      	cpsid	i
 8003dbc:	e7fe      	b.n	8003dbc <vTaskSwitchContext+0x2c>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	607b      	str	r3, [r7, #4]
 8003dc4:	491c      	ldr	r1, [pc, #112]	; (8003e38 <vTaskSwitchContext+0xa8>)
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	0013      	movs	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	189b      	adds	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	585b      	ldr	r3, [r3, r1]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0ee      	beq.n	8003db4 <vTaskSwitchContext+0x24>
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	0013      	movs	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	189b      	adds	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <vTaskSwitchContext+0xa8>)
 8003de2:	189b      	adds	r3, r3, r2
 8003de4:	603b      	str	r3, [r7, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	605a      	str	r2, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	3308      	adds	r3, #8
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d104      	bne.n	8003e06 <vTaskSwitchContext+0x76>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <vTaskSwitchContext+0xac>)
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <vTaskSwitchContext+0xa4>)
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <vTaskSwitchContext+0xac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3350      	adds	r3, #80	; 0x50
 8003e1c:	001a      	movs	r2, r3
 8003e1e:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <vTaskSwitchContext+0xb0>)
 8003e20:	601a      	str	r2, [r3, #0]
}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b002      	add	sp, #8
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	200003c4 	.word	0x200003c4
 8003e30:	200003b0 	.word	0x200003b0
 8003e34:	200003a4 	.word	0x200003a4
 8003e38:	200002f0 	.word	0x200002f0
 8003e3c:	200002ec 	.word	0x200002ec
 8003e40:	20000010 	.word	0x20000010

08003e44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <xTaskRemoveFromEventList+0x1a>
 8003e5a:	b672      	cpsid	i
 8003e5c:	e7fe      	b.n	8003e5c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	3318      	adds	r3, #24
 8003e62:	0018      	movs	r0, r3
 8003e64:	f7ff fb17 	bl	8003496 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e68:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <xTaskRemoveFromEventList+0xa0>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d11d      	bne.n	8003eac <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	3304      	adds	r3, #4
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7ff fb0e 	bl	8003496 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <xTaskRemoveFromEventList+0xa4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d903      	bls.n	8003e8e <xTaskRemoveFromEventList+0x4a>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8a:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <xTaskRemoveFromEventList+0xa4>)
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e92:	0013      	movs	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	189b      	adds	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4a14      	ldr	r2, [pc, #80]	; (8003eec <xTaskRemoveFromEventList+0xa8>)
 8003e9c:	189a      	adds	r2, r3, r2
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	0019      	movs	r1, r3
 8003ea4:	0010      	movs	r0, r2
 8003ea6:	f7ff fa9e 	bl	80033e6 <vListInsertEnd>
 8003eaa:	e007      	b.n	8003ebc <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	3318      	adds	r3, #24
 8003eb0:	001a      	movs	r2, r3
 8003eb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <xTaskRemoveFromEventList+0xac>)
 8003eb4:	0011      	movs	r1, r2
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f7ff fa95 	bl	80033e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <xTaskRemoveFromEventList+0xb0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d905      	bls.n	8003ed6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <xTaskRemoveFromEventList+0xb4>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	e001      	b.n	8003eda <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003eda:	68fb      	ldr	r3, [r7, #12]
}
 8003edc:	0018      	movs	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b004      	add	sp, #16
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	200003c4 	.word	0x200003c4
 8003ee8:	200003a4 	.word	0x200003a4
 8003eec:	200002f0 	.word	0x200002f0
 8003ef0:	2000035c 	.word	0x2000035c
 8003ef4:	200002ec 	.word	0x200002ec
 8003ef8:	200003b0 	.word	0x200003b0

08003efc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f04:	f000 f848 	bl	8003f98 <prvCheckTasksWaitingTermination>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003f08:	f7fc f98a 	bl	8000220 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003f0c:	e7fa      	b.n	8003f04 <prvIdleTask+0x8>
	...

08003f10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f16:	2300      	movs	r3, #0
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	e00c      	b.n	8003f36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	0013      	movs	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	189b      	adds	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <prvInitialiseTaskLists+0x68>)
 8003f28:	189b      	adds	r3, r3, r2
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f7ff fa32 	bl	8003394 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3301      	adds	r3, #1
 8003f34:	607b      	str	r3, [r7, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d9ef      	bls.n	8003f1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <prvInitialiseTaskLists+0x6c>)
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f7ff fa28 	bl	8003394 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f44:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <prvInitialiseTaskLists+0x70>)
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7ff fa24 	bl	8003394 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <prvInitialiseTaskLists+0x74>)
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f7ff fa20 	bl	8003394 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <prvInitialiseTaskLists+0x78>)
 8003f56:	0018      	movs	r0, r3
 8003f58:	f7ff fa1c 	bl	8003394 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <prvInitialiseTaskLists+0x7c>)
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f7ff fa18 	bl	8003394 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f64:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <prvInitialiseTaskLists+0x80>)
 8003f66:	4a05      	ldr	r2, [pc, #20]	; (8003f7c <prvInitialiseTaskLists+0x6c>)
 8003f68:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <prvInitialiseTaskLists+0x84>)
 8003f6c:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <prvInitialiseTaskLists+0x70>)
 8003f6e:	601a      	str	r2, [r3, #0]
}
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b002      	add	sp, #8
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	200002f0 	.word	0x200002f0
 8003f7c:	2000032c 	.word	0x2000032c
 8003f80:	20000340 	.word	0x20000340
 8003f84:	2000035c 	.word	0x2000035c
 8003f88:	20000370 	.word	0x20000370
 8003f8c:	20000388 	.word	0x20000388
 8003f90:	20000354 	.word	0x20000354
 8003f94:	20000358 	.word	0x20000358

08003f98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f9e:	e01a      	b.n	8003fd6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003fa0:	f000 f98e 	bl	80042c0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003fa4:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <prvCheckTasksWaitingTermination+0x50>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f7ff fa70 	bl	8003496 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <prvCheckTasksWaitingTermination+0x54>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	1e5a      	subs	r2, r3, #1
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <prvCheckTasksWaitingTermination+0x54>)
 8003fbe:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <prvCheckTasksWaitingTermination+0x58>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	1e5a      	subs	r2, r3, #1
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <prvCheckTasksWaitingTermination+0x58>)
 8003fc8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003fca:	f000 f98b 	bl	80042e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f000 f80f 	bl	8003ff4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <prvCheckTasksWaitingTermination+0x58>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e0      	bne.n	8003fa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	46c0      	nop			; (mov r8, r8)
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	b002      	add	sp, #8
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20000370 	.word	0x20000370
 8003fec:	2000039c 	.word	0x2000039c
 8003ff0:	20000384 	.word	0x20000384

08003ff4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3350      	adds	r3, #80	; 0x50
 8004000:	0018      	movs	r0, r3
 8004002:	f000 fbdb 	bl	80047bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	22b5      	movs	r2, #181	; 0xb5
 800400a:	5c9b      	ldrb	r3, [r3, r2]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d109      	bne.n	8004024 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	0018      	movs	r0, r3
 8004016:	f000 fa95 	bl	8004544 <vPortFree>
				vPortFree( pxTCB );
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f000 fa91 	bl	8004544 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004022:	e010      	b.n	8004046 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	22b5      	movs	r2, #181	; 0xb5
 8004028:	5c9b      	ldrb	r3, [r3, r2]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d104      	bne.n	8004038 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	0018      	movs	r0, r3
 8004032:	f000 fa87 	bl	8004544 <vPortFree>
	}
 8004036:	e006      	b.n	8004046 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	22b5      	movs	r2, #181	; 0xb5
 800403c:	5c9b      	ldrb	r3, [r3, r2]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d001      	beq.n	8004046 <prvDeleteTCB+0x52>
 8004042:	b672      	cpsid	i
 8004044:	e7fe      	b.n	8004044 <prvDeleteTCB+0x50>
	}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	46bd      	mov	sp, r7
 800404a:	b002      	add	sp, #8
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004056:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <prvResetNextTaskUnblockTime+0x40>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <prvResetNextTaskUnblockTime+0x14>
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <prvResetNextTaskUnblockTime+0x16>
 8004064:	2300      	movs	r3, #0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d004      	beq.n	8004074 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800406a:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <prvResetNextTaskUnblockTime+0x44>)
 800406c:	2201      	movs	r2, #1
 800406e:	4252      	negs	r2, r2
 8004070:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004072:	e008      	b.n	8004086 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004074:	4b06      	ldr	r3, [pc, #24]	; (8004090 <prvResetNextTaskUnblockTime+0x40>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	4b04      	ldr	r3, [pc, #16]	; (8004094 <prvResetNextTaskUnblockTime+0x44>)
 8004084:	601a      	str	r2, [r3, #0]
}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	46bd      	mov	sp, r7
 800408a:	b002      	add	sp, #8
 800408c:	bd80      	pop	{r7, pc}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	20000354 	.word	0x20000354
 8004094:	200003bc 	.word	0x200003bc

08004098 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800409e:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <xTaskGetSchedulerState+0x30>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d102      	bne.n	80040ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040a6:	2301      	movs	r3, #1
 80040a8:	607b      	str	r3, [r7, #4]
 80040aa:	e008      	b.n	80040be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040ac:	4b07      	ldr	r3, [pc, #28]	; (80040cc <xTaskGetSchedulerState+0x34>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d102      	bne.n	80040ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040b4:	2302      	movs	r3, #2
 80040b6:	607b      	str	r3, [r7, #4]
 80040b8:	e001      	b.n	80040be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040ba:	2300      	movs	r3, #0
 80040bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040be:	687b      	ldr	r3, [r7, #4]
	}
 80040c0:	0018      	movs	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b002      	add	sp, #8
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	200003a8 	.word	0x200003a8
 80040cc:	200003c4 	.word	0x200003c4

080040d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040da:	4b24      	ldr	r3, [pc, #144]	; (800416c <prvAddCurrentTaskToDelayedList+0x9c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80040e0:	4b23      	ldr	r3, [pc, #140]	; (8004170 <prvAddCurrentTaskToDelayedList+0xa0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	22b6      	movs	r2, #182	; 0xb6
 80040e6:	2100      	movs	r1, #0
 80040e8:	5499      	strb	r1, [r3, r2]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040ea:	4b21      	ldr	r3, [pc, #132]	; (8004170 <prvAddCurrentTaskToDelayedList+0xa0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3304      	adds	r3, #4
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7ff f9d0 	bl	8003496 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3301      	adds	r3, #1
 80040fa:	d10b      	bne.n	8004114 <prvAddCurrentTaskToDelayedList+0x44>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d008      	beq.n	8004114 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004102:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	1d1a      	adds	r2, r3, #4
 8004108:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <prvAddCurrentTaskToDelayedList+0xa4>)
 800410a:	0011      	movs	r1, r2
 800410c:	0018      	movs	r0, r3
 800410e:	f7ff f96a 	bl	80033e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004112:	e026      	b.n	8004162 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	18d3      	adds	r3, r2, r3
 800411a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800411c:	4b14      	ldr	r3, [pc, #80]	; (8004170 <prvAddCurrentTaskToDelayedList+0xa0>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	429a      	cmp	r2, r3
 800412a:	d209      	bcs.n	8004140 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800412c:	4b12      	ldr	r3, [pc, #72]	; (8004178 <prvAddCurrentTaskToDelayedList+0xa8>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3304      	adds	r3, #4
 8004136:	0019      	movs	r1, r3
 8004138:	0010      	movs	r0, r2
 800413a:	f7ff f976 	bl	800342a <vListInsert>
}
 800413e:	e010      	b.n	8004162 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004140:	4b0e      	ldr	r3, [pc, #56]	; (800417c <prvAddCurrentTaskToDelayedList+0xac>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3304      	adds	r3, #4
 800414a:	0019      	movs	r1, r3
 800414c:	0010      	movs	r0, r2
 800414e:	f7ff f96c 	bl	800342a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	429a      	cmp	r2, r3
 800415a:	d202      	bcs.n	8004162 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800415c:	4b08      	ldr	r3, [pc, #32]	; (8004180 <prvAddCurrentTaskToDelayedList+0xb0>)
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	601a      	str	r2, [r3, #0]
}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	46bd      	mov	sp, r7
 8004166:	b004      	add	sp, #16
 8004168:	bd80      	pop	{r7, pc}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	200003a0 	.word	0x200003a0
 8004170:	200002ec 	.word	0x200002ec
 8004174:	20000388 	.word	0x20000388
 8004178:	20000358 	.word	0x20000358
 800417c:	20000354 	.word	0x20000354
 8004180:	200003bc 	.word	0x200003bc

08004184 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3b04      	subs	r3, #4
 8004194:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2280      	movs	r2, #128	; 0x80
 800419a:	0452      	lsls	r2, r2, #17
 800419c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3b04      	subs	r3, #4
 80041a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3b04      	subs	r3, #4
 80041ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041b0:	4a08      	ldr	r2, [pc, #32]	; (80041d4 <pxPortInitialiseStack+0x50>)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3b14      	subs	r3, #20
 80041ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3b20      	subs	r3, #32
 80041c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80041c8:	68fb      	ldr	r3, [r7, #12]
}
 80041ca:	0018      	movs	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b004      	add	sp, #16
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	080041d9 	.word	0x080041d9

080041d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041e2:	4b08      	ldr	r3, [pc, #32]	; (8004204 <prvTaskExitError+0x2c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3301      	adds	r3, #1
 80041e8:	d001      	beq.n	80041ee <prvTaskExitError+0x16>
 80041ea:	b672      	cpsid	i
 80041ec:	e7fe      	b.n	80041ec <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80041ee:	b672      	cpsid	i
	while( ulDummy == 0 )
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0fc      	beq.n	80041f2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041f8:	46c0      	nop			; (mov r8, r8)
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b002      	add	sp, #8
 8004200:	bd80      	pop	{r7, pc}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	2000000c 	.word	0x2000000c

08004208 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800420c:	46c0      	nop			; (mov r8, r8)
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004220 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004220:	4a0b      	ldr	r2, [pc, #44]	; (8004250 <pxCurrentTCBConst2>)
 8004222:	6813      	ldr	r3, [r2, #0]
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	3020      	adds	r0, #32
 8004228:	f380 8809 	msr	PSP, r0
 800422c:	2002      	movs	r0, #2
 800422e:	f380 8814 	msr	CONTROL, r0
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004238:	46ae      	mov	lr, r5
 800423a:	bc08      	pop	{r3}
 800423c:	bc04      	pop	{r2}
 800423e:	b662      	cpsie	i
 8004240:	4718      	bx	r3
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	46c0      	nop			; (mov r8, r8)
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	46c0      	nop			; (mov r8, r8)
 800424e:	46c0      	nop			; (mov r8, r8)

08004250 <pxCurrentTCBConst2>:
 8004250:	200002ec 	.word	0x200002ec
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004254:	46c0      	nop			; (mov r8, r8)
 8004256:	46c0      	nop			; (mov r8, r8)

08004258 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800425c:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <xPortStartScheduler+0x40>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b0d      	ldr	r3, [pc, #52]	; (8004298 <xPortStartScheduler+0x40>)
 8004262:	21ff      	movs	r1, #255	; 0xff
 8004264:	0409      	lsls	r1, r1, #16
 8004266:	430a      	orrs	r2, r1
 8004268:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800426a:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <xPortStartScheduler+0x40>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <xPortStartScheduler+0x40>)
 8004270:	21ff      	movs	r1, #255	; 0xff
 8004272:	0609      	lsls	r1, r1, #24
 8004274:	430a      	orrs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8004278:	f000 f898 	bl	80043ac <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800427c:	4b07      	ldr	r3, [pc, #28]	; (800429c <xPortStartScheduler+0x44>)
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004282:	f7ff ffcd 	bl	8004220 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004286:	f7ff fd83 	bl	8003d90 <vTaskSwitchContext>
	prvTaskExitError();
 800428a:	f7ff ffa5 	bl	80041d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800428e:	2300      	movs	r3, #0
}
 8004290:	0018      	movs	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	e000ed20 	.word	0xe000ed20
 800429c:	2000000c 	.word	0x2000000c

080042a0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <vPortYield+0x1c>)
 80042a6:	2280      	movs	r2, #128	; 0x80
 80042a8:	0552      	lsls	r2, r2, #21
 80042aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80042ac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80042b0:	f3bf 8f6f 	isb	sy
}
 80042b4:	46c0      	nop			; (mov r8, r8)
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	e000ed04 	.word	0xe000ed04

080042c0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80042c4:	b672      	cpsid	i
    uxCriticalNesting++;
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <vPortEnterCritical+0x20>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <vPortEnterCritical+0x20>)
 80042ce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80042d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80042d4:	f3bf 8f6f 	isb	sy
}
 80042d8:	46c0      	nop			; (mov r8, r8)
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	2000000c 	.word	0x2000000c

080042e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042e8:	4b09      	ldr	r3, [pc, #36]	; (8004310 <vPortExitCritical+0x2c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <vPortExitCritical+0x10>
 80042f0:	b672      	cpsid	i
 80042f2:	e7fe      	b.n	80042f2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <vPortExitCritical+0x2c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	1e5a      	subs	r2, r3, #1
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <vPortExitCritical+0x2c>)
 80042fc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80042fe:	4b04      	ldr	r3, [pc, #16]	; (8004310 <vPortExitCritical+0x2c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d100      	bne.n	8004308 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004306:	b662      	cpsie	i
    }
}
 8004308:	46c0      	nop			; (mov r8, r8)
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	2000000c 	.word	0x2000000c

08004314 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004314:	f3ef 8010 	mrs	r0, PRIMASK
 8004318:	b672      	cpsid	i
 800431a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	0018      	movs	r0, r3

08004320 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004320:	f380 8810 	msr	PRIMASK, r0
 8004324:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004326:	46c0      	nop			; (mov r8, r8)
	...

08004330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004330:	f3ef 8009 	mrs	r0, PSP
 8004334:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <pxCurrentTCBConst>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	3820      	subs	r0, #32
 800433a:	6010      	str	r0, [r2, #0]
 800433c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800433e:	4644      	mov	r4, r8
 8004340:	464d      	mov	r5, r9
 8004342:	4656      	mov	r6, sl
 8004344:	465f      	mov	r7, fp
 8004346:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004348:	b508      	push	{r3, lr}
 800434a:	b672      	cpsid	i
 800434c:	f7ff fd20 	bl	8003d90 <vTaskSwitchContext>
 8004350:	b662      	cpsie	i
 8004352:	bc0c      	pop	{r2, r3}
 8004354:	6811      	ldr	r1, [r2, #0]
 8004356:	6808      	ldr	r0, [r1, #0]
 8004358:	3010      	adds	r0, #16
 800435a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800435c:	46a0      	mov	r8, r4
 800435e:	46a9      	mov	r9, r5
 8004360:	46b2      	mov	sl, r6
 8004362:	46bb      	mov	fp, r7
 8004364:	f380 8809 	msr	PSP, r0
 8004368:	3820      	subs	r0, #32
 800436a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800436c:	4718      	bx	r3
 800436e:	46c0      	nop			; (mov r8, r8)

08004370 <pxCurrentTCBConst>:
 8004370:	200002ec 	.word	0x200002ec
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004374:	46c0      	nop			; (mov r8, r8)
 8004376:	46c0      	nop			; (mov r8, r8)

08004378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800437e:	f7ff ffc9 	bl	8004314 <ulSetInterruptMaskFromISR>
 8004382:	0003      	movs	r3, r0
 8004384:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004386:	f7ff fc47 	bl	8003c18 <xTaskIncrementTick>
 800438a:	1e03      	subs	r3, r0, #0
 800438c:	d003      	beq.n	8004396 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <xPortSysTickHandler+0x30>)
 8004390:	2280      	movs	r2, #128	; 0x80
 8004392:	0552      	lsls	r2, r2, #21
 8004394:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0018      	movs	r0, r3
 800439a:	f7ff ffc1 	bl	8004320 <vClearInterruptMaskFromISR>
}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	46bd      	mov	sp, r7
 80043a2:	b002      	add	sp, #8
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	e000ed04 	.word	0xe000ed04

080043ac <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <prvSetupTimerInterrupt+0x34>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80043b6:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <prvSetupTimerInterrupt+0x38>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <prvSetupTimerInterrupt+0x3c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	22fa      	movs	r2, #250	; 0xfa
 80043c2:	0091      	lsls	r1, r2, #2
 80043c4:	0018      	movs	r0, r3
 80043c6:	f7fb fe9f 	bl	8000108 <__udivsi3>
 80043ca:	0003      	movs	r3, r0
 80043cc:	001a      	movs	r2, r3
 80043ce:	4b07      	ldr	r3, [pc, #28]	; (80043ec <prvSetupTimerInterrupt+0x40>)
 80043d0:	3a01      	subs	r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80043d4:	4b02      	ldr	r3, [pc, #8]	; (80043e0 <prvSetupTimerInterrupt+0x34>)
 80043d6:	2207      	movs	r2, #7
 80043d8:	601a      	str	r2, [r3, #0]
}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	e000e010 	.word	0xe000e010
 80043e4:	e000e018 	.word	0xe000e018
 80043e8:	20000000 	.word	0x20000000
 80043ec:	e000e014 	.word	0xe000e014

080043f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80043fc:	f7ff fb74 	bl	8003ae8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004400:	4b4b      	ldr	r3, [pc, #300]	; (8004530 <pvPortMalloc+0x140>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004408:	f000 f8e4 	bl	80045d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800440c:	4b49      	ldr	r3, [pc, #292]	; (8004534 <pvPortMalloc+0x144>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	4013      	ands	r3, r2
 8004414:	d000      	beq.n	8004418 <pvPortMalloc+0x28>
 8004416:	e079      	b.n	800450c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d012      	beq.n	8004444 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800441e:	2208      	movs	r2, #8
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	189b      	adds	r3, r3, r2
 8004424:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2207      	movs	r2, #7
 800442a:	4013      	ands	r3, r2
 800442c:	d00a      	beq.n	8004444 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2207      	movs	r2, #7
 8004432:	4393      	bics	r3, r2
 8004434:	3308      	adds	r3, #8
 8004436:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2207      	movs	r2, #7
 800443c:	4013      	ands	r3, r2
 800443e:	d001      	beq.n	8004444 <pvPortMalloc+0x54>
 8004440:	b672      	cpsid	i
 8004442:	e7fe      	b.n	8004442 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d060      	beq.n	800450c <pvPortMalloc+0x11c>
 800444a:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <pvPortMalloc+0x148>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	429a      	cmp	r2, r3
 8004452:	d85b      	bhi.n	800450c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004454:	4b39      	ldr	r3, [pc, #228]	; (800453c <pvPortMalloc+0x14c>)
 8004456:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004458:	4b38      	ldr	r3, [pc, #224]	; (800453c <pvPortMalloc+0x14c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800445e:	e004      	b.n	800446a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	429a      	cmp	r2, r3
 8004472:	d903      	bls.n	800447c <pvPortMalloc+0x8c>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f1      	bne.n	8004460 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800447c:	4b2c      	ldr	r3, [pc, #176]	; (8004530 <pvPortMalloc+0x140>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	429a      	cmp	r2, r3
 8004484:	d042      	beq.n	800450c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2208      	movs	r2, #8
 800448c:	189b      	adds	r3, r3, r2
 800448e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	1ad2      	subs	r2, r2, r3
 80044a0:	2308      	movs	r3, #8
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d916      	bls.n	80044d6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	18d3      	adds	r3, r2, r3
 80044ae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2207      	movs	r2, #7
 80044b4:	4013      	ands	r3, r2
 80044b6:	d001      	beq.n	80044bc <pvPortMalloc+0xcc>
 80044b8:	b672      	cpsid	i
 80044ba:	e7fe      	b.n	80044ba <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	1ad2      	subs	r2, r2, r3
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	0018      	movs	r0, r3
 80044d2:	f000 f8df 	bl	8004694 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044d6:	4b18      	ldr	r3, [pc, #96]	; (8004538 <pvPortMalloc+0x148>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	1ad2      	subs	r2, r2, r3
 80044e0:	4b15      	ldr	r3, [pc, #84]	; (8004538 <pvPortMalloc+0x148>)
 80044e2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044e4:	4b14      	ldr	r3, [pc, #80]	; (8004538 <pvPortMalloc+0x148>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4b15      	ldr	r3, [pc, #84]	; (8004540 <pvPortMalloc+0x150>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d203      	bcs.n	80044f8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044f0:	4b11      	ldr	r3, [pc, #68]	; (8004538 <pvPortMalloc+0x148>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b12      	ldr	r3, [pc, #72]	; (8004540 <pvPortMalloc+0x150>)
 80044f6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	4b0d      	ldr	r3, [pc, #52]	; (8004534 <pvPortMalloc+0x144>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	431a      	orrs	r2, r3
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800450c:	f7ff faf8 	bl	8003b00 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <pvPortMalloc+0x12a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8004516:	f7fb fe8d 	bl	8000234 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2207      	movs	r2, #7
 800451e:	4013      	ands	r3, r2
 8004520:	d001      	beq.n	8004526 <pvPortMalloc+0x136>
 8004522:	b672      	cpsid	i
 8004524:	e7fe      	b.n	8004524 <pvPortMalloc+0x134>
	return pvReturn;
 8004526:	68fb      	ldr	r3, [r7, #12]
}
 8004528:	0018      	movs	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	b006      	add	sp, #24
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000880 	.word	0x20000880
 8004534:	2000088c 	.word	0x2000088c
 8004538:	20000884 	.word	0x20000884
 800453c:	20000878 	.word	0x20000878
 8004540:	20000888 	.word	0x20000888

08004544 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d035      	beq.n	80045c2 <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004556:	2308      	movs	r3, #8
 8004558:	425b      	negs	r3, r3
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	18d3      	adds	r3, r2, r3
 800455e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	4b18      	ldr	r3, [pc, #96]	; (80045cc <vPortFree+0x88>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4013      	ands	r3, r2
 800456e:	d101      	bne.n	8004574 <vPortFree+0x30>
 8004570:	b672      	cpsid	i
 8004572:	e7fe      	b.n	8004572 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <vPortFree+0x3c>
 800457c:	b672      	cpsid	i
 800457e:	e7fe      	b.n	800457e <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	4b11      	ldr	r3, [pc, #68]	; (80045cc <vPortFree+0x88>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4013      	ands	r3, r2
 800458a:	d01a      	beq.n	80045c2 <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d116      	bne.n	80045c2 <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <vPortFree+0x88>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	43db      	mvns	r3, r3
 800459e:	401a      	ands	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045a4:	f7ff faa0 	bl	8003ae8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	4b08      	ldr	r3, [pc, #32]	; (80045d0 <vPortFree+0x8c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	18d2      	adds	r2, r2, r3
 80045b2:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <vPortFree+0x8c>)
 80045b4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f000 f86b 	bl	8004694 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80045be:	f7ff fa9f 	bl	8003b00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b004      	add	sp, #16
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	2000088c 	.word	0x2000088c
 80045d0:	20000884 	.word	0x20000884

080045d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045da:	2396      	movs	r3, #150	; 0x96
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80045e0:	4b26      	ldr	r3, [pc, #152]	; (800467c <prvHeapInit+0xa8>)
 80045e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2207      	movs	r2, #7
 80045e8:	4013      	ands	r3, r2
 80045ea:	d00c      	beq.n	8004606 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3307      	adds	r3, #7
 80045f0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2207      	movs	r2, #7
 80045f6:	4393      	bics	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1ad2      	subs	r2, r2, r3
 8004600:	4b1e      	ldr	r3, [pc, #120]	; (800467c <prvHeapInit+0xa8>)
 8004602:	18d3      	adds	r3, r2, r3
 8004604:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800460a:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <prvHeapInit+0xac>)
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004610:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <prvHeapInit+0xac>)
 8004612:	2200      	movs	r2, #0
 8004614:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	18d3      	adds	r3, r2, r3
 800461c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800461e:	2208      	movs	r2, #8
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2207      	movs	r2, #7
 800462a:	4393      	bics	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <prvHeapInit+0xb0>)
 8004632:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8004634:	4b13      	ldr	r3, [pc, #76]	; (8004684 <prvHeapInit+0xb0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2200      	movs	r2, #0
 800463a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800463c:	4b11      	ldr	r3, [pc, #68]	; (8004684 <prvHeapInit+0xb0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	1ad2      	subs	r2, r2, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004652:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <prvHeapInit+0xb0>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <prvHeapInit+0xb4>)
 8004660:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	4b09      	ldr	r3, [pc, #36]	; (800468c <prvHeapInit+0xb8>)
 8004668:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800466a:	4b09      	ldr	r3, [pc, #36]	; (8004690 <prvHeapInit+0xbc>)
 800466c:	2280      	movs	r2, #128	; 0x80
 800466e:	0612      	lsls	r2, r2, #24
 8004670:	601a      	str	r2, [r3, #0]
}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	46bd      	mov	sp, r7
 8004676:	b004      	add	sp, #16
 8004678:	bd80      	pop	{r7, pc}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	200003c8 	.word	0x200003c8
 8004680:	20000878 	.word	0x20000878
 8004684:	20000880 	.word	0x20000880
 8004688:	20000888 	.word	0x20000888
 800468c:	20000884 	.word	0x20000884
 8004690:	2000088c 	.word	0x2000088c

08004694 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800469c:	4b27      	ldr	r3, [pc, #156]	; (800473c <prvInsertBlockIntoFreeList+0xa8>)
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e002      	b.n	80046a8 <prvInsertBlockIntoFreeList+0x14>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d8f7      	bhi.n	80046a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	18d3      	adds	r3, r2, r3
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d108      	bne.n	80046d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	18d2      	adds	r2, r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	18d2      	adds	r2, r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d118      	bne.n	800471c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4b14      	ldr	r3, [pc, #80]	; (8004740 <prvInsertBlockIntoFreeList+0xac>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d00d      	beq.n	8004712 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	18d2      	adds	r2, r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	e008      	b.n	8004724 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004712:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <prvInsertBlockIntoFreeList+0xac>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	e003      	b.n	8004724 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	429a      	cmp	r2, r3
 800472a:	d002      	beq.n	8004732 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	46bd      	mov	sp, r7
 8004736:	b004      	add	sp, #16
 8004738:	bd80      	pop	{r7, pc}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	20000878 	.word	0x20000878
 8004740:	20000880 	.word	0x20000880

08004744 <__libc_init_array>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	2600      	movs	r6, #0
 8004748:	4d0c      	ldr	r5, [pc, #48]	; (800477c <__libc_init_array+0x38>)
 800474a:	4c0d      	ldr	r4, [pc, #52]	; (8004780 <__libc_init_array+0x3c>)
 800474c:	1b64      	subs	r4, r4, r5
 800474e:	10a4      	asrs	r4, r4, #2
 8004750:	42a6      	cmp	r6, r4
 8004752:	d109      	bne.n	8004768 <__libc_init_array+0x24>
 8004754:	2600      	movs	r6, #0
 8004756:	f000 f8f1 	bl	800493c <_init>
 800475a:	4d0a      	ldr	r5, [pc, #40]	; (8004784 <__libc_init_array+0x40>)
 800475c:	4c0a      	ldr	r4, [pc, #40]	; (8004788 <__libc_init_array+0x44>)
 800475e:	1b64      	subs	r4, r4, r5
 8004760:	10a4      	asrs	r4, r4, #2
 8004762:	42a6      	cmp	r6, r4
 8004764:	d105      	bne.n	8004772 <__libc_init_array+0x2e>
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	00b3      	lsls	r3, r6, #2
 800476a:	58eb      	ldr	r3, [r5, r3]
 800476c:	4798      	blx	r3
 800476e:	3601      	adds	r6, #1
 8004770:	e7ee      	b.n	8004750 <__libc_init_array+0xc>
 8004772:	00b3      	lsls	r3, r6, #2
 8004774:	58eb      	ldr	r3, [r5, r3]
 8004776:	4798      	blx	r3
 8004778:	3601      	adds	r6, #1
 800477a:	e7f2      	b.n	8004762 <__libc_init_array+0x1e>
 800477c:	08004a44 	.word	0x08004a44
 8004780:	08004a44 	.word	0x08004a44
 8004784:	08004a44 	.word	0x08004a44
 8004788:	08004a48 	.word	0x08004a48

0800478c <__retarget_lock_acquire_recursive>:
 800478c:	4770      	bx	lr

0800478e <__retarget_lock_release_recursive>:
 800478e:	4770      	bx	lr

08004790 <memset>:
 8004790:	0003      	movs	r3, r0
 8004792:	1882      	adds	r2, r0, r2
 8004794:	4293      	cmp	r3, r2
 8004796:	d100      	bne.n	800479a <memset+0xa>
 8004798:	4770      	bx	lr
 800479a:	7019      	strb	r1, [r3, #0]
 800479c:	3301      	adds	r3, #1
 800479e:	e7f9      	b.n	8004794 <memset+0x4>

080047a0 <cleanup_glue>:
 80047a0:	b570      	push	{r4, r5, r6, lr}
 80047a2:	000d      	movs	r5, r1
 80047a4:	6809      	ldr	r1, [r1, #0]
 80047a6:	0004      	movs	r4, r0
 80047a8:	2900      	cmp	r1, #0
 80047aa:	d001      	beq.n	80047b0 <cleanup_glue+0x10>
 80047ac:	f7ff fff8 	bl	80047a0 <cleanup_glue>
 80047b0:	0029      	movs	r1, r5
 80047b2:	0020      	movs	r0, r4
 80047b4:	f000 f878 	bl	80048a8 <_free_r>
 80047b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080047bc <_reclaim_reent>:
 80047bc:	4b31      	ldr	r3, [pc, #196]	; (8004884 <_reclaim_reent+0xc8>)
 80047be:	b570      	push	{r4, r5, r6, lr}
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	0004      	movs	r4, r0
 80047c4:	4283      	cmp	r3, r0
 80047c6:	d049      	beq.n	800485c <_reclaim_reent+0xa0>
 80047c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <_reclaim_reent+0x28>
 80047ce:	2500      	movs	r5, #0
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	42ab      	cmp	r3, r5
 80047d4:	d147      	bne.n	8004866 <_reclaim_reent+0xaa>
 80047d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047d8:	6819      	ldr	r1, [r3, #0]
 80047da:	2900      	cmp	r1, #0
 80047dc:	d002      	beq.n	80047e4 <_reclaim_reent+0x28>
 80047de:	0020      	movs	r0, r4
 80047e0:	f000 f862 	bl	80048a8 <_free_r>
 80047e4:	6961      	ldr	r1, [r4, #20]
 80047e6:	2900      	cmp	r1, #0
 80047e8:	d002      	beq.n	80047f0 <_reclaim_reent+0x34>
 80047ea:	0020      	movs	r0, r4
 80047ec:	f000 f85c 	bl	80048a8 <_free_r>
 80047f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80047f2:	2900      	cmp	r1, #0
 80047f4:	d002      	beq.n	80047fc <_reclaim_reent+0x40>
 80047f6:	0020      	movs	r0, r4
 80047f8:	f000 f856 	bl	80048a8 <_free_r>
 80047fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80047fe:	2900      	cmp	r1, #0
 8004800:	d002      	beq.n	8004808 <_reclaim_reent+0x4c>
 8004802:	0020      	movs	r0, r4
 8004804:	f000 f850 	bl	80048a8 <_free_r>
 8004808:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800480a:	2900      	cmp	r1, #0
 800480c:	d002      	beq.n	8004814 <_reclaim_reent+0x58>
 800480e:	0020      	movs	r0, r4
 8004810:	f000 f84a 	bl	80048a8 <_free_r>
 8004814:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004816:	2900      	cmp	r1, #0
 8004818:	d002      	beq.n	8004820 <_reclaim_reent+0x64>
 800481a:	0020      	movs	r0, r4
 800481c:	f000 f844 	bl	80048a8 <_free_r>
 8004820:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004822:	2900      	cmp	r1, #0
 8004824:	d002      	beq.n	800482c <_reclaim_reent+0x70>
 8004826:	0020      	movs	r0, r4
 8004828:	f000 f83e 	bl	80048a8 <_free_r>
 800482c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800482e:	2900      	cmp	r1, #0
 8004830:	d002      	beq.n	8004838 <_reclaim_reent+0x7c>
 8004832:	0020      	movs	r0, r4
 8004834:	f000 f838 	bl	80048a8 <_free_r>
 8004838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800483a:	2900      	cmp	r1, #0
 800483c:	d002      	beq.n	8004844 <_reclaim_reent+0x88>
 800483e:	0020      	movs	r0, r4
 8004840:	f000 f832 	bl	80048a8 <_free_r>
 8004844:	69a3      	ldr	r3, [r4, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <_reclaim_reent+0xa0>
 800484a:	0020      	movs	r0, r4
 800484c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800484e:	4798      	blx	r3
 8004850:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004852:	2900      	cmp	r1, #0
 8004854:	d002      	beq.n	800485c <_reclaim_reent+0xa0>
 8004856:	0020      	movs	r0, r4
 8004858:	f7ff ffa2 	bl	80047a0 <cleanup_glue>
 800485c:	bd70      	pop	{r4, r5, r6, pc}
 800485e:	5949      	ldr	r1, [r1, r5]
 8004860:	2900      	cmp	r1, #0
 8004862:	d108      	bne.n	8004876 <_reclaim_reent+0xba>
 8004864:	3504      	adds	r5, #4
 8004866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004868:	68d9      	ldr	r1, [r3, #12]
 800486a:	2d80      	cmp	r5, #128	; 0x80
 800486c:	d1f7      	bne.n	800485e <_reclaim_reent+0xa2>
 800486e:	0020      	movs	r0, r4
 8004870:	f000 f81a 	bl	80048a8 <_free_r>
 8004874:	e7af      	b.n	80047d6 <_reclaim_reent+0x1a>
 8004876:	680e      	ldr	r6, [r1, #0]
 8004878:	0020      	movs	r0, r4
 800487a:	f000 f815 	bl	80048a8 <_free_r>
 800487e:	0031      	movs	r1, r6
 8004880:	e7ee      	b.n	8004860 <_reclaim_reent+0xa4>
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	20000010 	.word	0x20000010

08004888 <__malloc_lock>:
 8004888:	b510      	push	{r4, lr}
 800488a:	4802      	ldr	r0, [pc, #8]	; (8004894 <__malloc_lock+0xc>)
 800488c:	f7ff ff7e 	bl	800478c <__retarget_lock_acquire_recursive>
 8004890:	bd10      	pop	{r4, pc}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	20000890 	.word	0x20000890

08004898 <__malloc_unlock>:
 8004898:	b510      	push	{r4, lr}
 800489a:	4802      	ldr	r0, [pc, #8]	; (80048a4 <__malloc_unlock+0xc>)
 800489c:	f7ff ff77 	bl	800478e <__retarget_lock_release_recursive>
 80048a0:	bd10      	pop	{r4, pc}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	20000890 	.word	0x20000890

080048a8 <_free_r>:
 80048a8:	b570      	push	{r4, r5, r6, lr}
 80048aa:	0005      	movs	r5, r0
 80048ac:	2900      	cmp	r1, #0
 80048ae:	d010      	beq.n	80048d2 <_free_r+0x2a>
 80048b0:	1f0c      	subs	r4, r1, #4
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	da00      	bge.n	80048ba <_free_r+0x12>
 80048b8:	18e4      	adds	r4, r4, r3
 80048ba:	0028      	movs	r0, r5
 80048bc:	f7ff ffe4 	bl	8004888 <__malloc_lock>
 80048c0:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <_free_r+0x90>)
 80048c2:	6813      	ldr	r3, [r2, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d105      	bne.n	80048d4 <_free_r+0x2c>
 80048c8:	6063      	str	r3, [r4, #4]
 80048ca:	6014      	str	r4, [r2, #0]
 80048cc:	0028      	movs	r0, r5
 80048ce:	f7ff ffe3 	bl	8004898 <__malloc_unlock>
 80048d2:	bd70      	pop	{r4, r5, r6, pc}
 80048d4:	42a3      	cmp	r3, r4
 80048d6:	d908      	bls.n	80048ea <_free_r+0x42>
 80048d8:	6821      	ldr	r1, [r4, #0]
 80048da:	1860      	adds	r0, r4, r1
 80048dc:	4283      	cmp	r3, r0
 80048de:	d1f3      	bne.n	80048c8 <_free_r+0x20>
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	1841      	adds	r1, r0, r1
 80048e6:	6021      	str	r1, [r4, #0]
 80048e8:	e7ee      	b.n	80048c8 <_free_r+0x20>
 80048ea:	001a      	movs	r2, r3
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <_free_r+0x4e>
 80048f2:	42a3      	cmp	r3, r4
 80048f4:	d9f9      	bls.n	80048ea <_free_r+0x42>
 80048f6:	6811      	ldr	r1, [r2, #0]
 80048f8:	1850      	adds	r0, r2, r1
 80048fa:	42a0      	cmp	r0, r4
 80048fc:	d10b      	bne.n	8004916 <_free_r+0x6e>
 80048fe:	6820      	ldr	r0, [r4, #0]
 8004900:	1809      	adds	r1, r1, r0
 8004902:	1850      	adds	r0, r2, r1
 8004904:	6011      	str	r1, [r2, #0]
 8004906:	4283      	cmp	r3, r0
 8004908:	d1e0      	bne.n	80048cc <_free_r+0x24>
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	1841      	adds	r1, r0, r1
 8004910:	6011      	str	r1, [r2, #0]
 8004912:	6053      	str	r3, [r2, #4]
 8004914:	e7da      	b.n	80048cc <_free_r+0x24>
 8004916:	42a0      	cmp	r0, r4
 8004918:	d902      	bls.n	8004920 <_free_r+0x78>
 800491a:	230c      	movs	r3, #12
 800491c:	602b      	str	r3, [r5, #0]
 800491e:	e7d5      	b.n	80048cc <_free_r+0x24>
 8004920:	6821      	ldr	r1, [r4, #0]
 8004922:	1860      	adds	r0, r4, r1
 8004924:	4283      	cmp	r3, r0
 8004926:	d103      	bne.n	8004930 <_free_r+0x88>
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	1841      	adds	r1, r0, r1
 800492e:	6021      	str	r1, [r4, #0]
 8004930:	6063      	str	r3, [r4, #4]
 8004932:	6054      	str	r4, [r2, #4]
 8004934:	e7ca      	b.n	80048cc <_free_r+0x24>
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	20000894 	.word	0x20000894

0800493c <_init>:
 800493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004942:	bc08      	pop	{r3}
 8004944:	469e      	mov	lr, r3
 8004946:	4770      	bx	lr

08004948 <_fini>:
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494e:	bc08      	pop	{r3}
 8004950:	469e      	mov	lr, r3
 8004952:	4770      	bx	lr
